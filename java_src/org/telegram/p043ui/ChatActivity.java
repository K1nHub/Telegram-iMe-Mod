package org.telegram.p043ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewParent;
import android.view.ViewPropertyAnimator;
import android.view.ViewTreeObserver;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.util.Consumer;
import androidx.dynamicanimation.animation.DynamicAnimation;
import androidx.dynamicanimation.animation.FloatValueHolder;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import androidx.recyclerview.widget.ChatListItemAnimator;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearSmoothScrollerCustom;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.google.android.exoplayer2.C0483C;
import com.google.android.exoplayer2.DefaultLoadControl;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.audio.AacUtil;
import com.google.android.exoplayer2.extractor.p015ts.PsExtractor;
import com.google.android.exoplayer2.p016ui.AspectRatioFrameLayout;
import com.google.android.exoplayer2.source.rtsp.SessionDescription;
import com.google.android.exoplayer2.text.ttml.TtmlNode;
import com.google.android.exoplayer2.util.MimeTypes;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.wearable.WearableStatusCodes;
import com.iMe.common.IdFabric$CustomType;
import com.iMe.common.IdFabric$Menu;
import com.iMe.common.IdFabric$RequestCode;
import com.iMe.common.TelegramPreferenceKeys;
import com.iMe.fork.controller.MultiPanelController;
import com.iMe.fork.controller.TemplatesController;
import com.iMe.fork.enums.DialogType;
import com.iMe.fork.enums.ExtendedAvatarPreviewerItem;
import com.iMe.fork.enums.FormattingPanelType;
import com.iMe.fork.enums.LockedSection;
import com.iMe.fork.enums.MultiPanelButton;
import com.iMe.fork.enums.RecentChatsDialogType;
import com.iMe.fork.enums.SentMessageFont;
import com.iMe.fork.enums.TranslationDialogType;
import com.iMe.fork.models.MultiPanelButtonState;
import com.iMe.fork.p023ui.dialog.ChatLanguageSettingsBottomSheet;
import com.iMe.fork.p023ui.dialog.ForwardCloudBottomSheet;
import com.iMe.fork.p023ui.dialog.SelectedFilesBottomSheet;
import com.iMe.fork.p023ui.dialog.TranslateAlert;
import com.iMe.fork.p023ui.fragment.CreateReactionButtonsActivity;
import com.iMe.fork.p023ui.fragment.ExtendedAvatarPreviewerSettingsActivity;
import com.iMe.fork.p023ui.fragment.MultiPanelSettingsActivity;
import com.iMe.fork.p023ui.view.FragmentPreviewMenu;
import com.iMe.fork.p023ui.view.MessageMoreActionsView;
import com.iMe.fork.p023ui.view.PinnedPlayerView;
import com.iMe.fork.utils.Callbacks$Callback;
import com.iMe.fork.utils.Callbacks$Callback1;
import com.iMe.fork.utils.Callbacks$Callback2;
import com.iMe.fork.utils.FileSavingHelper;
import com.iMe.mapper.wallet.TokenUiMappingKt;
import com.iMe.model.dialog.DialogModel;
import com.iMe.model.dialog.EditTextDialogModel;
import com.iMe.model.translation.TranslationArgs;
import com.iMe.model.translation.TranslationLanguageUiModel;
import com.iMe.model.wallet.send.WalletSendScreenType;
import com.iMe.model.wallet.transfer.TransferScreenArgs;
import com.iMe.navigation.wallet.coordinator.WalletFlowCoordinator;
import com.iMe.p030ui.base.mvp.JavaMvpFragment;
import com.iMe.p030ui.chat.ChatPresenter;
import com.iMe.p030ui.chat.ChatView;
import com.iMe.p030ui.chat.copy.ChatCopyPartBottomSheetDialog;
import com.iMe.p030ui.formatting_messages.FormattingMessagesWeb;
import com.iMe.p030ui.topics.TopicsAlert;
import com.iMe.p030ui.wallet.cryptobox.conditions.CryptoBoxConditionsBottomSheetDialog;
import com.iMe.p030ui.wallet.send.WalletSendFragment;
import com.iMe.storage.data.manager.analytics.AnalyticsManager;
import com.iMe.storage.data.utils.system.AndroidActivityHolder;
import com.iMe.storage.domain.model.analytics.AnalyticsEvent;
import com.iMe.storage.domain.model.crypto.BlockchainType;
import com.iMe.storage.domain.model.crypto.NetworkType;
import com.iMe.storage.domain.model.crypto.cryptobox.CryptoBoxInfo;
import com.iMe.storage.domain.model.dialogs.DialogTranslationSettings;
import com.iMe.storage.domain.model.templates.TemplateModel;
import com.iMe.storage.domain.model.topics.TopicModel;
import com.iMe.storage.domain.model.wallet.token.TokenDetailed;
import com.iMe.utils.dialogs.DialogUtils;
import com.iMe.utils.dialogs.DialogsFactoryKt;
import com.iMe.utils.extentions.common.ContextExtKt;
import com.iMe.utils.helper.binancepay.BinancePayHelper;
import com.iMe.utils.helper.reaction.ReactionHelper;
import com.iMe.utils.helper.wallet.WalletHelper;
import io.reactivex.disposables.Disposables;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import kotlin.Lazy;
import kotlin.jvm.functions.Function0;
import moxy.presenter.InjectPresenter;
import moxy.presenter.ProvidePresenter;
import org.koin.core.parameter.ParametersHolder;
import org.koin.core.parameter.ParametersHolderKt;
import org.koin.java.KoinJavaComponent;
import org.telegram.PhoneFormat.C3544PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BotWebViewVibrationEffect;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.C3632R;
import org.telegram.messenger.ChatMessageSharedResources;
import org.telegram.messenger.ChatMessagesMetadataController;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ChatThemeController;
import org.telegram.messenger.CodeHighlighting;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DocumentObject;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiData;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FlagSecureReason;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LanguageDetector;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagePreviewParams;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.SvgHelper;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.utils.PhotoUtilities;
import org.telegram.p043ui.ActionBar.ActionBarMenu;
import org.telegram.p043ui.ActionBar.ActionBarMenuItem;
import org.telegram.p043ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.p043ui.ActionBar.ActionBarPopupWindow;
import org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper;
import org.telegram.p043ui.ActionBar.AlertDialog;
import org.telegram.p043ui.ActionBar.BackDrawable;
import org.telegram.p043ui.ActionBar.BaseFragment;
import org.telegram.p043ui.ActionBar.BottomSheet;
import org.telegram.p043ui.ActionBar.C3704ActionBar;
import org.telegram.p043ui.ActionBar.EmojiThemes;
import org.telegram.p043ui.ActionBar.INavigationLayout;
import org.telegram.p043ui.ActionBar.SimpleTextView;
import org.telegram.p043ui.ActionBar.Theme;
import org.telegram.p043ui.ActionBar.ThemeDescription;
import org.telegram.p043ui.Adapters.FiltersView;
import org.telegram.p043ui.Adapters.MentionsAdapter;
import org.telegram.p043ui.Adapters.MessagesSearchAdapter;
import org.telegram.p043ui.AvatarPreviewer;
import org.telegram.p043ui.Cells.BotHelpCell;
import org.telegram.p043ui.Cells.BotSwitchCell;
import org.telegram.p043ui.Cells.ChatActionCell;
import org.telegram.p043ui.Cells.ChatLoadingCell;
import org.telegram.p043ui.Cells.ChatMessageCell;
import org.telegram.p043ui.Cells.ChatUnreadCell;
import org.telegram.p043ui.Cells.CheckBoxCell;
import org.telegram.p043ui.Cells.ContextLinkCell;
import org.telegram.p043ui.Cells.DialogCell;
import org.telegram.p043ui.Cells.MentionCell;
import org.telegram.p043ui.Cells.ShareDialogCell;
import org.telegram.p043ui.Cells.StickerCell;
import org.telegram.p043ui.Cells.TextSelectionHelper;
import org.telegram.p043ui.ChatActivity;
import org.telegram.p043ui.Components.AlertsCreator;
import org.telegram.p043ui.Components.AnimatedEmojiDrawable;
import org.telegram.p043ui.Components.AnimatedEmojiSpan;
import org.telegram.p043ui.Components.AnimatedFileDrawable;
import org.telegram.p043ui.Components.AnimatedTextView;
import org.telegram.p043ui.Components.AnimationProperties;
import org.telegram.p043ui.Components.AttachBotIntroTopView;
import org.telegram.p043ui.Components.BackButtonMenu;
import org.telegram.p043ui.Components.BackupImageView;
import org.telegram.p043ui.Components.BluredView;
import org.telegram.p043ui.Components.BlurredFrameLayout;
import org.telegram.p043ui.Components.BlurredLinearLayout;
import org.telegram.p043ui.Components.BotCommandsMenuContainer;
import org.telegram.p043ui.Components.BotCommandsMenuView;
import org.telegram.p043ui.Components.BotWebViewSheet;
import org.telegram.p043ui.Components.Bulletin;
import org.telegram.p043ui.Components.BulletinFactory;
import org.telegram.p043ui.Components.ChatActivityEnterTopView;
import org.telegram.p043ui.Components.ChatActivityEnterView;
import org.telegram.p043ui.Components.ChatActivityInterface;
import org.telegram.p043ui.Components.ChatAttachAlert;
import org.telegram.p043ui.Components.ChatAttachAlertDocumentLayout;
import org.telegram.p043ui.Components.ChatAttachAlertPhotoLayout;
import org.telegram.p043ui.Components.ChatAttachAlertPhotoLayoutPreview;
import org.telegram.p043ui.Components.ChatAvatarContainer;
import org.telegram.p043ui.Components.ChatBigEmptyView;
import org.telegram.p043ui.Components.ChatGreetingsView;
import org.telegram.p043ui.Components.ChatNotificationsPopupWrapper;
import org.telegram.p043ui.Components.ChatThemeBottomSheet;
import org.telegram.p043ui.Components.ChecksHintView;
import org.telegram.p043ui.Components.CircularProgressDrawable;
import org.telegram.p043ui.Components.ClippingImageView;
import org.telegram.p043ui.Components.CounterView;
import org.telegram.p043ui.Components.CrossfadeDrawable;
import org.telegram.p043ui.Components.CubicBezierInterpolator;
import org.telegram.p043ui.Components.EditTextCaption;
import org.telegram.p043ui.Components.EmbedBottomSheet;
import org.telegram.p043ui.Components.EmojiPacksAlert;
import org.telegram.p043ui.Components.EmojiView;
import org.telegram.p043ui.Components.FiltersListBottomSheet;
import org.telegram.p043ui.Components.FireworksOverlay;
import org.telegram.p043ui.Components.FloatingDebug.FloatingDebugController;
import org.telegram.p043ui.Components.FloatingDebug.FloatingDebugProvider;
import org.telegram.p043ui.Components.Forum.ForumUtilities;
import org.telegram.p043ui.Components.FragmentContextView;
import org.telegram.p043ui.Components.GigagroupConvertAlert;
import org.telegram.p043ui.Components.HideViewAfterAnimation;
import org.telegram.p043ui.Components.HintView;
import org.telegram.p043ui.Components.ImageUpdater;
import org.telegram.p043ui.Components.ImportingAlert;
import org.telegram.p043ui.Components.InstantCameraView;
import org.telegram.p043ui.Components.InviteMembersBottomSheet;
import org.telegram.p043ui.Components.JoinGroupAlert;
import org.telegram.p043ui.Components.LayoutHelper;
import org.telegram.p043ui.Components.LinkSpanDrawable;
import org.telegram.p043ui.Components.MediaActivity;
import org.telegram.p043ui.Components.MentionsContainerView;
import org.telegram.p043ui.Components.MessageBackgroundDrawable;
import org.telegram.p043ui.Components.MessagePreviewView;
import org.telegram.p043ui.Components.MotionBackgroundDrawable;
import org.telegram.p043ui.Components.NumberTextView;
import org.telegram.p043ui.Components.PhonebookShareAlert;
import org.telegram.p043ui.Components.PinnedLineView;
import org.telegram.p043ui.Components.PipRoundVideoView;
import org.telegram.p043ui.Components.PollVotesAlert;
import org.telegram.p043ui.Components.Premium.GiftPremiumBottomSheet;
import org.telegram.p043ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.p043ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.p043ui.Components.Premium.PremiumPreviewBottomSheet;
import org.telegram.p043ui.Components.Premium.boosts.BoostDialogs;
import org.telegram.p043ui.Components.Premium.boosts.GiftInfoBottomSheet;
import org.telegram.p043ui.Components.Premium.boosts.PremiumPreviewGiftLinkBottomSheet;
import org.telegram.p043ui.Components.RLottieDrawable;
import org.telegram.p043ui.Components.RLottieImageView;
import org.telegram.p043ui.Components.RadialProgressView;
import org.telegram.p043ui.Components.ReactedHeaderView;
import org.telegram.p043ui.Components.ReactedUsersListView;
import org.telegram.p043ui.Components.ReactionTabHolderView;
import org.telegram.p043ui.Components.Reactions.ChatSelectionReactionMenuOverlay;
import org.telegram.p043ui.Components.Reactions.ReactionsEffectOverlay;
import org.telegram.p043ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.p043ui.Components.ReactionsContainerLayout;
import org.telegram.p043ui.Components.RecyclerAnimationScrollHelper;
import org.telegram.p043ui.Components.RecyclerListView;
import org.telegram.p043ui.Components.ReportAlert;
import org.telegram.p043ui.Components.SearchCounterView;
import org.telegram.p043ui.Components.SearchTagsList;
import org.telegram.p043ui.Components.ShareAlert;
import org.telegram.p043ui.Components.SizeNotifierFrameLayout;
import org.telegram.p043ui.Components.SuggestEmojiView;
import org.telegram.p043ui.Components.TextSelectionHint;
import org.telegram.p043ui.Components.TextStyleSpan;
import org.telegram.p043ui.Components.ThanosEffect;
import org.telegram.p043ui.Components.ThemeEditorView;
import org.telegram.p043ui.Components.TranscribeButton;
import org.telegram.p043ui.Components.TranslateButton;
import org.telegram.p043ui.Components.TrendingStickersAlert;
import org.telegram.p043ui.Components.TypefaceSpan;
import org.telegram.p043ui.Components.URLSpanBotCommand;
import org.telegram.p043ui.Components.URLSpanReplacement;
import org.telegram.p043ui.Components.URLSpanUserMention;
import org.telegram.p043ui.Components.UndoView;
import org.telegram.p043ui.Components.UnreadCounterTextView;
import org.telegram.p043ui.Components.voip.VoIPHelper;
import org.telegram.p043ui.ContactAddActivity;
import org.telegram.p043ui.ContentPreviewViewer;
import org.telegram.p043ui.Delegates.ChatActivityMemberRequestsDelegate;
import org.telegram.p043ui.DialogsActivity;
import org.telegram.p043ui.GroupCreateActivity;
import org.telegram.p043ui.LocationActivity;
import org.telegram.p043ui.PhotoAlbumPickerActivity;
import org.telegram.p043ui.PhotoViewer;
import org.telegram.p043ui.PollCreateActivity;
import org.telegram.p043ui.Stories.StoriesListPlaceProvider;
import org.telegram.p043ui.Stories.StoryViewer;
import org.telegram.p043ui.Stories.recorder.HintView2;
import org.telegram.p043ui.Stories.recorder.PreviewView;
import org.telegram.p043ui.Stories.recorder.StoryEntry;
import org.telegram.p043ui.Stories.recorder.StoryRecorder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.ResultCallback;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$BotInlineResult;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatInvite;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputReplyTo;
import org.telegram.tgnet.TLRPC$InputStickerSet;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageExtendedMedia;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessagePeerReaction;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_attachMenuBot;
import org.telegram.tgnet.TLRPC$TL_attachMenuBotsBot;
import org.telegram.tgnet.TLRPC$TL_availableReaction;
import org.telegram.tgnet.TLRPC$TL_botCommand;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaAuto;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_clickSponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers;
import org.telegram.tgnet.TLRPC$TL_channels_viewSponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_contacts_acceptContact;
import org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_document;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatDiscarded;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_exportedMessageLink;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_groupCall;
import org.telegram.tgnet.TLRPC$TL_inlineBotSwitchPM;
import org.telegram.tgnet.TLRPC$TL_inlineBotWebView;
import org.telegram.tgnet.TLRPC$TL_inputBotAppShortName;
import org.telegram.tgnet.TLRPC$TL_inputMediaPoll;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_inputPhoto;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetShortName;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestPeer;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUpdateApp;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUserProfile;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionSetSameChatWallPaper;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEntityBold;
import org.telegram.tgnet.TLRPC$TL_messageEntityCode;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityItalic;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageEntityPre;
import org.telegram.tgnet.TLRPC$TL_messageEntitySpoiler;
import org.telegram.tgnet.TLRPC$TL_messageEntityStrike;
import org.telegram.tgnet.TLRPC$TL_messageEntityTextUrl;
import org.telegram.tgnet.TLRPC$TL_messageEntityUnderline;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveaway;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveawayResults;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messages_acceptUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_botApp;
import org.telegram.tgnet.TLRPC$TL_messages_discussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_editMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getAttachMenuBot;
import org.telegram.tgnet.TLRPC$TL_messages_getBotApp;
import org.telegram.tgnet.TLRPC$TL_messages_getDiscussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessageEditData;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_rateTranscribedAudio;
import org.telegram.tgnet.TLRPC$TL_messages_requestUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_sendScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_toggleBotInAttachMenu;
import org.telegram.tgnet.TLRPC$TL_payments_bankCardData;
import org.telegram.tgnet.TLRPC$TL_payments_paymentReceipt;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_poll;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_premiumGiftOption;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardForceReply;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultAccepted;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultDefault;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultRequest;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStory;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$WebPageAttribute;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.p042tl.TL_stories$StoryItem;
import org.telegram.tgnet.p042tl.TL_stories$TL_storyItem;
import p033j$.util.Comparator;
import p033j$.util.function.ToIntFunction;
/* renamed from: org.telegram.ui.ChatActivity */
/* loaded from: classes5.dex */
public class ChatActivity extends JavaMvpFragment implements ChatView, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate, ChatActivityInterface, FloatingDebugProvider, InstantCameraView.Delegate {
    private static boolean previewMode = false;
    public static Pattern privateMsgUrlPattern;
    public static Pattern publicMsgUrlPattern;
    private static ArrayList<ChatActivityTextSelectionHelper> textSelectionHelpersCache;
    public static Pattern voiceChatUrlPattern;
    private Paint actionBarBackgroundPaint;
    public SearchTagsList actionBarSearchTags;
    private ValueAnimator actionBarTagsAnimator;
    private float actionBarTagsT;
    private ActionBarMenuItem actionModeOptions;
    private ArrayList<View> actionModeViews;
    private long activityResumeTime;
    private ActionBarMenuItem.Item addContactItem;
    private TextView addToContactsButton;
    private boolean addToContactsButtonArchive;
    private ActionBarMenuItem.Item addToFolderItem;
    private boolean albumMode;
    private ActionBarMenuItem albumsItem;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private float alertViewEnterProgress;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond;
    public boolean allowExpandPreviewByClick;
    private boolean allowStickersPanel;
    private HashMap<MessageObject, Boolean> alreadyPlayedStickers;
    boolean animateProgressViewTo;
    private ArrayList<ChatMessageCell> animateSendingViews;
    private HashMap<TLRPC$Document, Integer> animatingDocuments;
    private ClippingImageView animatingImageView;
    public ArrayList<MessageObject> animatingMessageObjects;
    private boolean approved;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenu.LazyItem attachItem;
    private String attachMenuBotStartCommand;
    private String attachMenuBotToOpen;
    private ActionBarMenu.LazyItem audioCallIconItem;
    private ChatAvatarContainer avatarContainer;
    private ChatActivity backToPreviousFragment;
    private ChatBigEmptyView bigEmptyView;
    private BluredView blurredView;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private MessageObject botButtons;
    private PhotoViewer.PhotoViewerProvider botContextProvider;
    private ArrayList<Object> botContextResults;
    private LongSparseArray<TLRPC$BotInfo> botInfo;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private BlurredFrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private BlurredFrameLayout bottomOverlayChat;
    private UnreadCounterTextView bottomOverlayChatText;
    private boolean bottomOverlayChatWaitsReply;
    private ImageView bottomOverlayImage;
    private boolean bottomOverlayLinks;
    private LinkSpanDrawable.LinksTextView bottomOverlayLinksText;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayStartButton;
    private TextView bottomOverlayText;
    private float bottomPanelTranslationY;
    private float bottomPanelTranslationYReverse;
    Bulletin.Delegate bulletinDelegate;
    private boolean[] cacheEndReached;
    private int canCopyLinkMessagesCount;
    private int canEditMessagesCount;
    private int canForwardMessagesCount;
    private boolean canMoveDown;
    private boolean canMoveUp;
    private int canSaveDocumentsCount;
    private int canSaveMusicCount;
    private boolean canShowPagedownButton;
    private Runnable cancelFixedPositionRunnable;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    private int cantSaveMessagesCount;
    private ValueAnimator changeBoundAnimator;
    private ChatActivityDelegate chatActivityDelegate;
    private ChatActivityEnterTopView chatActivityEnterTopView;
    protected ChatActivityEnterView chatActivityEnterView;
    private boolean chatActivityEnterViewAnimateBeforeSending;
    private int chatActivityEnterViewAnimateFromTop;
    private ChatActivityAdapter chatAdapter;
    public ChatAttachAlert chatAttachAlert;
    private int chatEmojiViewPadding;
    private long chatEnterTime;
    protected TLRPC$ChatFull chatInfo;
    private TLRPC$ChatInvite chatInvite;
    private Runnable chatInviteRunnable;
    private long chatInviterId;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private ChatListItemAnimator chatListItemAnimator;
    private ThanosEffect chatListThanosEffect;
    private RecyclerListView chatListView;
    private boolean chatListViewAttached;
    public float chatListViewPaddingTop;
    public int chatListViewPaddingVisibleOffset;
    private ArrayList<ChatMessageCell> chatMessageCellsCache;
    private final ChatMessagesMetadataController chatMessagesMetadataController;
    private int chatMode;
    private ChatNotificationsPopupWrapper chatNotificationsPopupWrapper;
    private RecyclerAnimationScrollHelper chatScrollHelper;
    private final ChatScrollCallback chatScrollHelperCallback;
    private ChatThemeBottomSheet chatThemeBottomSheet;
    private boolean chatWasReset;
    private TextView chatWithAdminTextView;
    private Runnable checkPaddingsRunnable;
    private boolean checkTextureViewPosition;
    private Runnable checkTranslationRunnable;
    private boolean checkedSavedMessagesHint;
    private ChecksHintView checksHintView;
    private ActionBarMenuItem.Item clearHistoryItem;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private Runnable closeInstantCameraAnimation;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private ActionBarMenuItem.Item closeTopicItem;
    private boolean cloudMode;
    private int commentLoadingGuid;
    private int commentLoadingMessageId;
    private int commentMessagesLoadingGuid;
    private int commentMessagesRequestId;
    private int commentRequestId;
    private int contentPaddingTop;
    private float contentPanTranslation;
    private float contentPanTranslationT;
    ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate;
    public ChatActivityFragmentView contentView;
    private List<Integer> copyItems;
    private boolean createGroupCall;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC$Chat currentChat;
    protected TLRPC$EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    private int currentPinnedMessageId;
    private int[] currentPinnedMessageIndex;
    protected TLRPC$User currentUser;
    private int customScreenType;
    SparseIntArray dateObjectsStableIds;
    private Runnable delayedReadRunnable;
    private List<Integer> deleteItems;
    private Runnable destroyTextureViewRunnable;
    int dialogFilterId;
    int dialogFolderId;
    private DialogTranslationSettings dialogTranslationSettings;
    private DialogType dialogType;
    private long dialog_id;
    private Long dialog_id_Long;
    private int distanceToPeer;
    private ChatMessageCell drawLaterRoundProgressCell;
    public float drawingChatLisViewYoffset;
    private ChatMessageCell dummyMessageCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenu.LazyItem editTextItem;
    private int editTextStart;
    private MessageObject.GroupedMessages editingGroupedMessages;
    public MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    public EmojiAnimationsOverlay emojiAnimationsOverlay;
    private View emojiButtonRed;
    private HintView emojiHintTextView;
    private LinkSpanDrawable.LinksTextView emojiStatusSpamHint;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private boolean[] endReached;
    private long featureTemplatesChannelId;
    private int fieldPanelShown;
    private boolean filledEditTextItemMenu;
    private FireworksOverlay fireworksOverlay;
    private boolean first;
    private boolean firstLoading;
    private boolean firstMessagesLoaded;
    boolean firstOpen;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private int fixedKeyboardHeight;
    private FlagSecureReason flagSecure;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private float floatingDateViewOffset;
    private boolean forbidForwardingWithDismiss;
    public boolean forceDisallowApplyWallpeper;
    public boolean forceDisallowRedrawThemeDescriptions;
    private boolean forceHistoryEmpty;
    private int forceNextPinnedMessageId;
    private boolean forceScrollToFirst;
    private boolean forceScrollToTop;
    private FormattingMessagesWeb formattingMessagesWeb;
    private TLRPC$TL_forumTopic forumTopic;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private boolean[] forwardEndReached;
    private HintView forwardHintView;
    private List<Integer> forwardItems;
    private HintView forwardSettingsHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    private boolean forwardingOptionsWasAutoOpened;
    MessagePreviewView forwardingPreviewView;
    private ArrayList<CharSequence> foundUrls;
    public TLRPC$WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    public boolean fragmentOpened;
    private AnimatorSet fragmentTransition;
    private Runnable fragmentTransitionRunnable;
    private boolean fromPullingDownTransition;
    private HintView fwdRestrictedBottomHint;
    private HintView fwdRestrictedTopHint;
    private HintView gifHintTextView;
    private boolean globalIgnoreLayout;
    private ChatGreetingsView greetingsViewContainer;
    private ChatObject.Call groupCall;
    private ActionBarMenuSubItem groupMessagesItem;
    private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap;
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private int hideDateDelay;
    private boolean hideForwardEndReached;
    public int highlightMessageId;
    public String highlightMessageQuote;
    public int highlightMessageQuoteOffset;
    private MessageObject hintMessageObject;
    private int hintMessageType;
    private boolean historyPreloaded;
    private boolean ignoreAttachOnPause;
    private boolean ignoreChatStartMessagesLoading;
    private boolean ignoreDraft;
    private ChatActionCell infoTopView;
    private Animator infoTopViewAnimator;
    private int initialMessagesSize;
    private String inlineQueryForInput;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean invalidateChatListViewTopPadding;
    private boolean invalidateMessagesVisiblePart;
    private boolean isAuthorHiddenForce;
    private boolean isComments;
    private boolean isFirstOpenAttachWallet;
    private boolean isFullyVisible;
    private boolean isInMultipleFilesSending;
    public boolean isInsideContainer;
    private boolean isMultiPanelLocked;
    private boolean isMultiReplyMessage;
    private boolean isNeedAutoActivateBot;
    private boolean isNeedHideKeyboardOnOpenSearchUserMessages;
    private boolean isPauseOnThemePreview;
    private boolean isReplyAsMultiReply;
    public boolean isTopic;
    public boolean justCreatedChat;
    public boolean justCreatedTopic;
    private boolean keyboardWasVisible;
    private boolean lastCallCheckFromServer;
    private HashMap<String, TLRPC$WebPage> lastLinkPreviewResults;
    private int lastLoadIndex;
    private List<MultiPanelButton> lastMultiPanelButtons;
    private int lastSkeletonCount;
    private int lastSkeletonMessageCount;
    private float lastTouchY;
    private long lastTranslationCheck;
    private int last_message_id;
    private int linkSearchRequestId;
    private Boolean liteModeChat;
    private boolean livestream;
    private boolean loadInfo;
    private int loadedPinnedMessagesCount;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private SparseArray<Boolean> loadingPinnedMessages;
    private boolean loadingPinnedMessagesList;
    private int loadsCount;
    private boolean locationAlertShown;
    private int[] maxDate;
    private int[] maxMessageId;
    private int maxPinnedMessageId;
    private boolean maybeStartTrackingSlidingView;
    private HintView mediaBanTooltip;
    public MentionsContainerView mentionContainer;
    private AnimatorSet mentionListAnimation;
    private FrameLayout mentiondownButton;
    private ValueAnimator mentiondownButtonAnimation;
    private SimpleTextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private float mentionsButtonEnterProgress;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private ActionBarMenuSubItem menuDeleteItem;
    private SparseArray<ArrayList<Integer>> menuItemsGroups;
    private long mergeDialogId;
    private Animator messageEditTextAnimator;
    public MessageEnterTransitionContainer messageEnterTransitionContainer;
    public MessagePreviewParams messagePreviewParams;
    private Bulletin messageSeenPrivacyBulletin;
    private List<MessageSkeleton> messageSkeletons;
    public ArrayList<MessageObject> messages;
    private HashMap<String, ArrayList<MessageObject>> messagesByDays;
    private SparseArray<MessageObject>[] messagesDict;
    private MessagesSearchAdapter messagesSearchAdapter;
    private RecyclerListView messagesSearchListView;
    private AnimatorSet messagesSearchListViewAnimation;
    private int migrated_to;
    private int[] minDate;
    private int[] minMessageId;
    private AnimatorSet multiPanelAnimator;
    private MultiPanelScrollListener multiPanelScrollListener;
    private BlurredLinearLayout multiPanelView;
    private float multiPanelViewOffset;
    private ArrayList<Uri> multipleFilesSendingUris;
    private ActionBarMenuItem.Item muteItem;
    private ActionBarMenuItem.Item muteItemGap;
    private ImageView muteUnMuteMultiPanelSwitchButton;
    private MessageObject needAnimateToMessage;
    public boolean needEditHighlightMessage;
    public boolean needOpenKeyboardOnStart;
    private boolean needRemovePreviousSameChatActivity;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private boolean nextScrollForce;
    private int nextScrollForcePinnedMessageId;
    private int nextScrollFromMessageId;
    private int nextScrollLoadIndex;
    private boolean nextScrollSelect;
    private int nextScrollToMessageId;
    private HintView noSoundHintView;
    private ArrayList<MessageObject> notPushedSponsoredMessages;
    private Runnable onChatMessagesLoaded;
    RecyclerListView.OnItemClickListenerExtended onItemClickListener;
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener;
    public Runnable onThemeChange;
    private ActionBarMenuItem.Item openAlbumsInsteadCloud;
    public boolean openAnimationEnded;
    private long openAnimationStartTime;
    private boolean openImport;
    protected boolean openKeyboardOnAttachMenuClose;
    private boolean openSearchKeyboard;
    private View overlayView;
    private ValueAnimator pagedownAnimator;
    private FrameLayout pagedownButton;
    private ValueAnimator pagedownButtonAnimation;
    private ImageView pagedownButtonArrow;
    private CounterView pagedownButtonCounter;
    private float pagedownButtonEnterProgress;
    private ImageView pagedownButtonImage;
    private ImageView pagedownButtonLoading;
    private CircularProgressDrawable pagedownButtonLoadingDrawable;
    private boolean pagedownButtonShowedByScroll;
    private float pagedownLoadingT;
    private boolean paused;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private ChatActivityMemberRequestsDelegate pendingRequestsDelegate;
    private ArrayList<MessageObject> pendingSendMessages;
    private SparseArray<MessageObject> pendingSendMessagesDict;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider;
    private int pinBullerinTag;
    private Bulletin pinBulletin;
    private PinchToZoomHelper pinchToZoomHelper;
    private NumberTextView pinnedCounterTextView;
    private int pinnedCounterTextViewX;
    private boolean pinnedEndReached;
    private int pinnedImageCacheType;
    private boolean pinnedImageHasBlur;
    private TLRPC$PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC$PhotoSize pinnedImageThumbLocation;
    private PinnedLineView pinnedLineView;
    private AnimatorSet pinnedListAnimator;
    private ImageView pinnedListButton;
    private PinnedMessageButton[] pinnedMessageButton;
    private boolean pinnedMessageButtonShown;
    private float pinnedMessageEnterOffset;
    private ArrayList<Integer> pinnedMessageIds;
    private BackupImageView[] pinnedMessageImageView;
    private HashMap<Integer, MessageObject> pinnedMessageObjects;
    private SimpleTextView[] pinnedMessageTextView;
    private BlurredFrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private TrackingWidthSimpleTextView[] pinnedNameTextView;
    private AnimatorSet[] pinnedNextAnimation;
    private RadialProgressView pinnedProgress;
    private boolean pinnedProgressIsShowing;
    private ChatMessageCell pollHintCell;
    private HintView pollHintView;
    private int pollHintX;
    private int pollHintY;
    private LongSparseArray<ArrayList<MessageObject>> polls;
    private ArrayList<MessageObject> pollsToCheck;
    private NotificationCenter.PostponeNotificationCallback postponeNotificationsWhileLoadingCallback;
    private final DialogInterface.OnCancelListener postponedScrollCancelListener;
    private boolean postponedScrollIsCanceled;
    private int postponedScrollMessageId;
    private int postponedScrollMinMessageId;
    private int postponedScrollToLastMessageQueryIndex;
    private TLRPC$Document preloadedGreetingsSticker;
    private boolean premiumInvoiceBot;
    @InjectPresenter
    public ChatPresenter presenter;
    private int prevSetUnreadCount;
    private RadialProgressView progressBar;
    private AlertDialog progressDialog;
    private int progressDialogAtMessageId;
    private int progressDialogAtMessageType;
    private String progressDialogBotButtonUrl;
    private Browser.Progress progressDialogCurrent;
    private CharacterStyle progressDialogLinkSpan;
    private FrameLayout progressView;
    private View progressView2;
    private float pullingBottomOffset;
    private float pullingDownAnimateProgress;
    private ChatActivity pullingDownAnimateToActivity;
    private Animator pullingDownBackAnimator;
    private ChatPullingDownDrawable pullingDownDrawable;
    private float pullingDownOffset;
    private AlertDialog quoteMessageUpdateAlert;
    private ValueAnimator reactionsMentionButtonAnimation;
    private float reactionsMentionButtonEnterProgress;
    private int reactionsMentionCount;
    private FrameLayout reactionsMentiondownButton;
    private CounterView reactionsMentiondownButtonCounter;
    private ImageView reactionsMentiondownButtonImage;
    private RecentChatsDialogType recentChatsDialogType;
    private boolean removingFromParent;
    private SparseArray<MessageObject> repliesMessagesDict;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private boolean replyFromOnResume;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private boolean replyImageHasMediaSpoiler;
    private TLRPC$PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC$PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private int replyMaxReadId;
    private MessageObject replyMessageHeaderObject;
    private SparseArray<ArrayList<Integer>> replyMessageOwners;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectHintTextView;
    private SimpleTextView replyObjectTextView;
    private TLRPC$Chat replyOriginalChat;
    private int replyOriginalMessageId;
    private MessageObject replyingMessageObject;
    private ReplyQuote replyingQuote;
    private MessageObject.GroupedMessages replyingQuoteGroup;
    public MessageObject replyingTopMessage;
    private TextView reportSpamButton;
    private AnimatorSet reportSpamViewAnimator;
    private int reportType;
    private TextView restartTopicButton;
    private int returnToLoadIndex;
    private int returnToMessageId;
    public boolean reversed;
    private List<Integer> saveItems;
    private TLRPC$TL_messages_discussionMessage savedDiscussionMessage;
    private TLRPC$messages_Messages savedHistory;
    private HintView2 savedMessagesHint;
    private boolean savedMessagesHintShown;
    public String savedMultiReplyMessage;
    private boolean savedNoDiscussion;
    private boolean savedNoHistory;
    private TLRPC$Document savingDocument;
    private String savingFileCustomName;
    private MessageObject savingMessageObject;
    private HintView scheduledHint;
    private boolean scheduledHintShown;
    private int scheduledMessagesCount;
    private HintView scheduledOrNoSoundHint;
    private boolean scheduledOrNoSoundHintShown;
    private AnimatorSet scrimAnimatorSet;
    private Paint scrimPaint;
    private float scrimPaintAlpha;
    public ActionBarPopupWindow scrimPopupWindow;
    private boolean scrimPopupWindowHideDimOnDismiss;
    private ActionBarMenuSubItem[] scrimPopupWindowItems;
    private int scrimPopupX;
    private int scrimPopupY;
    private View scrimView;
    private float scrimViewAlpha;
    private ValueAnimator scrimViewAlphaAnimator;
    private String scrimViewReaction;
    private int scrollAnimationIndex;
    private boolean scrollByTouch;
    private int scrollCallbackAnimationIndex;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition;
    private int scrollToOffsetOnRecreate;
    private int scrollToPositionOnRecreate;
    private boolean scrollToThreadMessage;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private HintView searchAsListHint;
    private boolean searchAsListHintShown;
    private View searchAsListTogglerView;
    private ImageView searchCalendarButton;
    private BlurredFrameLayout searchContainer;
    private SearchCounterView searchCountText;
    private ImageView searchDownButton;
    private ValueAnimator searchExpandAnimator;
    private float searchExpandProgress;
    private ActionBarMenuItem searchIconItem;
    private ActionBarMenuItem searchItem;
    private SearchItemListener searchItemListener;
    private boolean searchItemVisible;
    private AnimatedTextView searchOtherButton;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private TLRPC$Chat searchingChatMessages;
    private boolean searchingForUser;
    private ReactionsLayoutInBubble.VisibleReaction searchingReaction;
    private TLRPC$User searchingUserMessages;
    private SecretVoicePlayer secretVoicePlayer;
    private ActionBarMenuItem.Item selectTopicItem;
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds;
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds;
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray<MessageObject>[] selectedMessagesIds;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private MessageObject selectedObjectToEditCaption;
    private ChatSelectionReactionMenuOverlay selectionReactionsOverlay;
    private TLRPC$TL_channels_sendAsPeers sendAsPeersObj;
    private boolean sentBotStart;
    private boolean setPinnedTextTranslationX;
    public int shareAlertDebugMode;
    public boolean shareAlertDebugTopicsSlowMotion;
    public ChatMessageSharedResources sharedResources;
    private boolean showAudioCallAsIcon;
    private boolean showCloseChatDialogLater;
    public boolean showNoQuoteAlert;
    private boolean showPinBulletin;
    private final Runnable showScheduledHintRunnable;
    private final Runnable showScheduledOrNoSoundRunnable;
    private boolean showScrollToMessageError;
    private boolean showSearchAsIcon;
    private boolean shownRestartTopic;
    private boolean shownTranslateTopic;
    private Theme.MessageDrawable.PathDrawParams skeletonBackgroundCacheParams;
    private Theme.MessageDrawable skeletonBackgroundDrawable;
    private int skeletonColor0;
    private int skeletonColor1;
    private ColorMatrix skeletonColorMatrix;
    private LinearGradient skeletonGradient;
    private int skeletonGradientWidth;
    private long skeletonLastUpdateTime;
    private Matrix skeletonMatrix;
    private LinearGradient skeletonOutlineGradient;
    private Matrix skeletonOutlineMatrix;
    private Paint skeletonOutlinePaint;
    private Paint skeletonPaint;
    private Paint skeletonServicePaint;
    private int skeletonTotalTranslation;
    private ChatMessageCell slidingView;
    private HintView slowModeHint;
    private boolean sponsoredMessagesAdded;
    private int sponsoredMessagesPostsBetween;
    private int startFromVideoMessageId;
    private int startFromVideoTimestamp;
    private int startLoadFromDate;
    private int startLoadFromMessageId;
    private int startLoadFromMessageOffset;
    private long startMessageAppearTransitionMs;
    private String startVideoEdit;
    private boolean startedTrackingSlidingView;
    private ImageView stopRestartBotMultiPanelSwitchButton;
    private SuggestEmojiView suggestEmojiPanel;
    private boolean swipeBackEnabled;
    private boolean switchFromTopics;
    private boolean switchingFromTopics;
    private float switchingFromTopicsProgress;
    private MessagePreviewParams templatePreviewMessagesParams;
    private final BotCommandsMenuView.BotCommandsAdapter.TemplatesDelegate templatesDelegate;
    private ChatActivityTextSelectionHelper textSelectionHelper;
    private TextSelectionHint textSelectionHint;
    private boolean textSelectionHintWasShowed;
    public ThemeDelegate themeDelegate;
    private int threadMaxInboxReadId;
    private int threadMaxOutboxReadId;
    private boolean threadMessageAdded;
    private long threadMessageId;
    private MessageObject threadMessageObject;
    private ArrayList<MessageObject> threadMessageObjects;
    private boolean threadMessageVisible;
    private int threadUnreadMessagesCount;
    private ActionBarMenuItem.Item timeItem2;
    private HintView timerHintView;
    private boolean toPullingDownTransition;
    private BlurredFrameLayout topChatPanelView;
    private float topChatPanelViewOffset;
    private UndoView topUndoView;
    private float topViewOffset;
    private View topViewSeparator1;
    private View topViewSeparator2;
    private View topViewSeparator3;
    private int topViewWasVisible;
    private MessageObject topicStarterMessageObject;
    private int totalPinnedMessagesCount;
    private int transitionAnimationGlobalIndex;
    private int transitionAnimationIndex;
    private TranslateButton translateButton;
    private ActionBarMenuItem.Item translateItem;
    private UndoView undoView;
    private ActionBarMenuSubItem ungroupMessagesItem;
    private MessageObject unreadMessageObject;
    private Runnable unselectRunnable;
    private Runnable updateDeleteItemRunnable;
    Runnable updatePinnedProgressRunnable;
    Runnable updateReactionRunnable;
    private boolean userBlocked;
    protected TLRPC$UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private ActionBarMenuItem.Item viewAsTopics;
    private String voiceChatHash;
    private HintView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private boolean waitingForGetDifference;
    private ArrayList<Integer> waitingForLoad;
    private SparseArray<MessageObject> waitingForReplies;
    private boolean waitingForReplyMessageLoad;
    private boolean waitingForSendingMessageLoad;
    int waitingForWebpageId;
    private final Lazy<WalletFlowCoordinator> walletFlowCoordinator;
    private boolean wasManualScroll;
    private boolean wasPaused;
    TextView webBotTitle;
    private static final int[] observers = {NotificationCenter.botAnswerChosen, NotificationCenter.botContextMenu, NotificationCenter.botsListChanged, NotificationCenter.botSettingsChanged, NotificationCenter.multiPanelSettingsChanged, NotificationCenter.dialogsNeedReload, NotificationCenter.combineMessagesSettingsDidChanged, NotificationCenter.featuredEmojiDidLoad};
    private static int SKELETON_LIGHT_OVERLAY_ALPHA = 22;
    private static float SKELETON_SATURATION = 1.4f;
    private static int lastStableId = 10;
    private static final int[] allowedNotificationsDuringChatListAnimations = {NotificationCenter.messagesRead, NotificationCenter.threadMessagesRead, NotificationCenter.commentsRead, NotificationCenter.messagesReadEncrypted, NotificationCenter.messagesReadContent, NotificationCenter.didLoadPinnedMessages, NotificationCenter.newDraftReceived, NotificationCenter.updateMentionsCount, NotificationCenter.didUpdateConnectionState, NotificationCenter.updateDefaultSendAsPeer, NotificationCenter.closeChats, NotificationCenter.chatInfoCantLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.pinnedInfoDidLoad, NotificationCenter.didSetNewWallpapper, NotificationCenter.didApplyNewTheme};
    private static boolean replacingChatActivity = false;

    /* renamed from: org.telegram.ui.ChatActivity$ChatActivityDelegate */
    /* loaded from: classes5.dex */
    public interface ChatActivityDelegate {

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityDelegate$-CC  reason: invalid class name */
        /* loaded from: classes5.dex */
        public final /* synthetic */ class CC {
            public static void $default$onForwardingMessagesChanged(ChatActivityDelegate chatActivityDelegate, ArrayList arrayList) {
            }

            public static void $default$onReport(ChatActivityDelegate chatActivityDelegate) {
            }

            public static void $default$onUnpin(ChatActivityDelegate chatActivityDelegate, boolean z, boolean z2, boolean z3, ChatActivity chatActivity, ArrayList arrayList, HashMap hashMap) {
            }

            public static void $default$openReplyMessage(ChatActivityDelegate chatActivityDelegate, int i) {
            }

            public static void $default$openSearch(ChatActivityDelegate chatActivityDelegate, String str) {
            }

            public static void $default$setFieldText(ChatActivityDelegate chatActivityDelegate, CharSequence charSequence) {
            }
        }

        void onForwardingMessagesChanged(ArrayList<MessageObject> arrayList);

        void onReport();

        void onUnpin(boolean z, boolean z2, boolean z3, ChatActivity chatActivity, ArrayList<Integer> arrayList, HashMap<Integer, MessageObject> hashMap);

        void openReplyMessage(int i);

        void openSearch(String str);

        void setFieldText(CharSequence charSequence);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createActionMode$102(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createEmptyView$279(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createView$78(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markSponsoredAsRead$347(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processBinancePayRequest$6() {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$showChatThemeBottomSheet$353(MotionEvent motionEvent) {
        return true;
    }

    @Override // org.telegram.p043ui.Components.InstantCameraView.Delegate
    public ChatActivity getChatActivity() {
        return this;
    }

    @Override // org.telegram.p043ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public /* synthetic */ void startMusicSelectActivity() {
        ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate.CC.$default$startMusicSelectActivity(this);
    }

    static /* synthetic */ float access$16816(ChatActivity chatActivity, float f) {
        float f2 = chatActivity.pullingDownOffset + f;
        chatActivity.pullingDownOffset = f2;
        return f2;
    }

    static /* synthetic */ int access$19516(ChatActivity chatActivity, float f) {
        int i = (int) (chatActivity.skeletonTotalTranslation + f);
        chatActivity.skeletonTotalTranslation = i;
        return i;
    }

    static /* synthetic */ int access$24210(ChatActivity chatActivity) {
        int i = chatActivity.newMentionsCount;
        chatActivity.newMentionsCount = i - 1;
        return i;
    }

    static /* synthetic */ int access$31804(ChatActivity chatActivity) {
        int i = chatActivity.pinBullerinTag + 1;
        chatActivity.pinBullerinTag = i;
        return i;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void access$48100(ChatActivity chatActivity) {
        chatActivity.resetProgressDialogLoading();
    }

    static /* synthetic */ int access$51908() {
        int i = lastStableId;
        lastStableId = i + 1;
        return i;
    }

    static /* synthetic */ int access$5308(ChatActivity chatActivity) {
        int i = chatActivity.scheduledMessagesCount;
        chatActivity.scheduledMessagesCount = i + 1;
        return i;
    }

    static /* synthetic */ int access$5312(ChatActivity chatActivity, int i) {
        int i2 = chatActivity.scheduledMessagesCount + i;
        chatActivity.scheduledMessagesCount = i2;
        return i2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ ParametersHolder lambda$providePresenter$0() {
        return ParametersHolderKt.parametersOf(this.currentChat);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @ProvidePresenter
    public ChatPresenter providePresenter() {
        return (ChatPresenter) KoinJavaComponent.get(ChatPresenter.class, null, new Function0() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda303
            @Override // kotlin.jvm.functions.Function0
            public final Object invoke() {
                ParametersHolder lambda$providePresenter$0;
                lambda$providePresenter$0 = ChatActivity.this.lambda$providePresenter$0();
                return lambda$providePresenter$0;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$1 */
    /* loaded from: classes5.dex */
    public class C41961 implements BotCommandsMenuView.BotCommandsAdapter.TemplatesDelegate {
        C41961() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressOpenTemplates$0(boolean z) {
            ChatActivity.this.openTemplatesChannel(z);
        }

        @Override // org.telegram.p043ui.Components.BotCommandsMenuView.BotCommandsAdapter.TemplatesDelegate
        public void didPressOpenTemplates(final boolean z) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$1$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C41961.this.lambda$didPressOpenTemplates$0(z);
                }
            }, getCloseDelay(false));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressGoToMessage$1(int i) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.presentFragment(ChatActivity.newInstanceForDialogId(-TemplatesController.getInstance(((BaseFragment) chatActivity).currentAccount).getTemplatesChannelId(), i));
        }

        @Override // org.telegram.p043ui.Components.BotCommandsMenuView.BotCommandsAdapter.TemplatesDelegate
        public void didPressGoToMessage(final int i) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$1$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C41961.this.lambda$didPressGoToMessage$1(i);
                }
            }, getCloseDelay(false));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressSendMessage$2(TemplateModel templateModel, boolean z) {
            ChatActivity.this.sendTemplate(templateModel, z);
        }

        @Override // org.telegram.p043ui.Components.BotCommandsMenuView.BotCommandsAdapter.TemplatesDelegate
        public void didPressSendMessage(final TemplateModel templateModel, final boolean z) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$1$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C41961.this.lambda$didPressSendMessage$2(templateModel, z);
                }
            }, getCloseDelay(!z));
        }

        private long getCloseDelay(boolean z) {
            ChatActivityEnterView chatActivityEnterView;
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null && chatAttachAlert.isShowing()) {
                ChatActivity.this.chatAttachAlert.dismiss();
                return 500L;
            } else if (z && (chatActivityEnterView = ChatActivity.this.chatActivityEnterView) != null && chatActivityEnterView.botCommandsMenuIsShowing()) {
                ChatActivity.this.chatActivityEnterView.hideBotCommands();
                return 200L;
            } else {
                return 0L;
            }
        }
    }

    public static ChatActivity newInstanceForDialogId(long j) {
        return newInstanceForDialogId(j, 0);
    }

    public static ChatActivity newInstanceForDialogId(long j, int i) {
        return newInstanceForDialogId(j, i, new Bundle());
    }

    public static ChatActivity newInstanceForDialogId(long j, int i, Bundle bundle) {
        TLRPC$Chat chat;
        if (DialogObject.isEncryptedDialog(j)) {
            bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j));
        } else if (DialogObject.isUserDialog(j)) {
            bundle.putLong("user_id", j);
        } else {
            if (i != 0 && (chat = MessagesController.getInstance(UserConfig.selectedAccount).getChat(Long.valueOf(-j))) != null && chat.migrated_to != null) {
                bundle.putLong("migrated_to", j);
                j = -chat.migrated_to.channel_id;
            }
            bundle.putLong("chat_id", -j);
        }
        if (i != 0) {
            bundle.putInt("message_id", i);
        }
        ChatActivity chatActivity = new ChatActivity(bundle);
        if (i != 0) {
            chatActivity.setHighlightMessageId(i);
        }
        return chatActivity;
    }

    public static ChatActivity newInstanceInCloudMode() {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", UserConfig.getInstance(UserConfig.selectedAccount).clientUserId);
        return new ChatActivity(bundle);
    }

    public static ChatActivity newInstanceInForwardingEditor(final long j, final MessagePreviewParams messagePreviewParams, final Callbacks$Callback1<MessagePreviewParams> callbacks$Callback1) {
        Bundle bundle = new Bundle();
        bundle.putInt("custom_screen_type", IdFabric$CustomType.CHAT_FORWARDING_EDITOR);
        bundle.putInt("chatMode", 2);
        bundle.putLong("user_id", UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId());
        ChatActivity chatActivity = new ChatActivity(bundle);
        ArrayList<Integer> arrayList = new ArrayList<>();
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<MessageObject> copyForForwardingEditor = messagePreviewParams.forwardMessages.copyForForwardingEditor();
        Collections.reverse(copyForForwardingEditor);
        Iterator<MessageObject> it = copyForForwardingEditor.iterator();
        while (it.hasNext()) {
            MessageObject next = it.next();
            if (next != null) {
                arrayList.add(Integer.valueOf(next.getId()));
                hashMap.put(Integer.valueOf(next.getId()), next);
            }
        }
        chatActivity.setPinnedMessageIds(arrayList);
        chatActivity.setPinnedMessageObjects(hashMap);
        chatActivity.setChatActivityDelegate(new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.2
            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onReport() {
                ChatActivityDelegate.CC.$default$onReport(this);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2, boolean z3, ChatActivity chatActivity2, ArrayList arrayList2, HashMap hashMap2) {
                ChatActivityDelegate.CC.$default$onUnpin(this, z, z2, z3, chatActivity2, arrayList2, hashMap2);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openReplyMessage(int i) {
                ChatActivityDelegate.CC.$default$openReplyMessage(this, i);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openSearch(String str) {
                ChatActivityDelegate.CC.$default$openSearch(this, str);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void setFieldText(CharSequence charSequence) {
                ChatActivityDelegate.CC.$default$setFieldText(this, charSequence);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public void onForwardingMessagesChanged(ArrayList<MessageObject> arrayList2) {
                MessagePreviewParams messagePreviewParams2 = MessagePreviewParams.this;
                MessagePreviewParams messagePreviewParams3 = new MessagePreviewParams(messagePreviewParams2.isSecret, messagePreviewParams2.noforwards);
                messagePreviewParams3.updateForward(arrayList2, j);
                messagePreviewParams3.hideForwardSendersName = true;
                messagePreviewParams3.isAuthorHiddenForce = true;
                callbacks$Callback1.invoke(messagePreviewParams3);
            }
        });
        return chatActivity;
    }

    public static int getWidePostWidth(int i, boolean z) {
        int i2 = AndroidUtilities.displaySize.x;
        if (previewMode) {
            i2 -= AndroidUtilities.m107dp(16);
        }
        int i3 = i2 - i;
        return z ? i3 - AndroidUtilities.m107dp(52) : i3;
    }

    public void updateTitleIconsPublic() {
        updateTitleIcons();
    }

    public void setPinnedMessageObjects(HashMap<Integer, MessageObject> hashMap) {
        this.pinnedMessageObjects = hashMap;
    }

    public void setPinnedMessageIds(ArrayList<Integer> arrayList) {
        this.pinnedMessageIds = arrayList;
    }

    public void sendTemplate(TemplateModel templateModel, boolean z) {
        AlertDialog alertDialog = this.progressDialog;
        if (alertDialog == null || !alertDialog.isShowing()) {
            MessagePreviewView messagePreviewView = this.forwardingPreviewView;
            if ((messagePreviewView == null || !messagePreviewView.isShowing()) && getParentActivity() != null) {
                AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
                this.progressDialog = alertDialog2;
                alertDialog2.show();
                ArrayList<MessageObject> loadPinnedMessages = getMediaDataController().loadPinnedMessages(-getTemplatesController().getTemplatesChannelId(), getTemplatesController().getTemplatesChannelId(), new ArrayList<>(getTemplatesController().getTemplateMessageIds((int) templateModel.getMessageId())), false, true, true);
                AlertDialog alertDialog3 = this.progressDialog;
                if (alertDialog3 != null) {
                    alertDialog3.dismiss();
                }
                if (loadPinnedMessages == null || loadPinnedMessages.isEmpty()) {
                    return;
                }
                if (z) {
                    MessagePreviewParams messagePreviewParams = new MessagePreviewParams(isSecretChat(), getMessagesController().isChatNoForwards(this.currentChat));
                    this.templatePreviewMessagesParams = messagePreviewParams;
                    messagePreviewParams.updateForward(loadPinnedMessages, this.dialog_id);
                    this.templatePreviewMessagesParams.enableTemplatePreviewMode(templateModel);
                    openForwardingPreview(1, true);
                    return;
                }
                forwardMessages(loadPinnedMessages, true, false, true, 0, null, this.replyingMessageObject);
                getTemplatesController().incrementUsageRating(loadPinnedMessages);
            }
        }
    }

    public boolean isAllowCombineMessages() {
        DialogType dialogType;
        TLRPC$User tLRPC$User;
        return (this.switchFromTopics || this.cloudMode || ((dialogType = this.dialogType) != DialogType.GROUP && dialogType != DialogType.CHAT) || isSecretChat() || isInScheduleMode() || ((tLRPC$User = this.currentUser) != null && !UserObject.isLive(tLRPC$User))) ? false : true;
    }

    public int getCombineMessagesTimeLeft(boolean z) {
        MessageObject messageObject;
        if (isAllowCombineMessages() && SharedConfig.isCombineMessagesEnabled && !this.messages.isEmpty() && (messageObject = this.messages.get(0)) != null) {
            return messageObject.getCombineTimeLeft();
        }
        return 0;
    }

    public void combineMessages(CharSequence charSequence) {
        MessageObject messageObject;
        ArrayList<TLRPC$MessageEntity> arrayList;
        if (this.messages.isEmpty() || (messageObject = this.messages.get(0)) == null || messageObject.messageOwner == null) {
            return;
        }
        SentMessageFont selectedSentMessageFont = getToolsController().getSelectedSentMessageFont();
        CharSequence[] charSequenceArr = {AndroidUtilities.getTrimmedString(new SpannableStringBuilder().append(messageObject.messageText).append((CharSequence) "\n").append(charSequence))};
        messageObject.editingMessage = charSequenceArr[0];
        ArrayList<TLRPC$MessageEntity> entities = getMediaDataController().getEntities(charSequenceArr, true);
        messageObject.editingMessageEntities = entities;
        if (selectedSentMessageFont != SentMessageFont.REGULAR && entities.size() == 1 && selectedSentMessageFont.getClazz().isInstance(messageObject.editingMessageEntities.get(0)) && (arrayList = messageObject.messageOwner.entities) != null && arrayList.size() == 1 && messageObject.messageOwner.entities.get(0).length == messageObject.messageText.length()) {
            messageObject.editingMessageEntities.get(0).length = messageObject.editingMessage.length();
        }
        getSendMessagesHelper().editMessage(messageObject, null, null, null, null, null, false, false, null);
    }

    public void openTemplatesChannel(boolean z) {
        long templatesChannelId = getTemplatesController().getTemplatesChannelId();
        if (templatesChannelId != -1 && getTemplatesController().checkValidTemplatesChat(templatesChannelId)) {
            ChatActivity newInstanceForDialogId = newInstanceForDialogId(-templatesChannelId, 0);
            newInstanceForDialogId.needOpenKeyboardOnStart = z;
            presentFragment(newInstanceForDialogId);
        } else if (z) {
            getTemplatesController().setTemplatesChannelId(-1L);
            getTemplatesController().saveConfig();
            final int createChat = getMessagesController().createChat(LocaleController.getInternalString(C3632R.string.chat_templates), new ArrayList<>(), null, 2, false, null, null, 0, this, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda145
                @Override // com.iMe.fork.utils.Callbacks$Callback1
                public final void invoke(Object obj) {
                    ChatActivity.this.lambda$openTemplatesChannel$1((Long) obj);
                }
            });
            AlertDialog alertDialog = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog;
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda25
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$openTemplatesChannel$2(createChat, dialogInterface);
                }
            });
            this.progressDialog.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openTemplatesChannel$1(Long l) {
        AlertDialog alertDialog = this.progressDialog;
        if (alertDialog != null) {
            alertDialog.dismiss();
        }
        if (l.longValue() != -1) {
            this.featureTemplatesChannelId = -l.longValue();
            checkTemplatesChannelCreated();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openTemplatesChannel$2(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void showChooseTemplatesModeDialog() {
        showDialog(AlertsCreator.createChooseTemplatesModeDialog(getParentActivity(), getUndoView()), new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda56
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showChooseTemplatesModeDialog$3(dialogInterface);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showChooseTemplatesModeDialog$3(DialogInterface dialogInterface) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setBotInfo(this.botInfo);
        }
    }

    public void setChatActivityDelegate(ChatActivityDelegate chatActivityDelegate) {
        this.chatActivityDelegate = chatActivityDelegate;
    }

    public TranslateAlert createTranslateIncomingDialog(String str, final MessageObject messageObject, final Callbacks$Callback callbacks$Callback) {
        return TranslateAlert.createInstanceForForkTranslation(this, new TranslationArgs(TranslationDialogType.INCOMING, str, this.dialogTranslationSettings), new TranslateAlert.TranslatorActionsDelegate() { // from class: org.telegram.ui.ChatActivity.3
            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public /* synthetic */ void pasteResult(String str2) {
                TranslateAlert.TranslatorActionsDelegate.CC.$default$pasteResult(this, str2);
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public void openSettings() {
                Callbacks$Callback callbacks$Callback2 = callbacks$Callback;
                if (callbacks$Callback2 != null) {
                    callbacks$Callback2.invoke();
                }
                ChatActivity.this.showLanguageSettingsDialog();
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public boolean hasReplyingMessage() {
                return messageObject != null;
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public void replyMessage(String str2) {
                ChatActivity.this.showFieldPanelForReply(messageObject);
                if (ChatActivity.this.chatActivityDelegate != null) {
                    ChatActivity.this.finishFragment();
                    ChatActivity.this.chatActivityDelegate.setFieldText(str2);
                    return;
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.setFieldText(str2);
                }
            }
        }, getMessagesController().isChatNoForwards(this.currentChat));
    }

    public TranslateAlert createTranslateOutgoingDialog(String str, final Callbacks$Callback1<String> callbacks$Callback1) {
        return TranslateAlert.createInstanceForForkTranslation(this, new TranslationArgs(TranslationDialogType.OUTGOING, str, this.dialogTranslationSettings), new TranslateAlert.TranslatorActionsDelegate() { // from class: org.telegram.ui.ChatActivity.4
            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public /* synthetic */ boolean hasReplyingMessage() {
                return TranslateAlert.TranslatorActionsDelegate.CC.$default$hasReplyingMessage(this);
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public /* synthetic */ void replyMessage(String str2) {
                TranslateAlert.TranslatorActionsDelegate.CC.$default$replyMessage(this, str2);
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public void openSettings() {
                ChatActivity.this.showLanguageSettingsDialog();
            }

            @Override // com.iMe.fork.p023ui.dialog.TranslateAlert.TranslatorActionsDelegate
            public void pasteResult(String str2) {
                callbacks$Callback1.invoke(str2);
            }
        }, getMessagesController().isChatNoForwards(this.currentChat));
    }

    public boolean isNeedToShowWallet() {
        return this.chatMode == 0 && !this.cloudMode && this.dialogType == DialogType.CHAT && !MessagesController.isSupportUser(this.currentUser);
    }

    public DialogType getDialogType() {
        return this.dialogType;
    }

    public boolean isInAlbumMode() {
        return this.albumMode;
    }

    public void openAttachWallet() {
        AnalyticsManager.trackEvent(new AnalyticsEvent.OpenWalletScreen(AnalyticsEvent.OpenWalletScreen.sourceProfileFab));
        WalletHelper.safeRunWithActivationCheck(this, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda159
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$openAttachWallet$5();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachWallet$5() {
        WalletHelper.runWithCheckIsCryptoWalletCreated(this, null, null, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda158
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$openAttachWallet$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachWallet$4() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.setEditingMessageObject(null);
        }
        openAttachMenu(IdFabric$CustomType.CHAT_ATTACH_ALERT_WALLET, null);
    }

    public void processWalletDynamicLink(String str, TLRPC$Chat tLRPC$Chat) {
        ChatPresenter chatPresenter = this.presenter;
        if (chatPresenter != null) {
            chatPresenter.startWalletDynamicLinkFlow(new AndroidActivityHolder(getParentActivity()), str, tLRPC$Chat);
        }
    }

    public void processBinancePayRequest(final TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        WalletHelper.safeRunWithActivationCheck(this, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda163
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$processBinancePayRequest$8(tLRPC$KeyboardButton);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processBinancePayRequest$8(final TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        BinancePayHelper.runWithCheckIsBinancePayActivated(this, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda164
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.lambda$processBinancePayRequest$6();
            }
        }, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda162
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$processBinancePayRequest$7(tLRPC$KeyboardButton);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processBinancePayRequest$7(TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        ChatPresenter chatPresenter = this.presenter;
        if (chatPresenter != null) {
            chatPresenter.startBinancePayFlow(new AndroidActivityHolder(getParentActivity()), tLRPC$KeyboardButton.url);
        }
    }

    public boolean isAllowTemplates(boolean z) {
        if ((z && getDialogType() == DialogType.BOT) || isTemplatesChannel(false, false) || this.chatMode != 0) {
            return false;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        return tLRPC$User == null || !(!UserObject.isLive(tLRPC$User) || this.cloudMode || this.albumMode);
    }

    public boolean isForwardingEditor() {
        return this.customScreenType == IdFabric$CustomType.CHAT_FORWARDING_EDITOR;
    }

    public boolean isCloud() {
        return this.cloudMode;
    }

    public boolean isInMultipleFilesSending() {
        return this.isInMultipleFilesSending;
    }

    public ArrayList<Uri> getMultipleFilesSendingUris() {
        return this.multipleFilesSendingUris;
    }

    public void resetMultipleFilesSendingMode(boolean z) {
        if (this.isInMultipleFilesSending) {
            this.multipleFilesSendingUris.clear();
            this.isInMultipleFilesSending = false;
            if (z) {
                hideFieldPanel(true);
            }
        }
    }

    public void onManualAuthButtonClick(MessageObject messageObject) {
        Activity parentActivity = getParentActivity();
        if (parentActivity instanceof LaunchActivity) {
            WalletHelper.showManualAuthDialog((LaunchActivity) parentActivity, messageObject, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda161
                @Override // com.iMe.fork.utils.Callbacks$Callback
                public final void invoke() {
                    ChatActivity.this.lambda$onManualAuthButtonClick$10();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onManualAuthButtonClick$10() {
        WalletHelper.safeRunWalletScreen(this, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda165
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.lambda$onManualAuthButtonClick$9();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$onManualAuthButtonClick$9() {
        ContextExtKt.toast(LocaleController.getInternalString(C3632R.string.auth_success));
    }

    @Override // org.telegram.p043ui.Components.InstantCameraView.Delegate
    public boolean isTemplatesChannel(boolean z, boolean z2) {
        return ChatObject.isTemplatesChat(this.currentAccount, -this.dialog_id) && (!z || this.chatMode == 0) && (!z2 || this.forwardingPreviewView == null);
    }

    @Override // com.iMe.p030ui.chat.ChatView
    public void showCryptoBoxInfo(CryptoBoxInfo cryptoBoxInfo, TLRPC$Chat tLRPC$Chat) {
        showDialog(CryptoBoxConditionsBottomSheetDialog.newInstance(this, cryptoBoxInfo, tLRPC$Chat));
    }

    @Override // com.iMe.p030ui.chat.ChatView
    public void onLanguagesLoaded(List<TranslationLanguageUiModel> list) {
        showDialog(new ChatLanguageSettingsBottomSheet(this, list, this.dialogTranslationSettings, new Callbacks$Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda153
            @Override // com.iMe.fork.utils.Callbacks$Callback2
            public final void invoke(Object obj, Object obj2) {
                ChatActivity.this.lambda$onLanguagesLoaded$11((DialogTranslationSettings) obj, (Boolean) obj2);
            }
        }));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onLanguagesLoaded$11(DialogTranslationSettings dialogTranslationSettings, Boolean bool) {
        MessageObject messageObject;
        if (bool.booleanValue()) {
            getMessagesController().getTranslateController().setHideTranslateDialog(getDialogId(), false, true);
            if (!getMessagesController().getTranslateController().toggleTranslatingDialog(getDialogId(), true)) {
                updateTopPanel(true);
            }
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setShowTranslateButton(dialogTranslationSettings.isOutTextTranslateEnabled());
        }
        if (this.chatListView != null && this.dialogTranslationSettings.isInTextTranslateEnabled() != dialogTranslationSettings.isInTextTranslateEnabled()) {
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = ((ChatMessageCell) childAt).getMessageObject()) != null) {
                    messageObject.forceUpdate = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged();
        }
        getDialogTranslationSettingsController().setSettings(dialogTranslationSettings, true);
        this.dialogTranslationSettings = dialogTranslationSettings;
    }

    @Override // com.iMe.p030ui.chat.ChatView
    public void onVoiceToTextCompleted(MessageObject messageObject, String str) {
        TranscribeButton.finishTranscription(messageObject, 0L, str, true);
    }

    @Override // com.iMe.p030ui.base.mvp.AppUpdateRequiredView
    public void showAppUpdateDialog() {
        showDialog(DialogsFactoryKt.createUpdateAppDialog(this));
    }

    @Override // com.iMe.p030ui.chat.ChatView
    public void onMultiReplyMessageBuilt(CharSequence charSequence) {
        this.isMultiReplyMessage = true;
        this.savedMultiReplyMessage = charSequence.toString();
        this.chatActivityEnterView.setFieldText(charSequence);
    }

    @Override // com.iMe.p030ui.chat.ChatView
    public void showReactionActivationAlert() {
        ReactionHelper.showReactionActivationAlert(this);
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public LockedSection getLockedSection() {
        if (this.cloudMode) {
            return LockedSection.CLOUD;
        }
        return super.getLockedSection();
    }

    @Override // com.iMe.manager.crypto.pay.BinancePayProcessView
    public void showConfirmPaymentDialog(DialogModel dialogModel, Callbacks$Callback callbacks$Callback) {
        showDialog(DialogUtils.createDialog(getParentActivity(), dialogModel, callbacks$Callback, null));
    }

    @Override // com.iMe.manager.crypto.pay.BinancePayProcessView
    public void showSuccessPaymentProcessedDialog(String str, String str2, String str3) {
        DialogsFactoryKt.showSuccessAlert(this, str, str2, str3, null);
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean isAllowPinnedPlayer() {
        return this.chatMode == 0;
    }

    private void openForwardingPreview(int i) {
        openForwardingPreview(i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openAttachMenu() {
        openAttachMenu(0, null);
    }

    private void searchUserMessages(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        searchUserMessages(tLRPC$User, tLRPC$Chat, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showSelectTopicAlert() {
        showDialog(new TopicsAlert(this, Collections.singletonList(Long.valueOf(this.dialog_id)), new Callbacks$Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda154
            @Override // com.iMe.fork.utils.Callbacks$Callback2
            public final void invoke(Object obj, Object obj2) {
                ChatActivity.this.lambda$showSelectTopicAlert$12((Boolean) obj, (TopicModel) obj2);
            }
        }));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSelectTopicAlert$12(Boolean bool, TopicModel topicModel) {
        if (getParentActivity() == null) {
            return;
        }
        getUndoView().showWithAction(this.dialog_id, bool.booleanValue() ? 20 : 21, (Object) 1, (Object) topicModel, (Runnable) null, (Runnable) null);
    }

    private boolean isMultiPanelAnimating() {
        return this.multiPanelViewOffset > ((float) (-AndroidUtilities.m107dp(44))) && this.multiPanelViewOffset < BitmapDescriptorFactory.HUE_RED;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public TranslateAlert createTranslateIncomingDialog(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        return createTranslateIncomingDialog(getMessageCaptionSafe(messageObject, groupedMessages), messageObject, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public String getMessageCaptionSafe(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        CharSequence messageContent;
        if (messageObject.type == 17) {
            messageContent = extractPollTexts((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media);
        } else {
            CharSequence messageCaption = getMessageCaption(messageObject, groupedMessages);
            messageContent = messageCaption == null ? getMessageContent(messageObject, 0L, false) : messageCaption;
        }
        return messageContent.toString();
    }

    private CharSequence extractPollTexts(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll) {
        StringBuilder sb = new StringBuilder();
        sb.append(tLRPC$TL_messageMediaPoll.poll.question);
        sb.append("\n");
        sb.append("\n");
        for (int i = 0; i < tLRPC$TL_messageMediaPoll.poll.answers.size(); i++) {
            sb.append("🔘");
            sb.append(" ");
            sb.append(tLRPC$TL_messageMediaPoll.poll.answers.get(i).text);
            sb.append("\n");
        }
        return sb.toString();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean needHideBottomOverlay() {
        if (!getToolsController().isShowChannelBottomPanel() && this.chatMode == 0 && this.currentUser == null && this.currentEncryptedChat == null && ChatObject.isChannel(this.currentChat)) {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (!tLRPC$Chat.megagroup && !ChatObject.hasAdminRights(tLRPC$Chat) && !ChatObject.isNotInChat(this.currentChat)) {
                return true;
            }
        }
        return false;
    }

    private void autoActivateBotIfNeed() {
        if (this.isNeedAutoActivateBot) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false, null));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void presentFragmentAfterCloseKeyboard(final BaseFragment baseFragment) {
        long j;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isKeyboardVisible()) {
            j = 0;
        } else {
            this.chatActivityEnterView.closeKeyboard();
            j = 250;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda283
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$presentFragmentAfterCloseKeyboard$13(baseFragment);
            }
        }, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$presentFragmentAfterCloseKeyboard$13(BaseFragment baseFragment) {
        presentFragment(baseFragment);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showClearCacheBottomSheet() {
        CacheControlActivity.newInstanceAsBackend(this).showClearCacheDialog(this.dialog_id, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$showClearCacheBottomSheet$14();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showClearCacheBottomSheet$14() {
        if (getParentActivity() == null || this.chatListView == null) {
            return;
        }
        Iterator<MessageObject> it = this.messages.iterator();
        while (it.hasNext()) {
            it.next().checkMediaExistance();
        }
        for (int i = 0; i < this.chatListView.getChildCount(); i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ((ChatMessageCell) childAt).reloadMedia();
            }
        }
    }

    private void updateMuteUnMuteMultiPanelSwitchButtonIcon() {
        ImageView imageView = this.muteUnMuteMultiPanelSwitchButton;
        if (imageView == null) {
            return;
        }
        imageView.setImageResource(getMessagesController().isDialogMuted(this.dialog_id, getTopicId()) ? C3632R.C3634drawable.msg_unmute : C3632R.C3634drawable.msg_mute);
    }

    private void updateStopRestartBotMutliPanelSwitchButtonIcon() {
        ImageView imageView = this.stopRestartBotMultiPanelSwitchButton;
        if (imageView == null) {
            return;
        }
        imageView.setImageResource(this.userBlocked ? C3632R.C3634drawable.msg_retry : C3632R.C3634drawable.msg_block);
    }

    private void forwardCloud() {
        ForwardCloudBottomSheet.Delegate delegate = new ForwardCloudBottomSheet.Delegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda142
            @Override // com.iMe.fork.p023ui.dialog.ForwardCloudBottomSheet.Delegate
            public final void didSelectCloudDialog(long j) {
                ChatActivity.this.lambda$forwardCloud$15(j);
            }

            @Override // com.iMe.fork.p023ui.dialog.ForwardCloudBottomSheet.Delegate
            public /* synthetic */ void onAlbumCreatorOpened() {
                ForwardCloudBottomSheet.Delegate.CC.$default$onAlbumCreatorOpened(this);
            }
        };
        if (SharedConfig.isCloudAlbumsEnabled) {
            closeKeyboard();
            showDialog(new ForwardCloudBottomSheet(this, delegate));
            return;
        }
        delegate.didSelectCloudDialog(getUserConfig().getClientUserId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$forwardCloud$15(long j) {
        ArrayList<MessagesStorage.TopicKey> arrayList = new ArrayList<>();
        arrayList.add(MessagesStorage.TopicKey.m98of(j, 0L));
        didSelectDialogs(null, arrayList, null, false, null, null);
    }

    private void showCopyPartBottomSheetDialog(MessageObject messageObject) {
        showDialog(ChatCopyPartBottomSheetDialog.newInstance(this, getMessageCaptionSafe(messageObject, this.selectedObjectGroup)));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMultiPanelView() {
        MultiPanelButton type;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        if (this.multiPanelView == null) {
            return;
        }
        View.OnClickListener onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda100
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$updateMultiPanelView$17(view);
            }
        };
        View.OnLongClickListener onLongClickListener = new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda125
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view) {
                boolean lambda$updateMultiPanelView$18;
                lambda$updateMultiPanelView$18 = ChatActivity.this.lambda$updateMultiPanelView$18(view);
                return lambda$updateMultiPanelView$18;
            }
        };
        ArrayList arrayList = new ArrayList();
        if (!this.inPreviewMode && getMultiPanelController().isMultiPanelEnabled()) {
            for (MultiPanelButtonState multiPanelButtonState : getMultiPanelController().getButtons(this.dialogType)) {
                if (multiPanelButtonState.isEnabled() && ((type = multiPanelButtonState.getType()) != MultiPanelButton.ADD_TO_TOPIC || getMessagesController().hasDialog(this.dialog_id))) {
                    if (type != MultiPanelButton.RECENT_ACTIONS || ChatObject.hasAdminRights(this.currentChat)) {
                        if (type != MultiPanelButton.MEMBERS || ChatObject.hasAdminRights(this.currentChat) || ((tLRPC$ChatFull2 = this.chatInfo) != null && !tLRPC$ChatFull2.participants_hidden)) {
                            if (type != MultiPanelButton.SUBSCRIBERS || this.currentChat.creator || ((tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.can_view_participants)) {
                                if (type != MultiPanelButton.PINS || !this.pinnedMessageIds.isEmpty()) {
                                    arrayList.add(type);
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this.lastMultiPanelButtons.equals(arrayList)) {
            return;
        }
        this.lastMultiPanelButtons = new ArrayList(arrayList);
        this.multiPanelView.removeAllViews();
        if (this.lastMultiPanelButtons.isEmpty()) {
            MultiPanelScrollListener multiPanelScrollListener = this.multiPanelScrollListener;
            if (multiPanelScrollListener != null) {
                RecyclerListView recyclerListView = this.chatListView;
                if (recyclerListView != null) {
                    recyclerListView.removeOnScrollListener(multiPanelScrollListener);
                }
                this.multiPanelScrollListener = null;
            }
            showMultiPanel(false, false);
        } else {
            for (MultiPanelButton multiPanelButton : this.lastMultiPanelButtons) {
                FrameLayout frameLayout = new FrameLayout(this.multiPanelView.getContext());
                ImageView imageView = new ImageView(this.multiPanelView.getContext());
                imageView.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.SRC_IN));
                imageView.setScaleType(ImageView.ScaleType.FIT_XY);
                imageView.setImageResource(multiPanelButton.getIconId());
                if (multiPanelButton == MultiPanelButton.MUTE) {
                    this.muteUnMuteMultiPanelSwitchButton = imageView;
                } else if (multiPanelButton == MultiPanelButton.STOP_BOT) {
                    this.stopRestartBotMultiPanelSwitchButton = imageView;
                }
                frameLayout.setTag(multiPanelButton);
                frameLayout.setPadding(0, AndroidUtilities.m107dp(10), 0, AndroidUtilities.m107dp(12));
                frameLayout.setBackground(Theme.getSelectorDrawable(false));
                frameLayout.setOnClickListener(onClickListener);
                frameLayout.setOnLongClickListener(onLongClickListener);
                frameLayout.addView(imageView, LayoutHelper.createFrame(21, 21, 17));
                this.multiPanelView.addView(frameLayout, LayoutHelper.createLinear(-1, -2, 1.0f, 17));
            }
            updateMuteUnMuteMultiPanelSwitchButtonIcon();
            updateStopRestartBotMutliPanelSwitchButtonIcon();
            if (this.multiPanelScrollListener == null) {
                MultiPanelScrollListener multiPanelScrollListener2 = new MultiPanelScrollListener(this, null);
                this.multiPanelScrollListener = multiPanelScrollListener2;
                RecyclerListView recyclerListView2 = this.chatListView;
                if (recyclerListView2 != null) {
                    recyclerListView2.addOnScrollListener(multiPanelScrollListener2);
                }
            }
            showMultiPanel(true, false);
        }
        updatePinnedMessageView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMultiPanelView$17(View view) {
        if (getParentActivity() != null) {
            if ((this.currentUser == null && this.currentChat == null) || isMultiPanelAnimating()) {
                return;
            }
            MultiPanelButton multiPanelButton = (MultiPanelButton) view.getTag();
            if (multiPanelButton == MultiPanelButton.MUTE) {
                toggleMute(false);
            } else if (multiPanelButton == MultiPanelButton.MEDIA) {
                Bundle bundle = new Bundle();
                bundle.putLong("dialog_id", this.dialog_id);
                bundle.putLong("topic_id", getTopicId());
                MediaActivity mediaActivity = new MediaActivity(bundle, null);
                mediaActivity.setChatInfo(this.chatInfo);
                presentFragment(mediaActivity);
            } else if (multiPanelButton == MultiPanelButton.MEMBERS || multiPanelButton == MultiPanelButton.SUBSCRIBERS) {
                Bundle bundle2 = new Bundle();
                bundle2.putLong("chat_id", this.currentChat.f1602id);
                bundle2.putInt(SessionDescription.ATTR_TYPE, 2);
                bundle2.putBoolean("open_search", true);
                ChatUsersActivity chatUsersActivity = new ChatUsersActivity(bundle2);
                chatUsersActivity.setInfo(this.chatInfo);
                presentFragment(chatUsersActivity);
            } else if (multiPanelButton == MultiPanelButton.RECENT_ACTIONS) {
                if (!ChatObject.isChannel(this.currentChat)) {
                    getMessagesController().convertToMegaGroup(getParentActivity(), this.currentChat.f1602id, this, new MessagesStorage.LongCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda312
                        @Override // org.telegram.messenger.MessagesStorage.LongCallback
                        public final void run(long j) {
                            ChatActivity.this.lambda$updateMultiPanelView$16(j);
                        }
                    });
                } else {
                    presentFragment(new ChannelAdminLogActivity(this.currentChat));
                }
            } else if (multiPanelButton == MultiPanelButton.CACHE) {
                showClearCacheBottomSheet();
            } else if (multiPanelButton == MultiPanelButton.SEARCH) {
                openSearchWithText(null);
            } else if (multiPanelButton == MultiPanelButton.STOP_BOT) {
                if (MessagesController.getInstance(this.currentAccount).blockePeers.indexOfKey(this.currentUser.f1751id) >= 0) {
                    MessagesController.getInstance(this.currentAccount).unblockPeer(this.currentUser.f1751id);
                    SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.m94of("/start", this.currentUser.f1751id, null, null, null, false, null, null, null, true, 0, null, false, null));
                    return;
                }
                MessagesController.getInstance(this.currentAccount).blockPeer(this.currentUser.f1751id);
            } else if (multiPanelButton == MultiPanelButton.ADD_TO_TOPIC) {
                showSelectTopicAlert();
            } else if (multiPanelButton == MultiPanelButton.PINS) {
                openPinnedMessagesList(false);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMultiPanelView$16(long j) {
        if (j != 0) {
            presentFragment(new ChannelAdminLogActivity(getMessagesController().getChat(Long.valueOf(j))));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updateMultiPanelView$18(View view) {
        if (getParentActivity() != null && !isMultiPanelAnimating()) {
            view.performHapticFeedback(3, 2);
            presentFragment(new MultiPanelSettingsActivity(this.dialogType));
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMultiPanel(boolean z, boolean z2) {
        if (z & (!this.isMultiPanelLocked)) {
            if (this.multiPanelView.getTag() != null) {
                this.multiPanelView.setTag(null);
                this.multiPanelView.setVisibility(0);
                AnimatorSet animatorSet = this.multiPanelAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.multiPanelAnimator = null;
                }
                if (z2) {
                    this.multiPanelAnimator = new AnimatorSet();
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.multiPanelViewOffset, BitmapDescriptorFactory.HUE_RED);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda5
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.this.lambda$showMultiPanel$19(valueAnimator);
                        }
                    });
                    this.multiPanelAnimator.playTogether(ofFloat);
                    this.multiPanelAnimator.setDuration(200L);
                    this.multiPanelAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.5
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (ChatActivity.this.multiPanelAnimator == null || !ChatActivity.this.multiPanelAnimator.equals(animator)) {
                                return;
                            }
                            ChatActivity.this.multiPanelAnimator = null;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (ChatActivity.this.multiPanelAnimator == null || !ChatActivity.this.multiPanelAnimator.equals(animator)) {
                                return;
                            }
                            ChatActivity.this.multiPanelAnimator = null;
                        }
                    });
                    this.multiPanelAnimator.start();
                } else {
                    this.multiPanelViewOffset = BitmapDescriptorFactory.HUE_RED;
                    this.multiPanelView.setVisibility(0);
                    invalidateChatListViewTopPadding();
                }
            }
        } else if (this.multiPanelView.getTag() == null) {
            this.multiPanelView.setTag(1);
            AnimatorSet animatorSet2 = this.multiPanelAnimator;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                this.multiPanelAnimator = null;
            }
            if (z2) {
                this.multiPanelAnimator = new AnimatorSet();
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.multiPanelViewOffset, -AndroidUtilities.m107dp(44));
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda14
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.this.lambda$showMultiPanel$20(valueAnimator);
                    }
                });
                this.multiPanelAnimator.playTogether(ofFloat2);
                this.multiPanelAnimator.setDuration(200L);
                this.multiPanelAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.6
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (ChatActivity.this.multiPanelAnimator == null || !ChatActivity.this.multiPanelAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.multiPanelView.setVisibility(8);
                        ChatActivity.this.multiPanelAnimator = null;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (ChatActivity.this.multiPanelAnimator == null || !ChatActivity.this.multiPanelAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.multiPanelAnimator = null;
                    }
                });
                this.multiPanelAnimator.start();
            } else {
                this.multiPanelViewOffset = -AndroidUtilities.m107dp(44);
                this.multiPanelView.setVisibility(8);
                invalidateChatListViewTopPadding();
            }
        }
        checkListViewPaddings();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMultiPanel$19(ValueAnimator valueAnimator) {
        this.multiPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMultiPanel$20(ValueAnimator valueAnimator) {
        this.multiPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void closeKeyboard() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.closeKeyboard();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showAddToFolderBottomSheet() {
        final ArrayList arrayList = new ArrayList();
        arrayList.add(Long.valueOf(this.dialog_id));
        FiltersListBottomSheet filtersListBottomSheet = new FiltersListBottomSheet(this, arrayList);
        filtersListBottomSheet.setDelegate(new FiltersListBottomSheet.FiltersListBottomSheetDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda348
            @Override // org.telegram.p043ui.Components.FiltersListBottomSheet.FiltersListBottomSheetDelegate
            public final void didSelectFilter(MessagesController.DialogFilter dialogFilter) {
                ChatActivity.this.lambda$showAddToFolderBottomSheet$21(arrayList, dialogFilter);
            }
        });
        closeKeyboard();
        showDialog(filtersListBottomSheet);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showAddToFolderBottomSheet$21(ArrayList arrayList, MessagesController.DialogFilter dialogFilter) {
        ArrayList<Long> arrayList2;
        ArrayList<Long> arrayList3;
        long j;
        ArrayList<Long> dialogsCount = FiltersListBottomSheet.getDialogsCount(this, dialogFilter, arrayList, true, false);
        int size = (dialogFilter != null ? dialogFilter.alwaysShow.size() : 0) + dialogsCount.size();
        if ((size > getMessagesController().dialogFiltersChatsLimitDefault && !getUserConfig().isPremium()) || size > getMessagesController().dialogFiltersChatsLimitPremium) {
            showDialog(new LimitReachedBottomSheet(this, this.fragmentView.getContext(), 4, this.currentAccount, this.themeDelegate));
        } else if (dialogFilter != null) {
            if (dialogsCount.isEmpty()) {
                arrayList2 = dialogsCount;
            } else {
                for (int i = 0; i < dialogsCount.size(); i++) {
                    dialogFilter.neverShow.remove(dialogsCount.get(i));
                }
                dialogFilter.alwaysShow.addAll(dialogsCount);
                arrayList2 = dialogsCount;
                FilterCreateActivity.saveFilterToServer(dialogFilter, dialogFilter.flags, dialogFilter.name, dialogFilter.alwaysShow, dialogFilter.neverShow, dialogFilter.pinnedDialogs, false, false, true, true, false, this, null);
            }
            if (arrayList2.size() == 1) {
                arrayList3 = arrayList2;
                j = arrayList3.get(0).longValue();
            } else {
                arrayList3 = arrayList2;
                j = 0;
            }
            getUndoView().showWithAction(j, 20, Integer.valueOf(arrayList3.size()), dialogFilter, (Runnable) null, (Runnable) null);
        } else if ((getMessagesController().dialogFilters.size() - 1 >= getMessagesController().dialogFiltersLimitDefault && !getUserConfig().isPremium()) || getMessagesController().dialogFilters.size() >= getMessagesController().dialogFiltersLimitPremium) {
            showDialog(new LimitReachedBottomSheet(this, getParentActivity(), 3, this.currentAccount, this.themeDelegate));
        } else {
            presentFragment(new FilterCreateActivity(null, dialogsCount));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void toggleAlbum() {
        getAlbumsController().toggleAlbum(this.dialog_id, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda229
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$toggleAlbum$22();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleAlbum$22() {
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", this.currentChat.f1602id);
        presentFragment(new ChatActivity(bundle), true, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openDonationScreen() {
        if (this.currentChat != null) {
            WalletHelper.safeRunWithActivationCheck(this, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda157
                @Override // com.iMe.fork.utils.Callbacks$Callback
                public final void invoke() {
                    ChatActivity.this.lambda$openDonationScreen$24();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDonationScreen$24() {
        WalletHelper.runWithCheckIsCryptoWalletCreated(this, null, BlockchainType.EVM, new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda160
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.lambda$openDonationScreen$23();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDonationScreen$23() {
        this.walletFlowCoordinator.getValue().start(this.parentLayout, WalletSendFragment.newInstance(new TransferScreenArgs(TokenUiMappingKt.mapToUI(TokenDetailed.getLIME(NetworkType.BSC)), "", null, Long.valueOf(this.currentChat.f1602id), NetworkType.BSC), WalletSendScreenType.WALLET_TRANSFER_DONATIONS), false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateAlbumsItem() {
        if (this.albumsItem == null) {
            return;
        }
        if (SharedConfig.isCloudAlbumsEnabled && !getAlbumsController().isOpenAlbumsInsteadCloudEnabled() && !this.searchItemVisible) {
            this.albumsItem.setVisibility(0);
        } else {
            this.albumsItem.setVisibility(8);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateOpenAlbumsInsteadCloudItem() {
        if (this.openAlbumsInsteadCloud == null) {
            return;
        }
        if (SharedConfig.isCloudAlbumsEnabled && getAlbumsController().isOpenAlbumsInsteadCloudEnabled()) {
            this.openAlbumsInsteadCloud.setVisibility(0);
        } else {
            this.openAlbumsInsteadCloud.setVisibility(8);
        }
    }

    private void updateSelectTopicItem() {
        if (this.selectTopicItem == null) {
            return;
        }
        if (getMessagesController().hasDialog(this.dialog_id)) {
            this.selectTopicItem.setVisibility(0);
        } else {
            this.selectTopicItem.setVisibility(8);
        }
    }

    private void updateAddToFolderItem() {
        if (this.addToFolderItem == null) {
            return;
        }
        if (getMessagesController().hasDialog(this.dialog_id) && FiltersListBottomSheet.getCanAddDialogFilters(this, new ArrayList(Collections.singletonList(Long.valueOf(this.dialog_id)))).size() > 0) {
            this.addToFolderItem.setVisibility(0);
        } else {
            this.addToFolderItem.setVisibility(8);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0023, code lost:
        if (r0.exists() == false) goto L19;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void voiceToText(org.telegram.messenger.MessageObject r6) {
        /*
            r5 = this;
            android.app.Activity r0 = r5.getParentActivity()
            if (r0 == 0) goto L58
            if (r6 == 0) goto L58
            org.telegram.tgnet.TLRPC$Message r0 = r6.messageOwner
            if (r0 != 0) goto Ld
            goto L58
        Ld:
            java.lang.String r0 = r0.attachPath
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            r1 = 0
            if (r0 != 0) goto L25
            java.io.File r0 = new java.io.File
            org.telegram.tgnet.TLRPC$Message r2 = r6.messageOwner
            java.lang.String r2 = r2.attachPath
            r0.<init>(r2)
            boolean r2 = r0.exists()
            if (r2 != 0) goto L26
        L25:
            r0 = r1
        L26:
            if (r0 != 0) goto L34
            int r0 = org.telegram.messenger.UserConfig.selectedAccount
            org.telegram.messenger.FileLoader r0 = org.telegram.messenger.FileLoader.getInstance(r0)
            org.telegram.tgnet.TLRPC$Message r2 = r6.messageOwner
            java.io.File r0 = r0.getPathToMessage(r2)
        L34:
            boolean r2 = r0.exists()
            if (r2 == 0) goto L40
            com.iMe.ui.chat.ChatPresenter r1 = r5.presenter
            r1.processVoiceToText(r6, r0)
            goto L58
        L40:
            org.telegram.ui.Components.BulletinFactory r0 = org.telegram.p043ui.Components.BulletinFactory.m65of(r5)
            int r2 = org.telegram.messenger.C3632R.raw.info
            int r3 = org.telegram.messenger.C3632R.string.PleaseDownload
            java.lang.String r4 = "PleaseDownload"
            java.lang.String r3 = org.telegram.messenger.LocaleController.getString(r4, r3)
            org.telegram.ui.Components.Bulletin r0 = r0.createSimpleBulletin(r2, r3)
            r0.show()
            r5.onVoiceToTextCompleted(r6, r1)
        L58:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.voiceToText(org.telegram.messenger.MessageObject):void");
    }

    private void shareMessageTextOrMedia(String str, String str2, String str3, String str4) {
        Uri fromFile;
        Intent intent = new Intent("android.intent.action.SEND");
        if (str != null) {
            intent.setPackage(str);
        }
        if (!TextUtils.isEmpty(str3)) {
            File file = new File(str3);
            if (!file.exists()) {
                BulletinFactory.m65of(this).createSimpleBulletin(C3632R.raw.info, LocaleController.getString("PleaseDownload", C3632R.string.PleaseDownload)).show();
                return;
            }
            if (Build.VERSION.SDK_INT >= 24) {
                try {
                    Activity parentActivity = getParentActivity();
                    fromFile = FileProvider.getUriForFile(parentActivity, ApplicationLoader.getApplicationId() + ".provider", file);
                    intent.setFlags(1);
                } catch (Exception unused) {
                    fromFile = Uri.fromFile(file);
                }
            } else {
                fromFile = Uri.fromFile(file);
            }
            if (TextUtils.isEmpty(str2)) {
                str2 = Utilities.getMimeType(fromFile);
            }
            intent.setType(str2);
            intent.putExtra("android.intent.extra.STREAM", fromFile);
        } else if (!TextUtils.isEmpty(str4)) {
            intent.setType("text/plain");
            intent.putExtra("android.intent.extra.TEXT", str4);
        }
        try {
            if (str == null) {
                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", C3632R.string.ShareFile)), 500);
            } else {
                getParentActivity().startActivity(intent);
            }
        } catch (ActivityNotFoundException unused2) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void lockMultiPanel(boolean z) {
        MultiPanelScrollListener multiPanelScrollListener = this.multiPanelScrollListener;
        if (multiPanelScrollListener == null) {
            return;
        }
        this.isMultiPanelLocked = z;
        multiPanelScrollListener.show(!z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void jumpToChatStart() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull != null && tLRPC$ChatFull.migrated_from_chat_id != 0) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.migrated_from_chat_id));
            if (chat == null) {
                return;
            }
            int i = chat.date;
            this.ignoreChatStartMessagesLoading = false;
            showLoadingDialog(true, true, Disposables.fromRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda201
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$jumpToChatStart$25();
                }
            }));
            getMessagesController().loadMessages(-this.chatInfo.migrated_from_chat_id, 0L, true, 100, 0, i, false, 0, this.classGuid, 3, 0, 0, 0L, 0, -99999, false);
            return;
        }
        jumpToDate(1375315200);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$jumpToChatStart$25() {
        this.ignoreChatStartMessagesLoading = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showForwardSettingsHint(boolean z) {
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (z && SharedConfig.forwardingOptionsHintShown) {
            return;
        }
        if (z) {
            if (this.forwardSettingsHintView == null) {
                HintView hintView = new HintView(getParentActivity(), 1);
                this.forwardSettingsHintView = hintView;
                hintView.setText(LocaleController.getString("TapForForwardingOptions", C3632R.string.TapForForwardingOptions));
                this.forwardSettingsHintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.forwardSettingsHintView.setVisibility(4);
                this.forwardSettingsHintView.createCloseButton();
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                sizeNotifierFrameLayout.addView(this.forwardSettingsHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 0, 0));
            }
            this.forwardSettingsHintView.showForView(this.replyIconImageView, true);
            return;
        }
        HintView hintView2 = this.forwardSettingsHintView;
        if (hintView2 != null) {
            hintView2.hide();
            this.forwardSettingsHintView = null;
        }
    }

    private void checkTemplatesChannelCreated() {
        if (this.featureTemplatesChannelId == 0 || !getMessagesController().hasDialog(this.featureTemplatesChannelId)) {
            return;
        }
        long j = this.featureTemplatesChannelId;
        this.featureTemplatesChannelId = 0L;
        getTemplatesController().setTemplatesChannelId(-j);
        getTemplatesController().saveConfig();
        getMessagesController().addDialogToFolder(j, 1, -1, 0L);
        presentFragment(newInstanceForDialogId(j, 0));
    }

    private void prepareMultipleFilesSending(ArrayList<Uri> arrayList) {
        this.isInMultipleFilesSending = true;
        this.multipleFilesSendingUris = arrayList;
        hideHints(false);
        this.chatActivityEnterView.setForceShowSendButton(true, false);
        this.replyCloseImageView.setContentDescription(LocaleController.getInternalString(C3632R.string.multiple_files_sending_reset));
        ChatActivityEnterTopView.EditViewButton[] buttons = this.chatActivityEnterTopView.getEditView().getButtons();
        buttons[0].getTextView().setText(LocaleController.formatPluralString("Files", arrayList.size(), new Object[0]));
        buttons[0].getImageView().setImageResource(C3632R.C3634drawable.msg_sendfile);
        buttons[1].setVisibility(8);
        this.chatActivityEnterTopView.setEditMode(true);
        this.chatActivityEnterView.showTopView(true, false);
    }

    private void showSelectFilesDialog() {
        closeKeyboard();
        SelectedFilesBottomSheet selectedFilesBottomSheet = new SelectedFilesBottomSheet(getParentActivity(), this.multipleFilesSendingUris, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda146
            @Override // com.iMe.fork.utils.Callbacks$Callback1
            public final void invoke(Object obj) {
                ChatActivity.this.lambda$showSelectFilesDialog$26((ArrayList) obj);
            }
        });
        showDialog(selectedFilesBottomSheet);
        selectedFilesBottomSheet.setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda64
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showSelectFilesDialog$28(dialogInterface);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSelectFilesDialog$26(ArrayList arrayList) {
        if (arrayList.isEmpty()) {
            resetMultipleFilesSendingMode(true);
        } else if (arrayList.size() != this.multipleFilesSendingUris.size()) {
            this.multipleFilesSendingUris = arrayList;
            this.chatActivityEnterTopView.getEditView().getButtons()[0].getTextView().setText(LocaleController.formatPluralString("Files", this.multipleFilesSendingUris.size(), new Object[0]));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSelectFilesDialog$28(DialogInterface dialogInterface) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda172
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showSelectFilesDialog$27();
            }
        }, 50L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSelectFilesDialog$27() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    private void deleteFileFromCache(final MessageObject messageObject) {
        MessagesStorage.getInstance(this.currentAccount).getCachedFilesFromMessages(new ArrayList<>(Collections.singletonList(messageObject)), new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda151
            @Override // com.iMe.fork.utils.Callbacks$Callback1
            public final void invoke(Object obj) {
                ChatActivity.this.lambda$deleteFileFromCache$29(messageObject, (ArrayList) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFileFromCache$29(MessageObject messageObject, ArrayList arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        FileLoader.getInstance(this.currentAccount).deleteFiles(arrayList, 2);
        messageObject.mediaExists = false;
        messageObject.attachPathExists = false;
        this.chatAdapter.notifyDataSetChanged();
        showToast(LocaleController.formatString("CacheWasCleared", C3632R.string.CacheWasCleared, AndroidUtilities.formatFileSize(messageObject.getSize())));
    }

    private void initMenuSubItemsListsIfNeeded() {
        if (this.copyItems == null || this.saveItems == null || this.forwardItems == null || this.deleteItems == null) {
            this.copyItems = Arrays.asList(3, Integer.valueOf(IdFabric$Menu.MESSAGE_COPY_IMAGE), Integer.valueOf(IdFabric$Menu.MESSAGE_COPY_PART), 22);
            this.saveItems = Arrays.asList(4, 7, 10, Integer.valueOf(IdFabric$Menu.MESSAGE_SAVE_AS), 11, Integer.valueOf(IdFabric$Menu.MESSAGE_SAVE_CLOUD));
            this.forwardItems = Arrays.asList(2, Integer.valueOf(IdFabric$Menu.MESSAGE_FORWARD_CLOUD), Integer.valueOf(IdFabric$Menu.MESSAGE_FORWARD_WHATSAPP), Integer.valueOf(IdFabric$Menu.MESSAGE_FORWARD_WHATSAPP_BUSINESS), Integer.valueOf(IdFabric$Menu.MESSAGE_FORWARD_VIBER), Integer.valueOf(IdFabric$Menu.SHARE));
            this.deleteItems = Arrays.asList(21, Integer.valueOf(IdFabric$Menu.MESSAGE_DELETE_FROM_CACHE), 1, 23);
        }
    }

    private void groupMenuItems(ArrayList<Integer> arrayList, int i, List<Integer> list) {
        ArrayList<Integer> arrayList2 = new ArrayList<>();
        for (Integer num : list) {
            int intValue = num.intValue();
            if (arrayList.contains(Integer.valueOf(intValue))) {
                arrayList2.add(Integer.valueOf(arrayList.indexOf(Integer.valueOf(intValue))));
            }
        }
        if (arrayList2.size() > 1) {
            int indexOf = arrayList.indexOf(Integer.valueOf(i));
            SparseArray<ArrayList<Integer>> sparseArray = this.menuItemsGroups;
            if (indexOf == -1) {
                indexOf = ((Integer) Collections.min(arrayList2)).intValue();
            }
            sparseArray.put(indexOf, arrayList2);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:78:0x010b  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x010d  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0115  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0117  */
    /* JADX WARN: Type inference failed for: r1v6, types: [org.telegram.ui.ActionBar.ActionBarMenuSubItem, android.widget.FrameLayout] */
    /* JADX WARN: Type inference failed for: r1v7, types: [org.telegram.ui.ActionBar.ActionBarMenuSubItem, android.widget.FrameLayout] */
    /* JADX WARN: Type inference failed for: r1v8, types: [org.telegram.ui.ActionBar.ActionBarMenuItem, android.widget.FrameLayout] */
    /* JADX WARN: Type inference failed for: r2v3 */
    /* JADX WARN: Type inference failed for: r2v4, types: [int] */
    /* JADX WARN: Type inference failed for: r2v5 */
    /* JADX WARN: Type inference failed for: r2v6, types: [int] */
    /* JADX WARN: Type inference failed for: r2v7 */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v1, types: [int] */
    /* JADX WARN: Type inference failed for: r6v2 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void updateForwardingEditorActionMode() {
        /*
            Method dump skipped, instructions count: 297
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.updateForwardingEditorActionMode():void");
    }

    private void moveSelectedMessages(boolean z) {
        int i;
        ArrayList arrayList = new ArrayList();
        Iterator<MessageObject> it = getSortedSelectedMessagesIds().iterator();
        int i2 = -1;
        while (it.hasNext()) {
            MessageObject next = it.next();
            arrayList.add(next);
            int indexOf = this.messages.indexOf(next);
            if (i2 == -1) {
                i2 = indexOf;
            } else if (z) {
                i2 = Math.max(i2, indexOf);
            } else {
                i2 = Math.min(i2, indexOf);
            }
        }
        MessageObject messageObject = this.messages.get((z ? 1 : -1) + i2);
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
            if (groupedMessages == null) {
                return;
            }
            i = groupedMessages.messages.size();
        } else {
            i = 1;
        }
        int i3 = z ? i2 + i + 1 : i2 - i;
        this.messages.removeAll(arrayList);
        ArrayList<MessageObject> arrayList2 = this.messages;
        arrayList2.addAll(arrayList2.indexOf(this.messages.get(i3)), arrayList);
        addToSelectedMessages(null, false, true);
        this.chatAdapter.notifyDataSetChanged(true);
        MessageObject messageObject2 = (MessageObject) arrayList.get(z ? arrayList.size() - 1 : 0);
        int indexOf2 = this.messages.indexOf(messageObject2);
        GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
        if (gridLayoutManagerFixed != null && indexOf2 > 0 && (gridLayoutManagerFixed.findViewByPosition(this.chatAdapter.messagesStartRow + indexOf2) != null || this.chatLayoutManager.findViewByPosition((this.chatAdapter.messagesStartRow + indexOf2) - 1) != null)) {
            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf2, getScrollOffsetForMessage(messageObject2), false);
            return;
        }
        int scrollOffsetForMessage = getScrollOffsetForMessage(messageObject2);
        this.chatScrollHelperCallback.scrollTo = messageObject2;
        this.chatScrollHelperCallback.lastBottom = false;
        this.chatScrollHelperCallback.lastItemOffset = scrollOffsetForMessage;
        this.chatScrollHelperCallback.lastPadding = (int) this.chatListViewPaddingTop;
        this.chatScrollHelper.setScrollDirection(z ? 1 : 0);
        this.chatScrollHelper.scrollToPosition(indexOf2, scrollOffsetForMessage, false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void groupSelectedMessages() {
        MessageObject.GroupedMessages groupedMessages = new MessageObject.GroupedMessages();
        groupedMessages.groupId = Utilities.random.nextLong();
        Iterator<MessageObject> it = getSortedSelectedMessagesIds().iterator();
        int i = -1;
        while (it.hasNext()) {
            MessageObject next = it.next();
            TLRPC$Message tLRPC$Message = next.messageOwner;
            long j = groupedMessages.groupId;
            next.localGroupId = j;
            next.localSentGroupId = j;
            tLRPC$Message.grouped_id = j;
            next.forceUpdate = true;
            groupedMessages.messages.add(0, next);
            int indexOf = this.messages.indexOf(next);
            i = i == -1 ? indexOf : Math.max(i, indexOf);
        }
        MessageObject messageObject = null;
        int i2 = i - 1;
        while (true) {
            if (i2 < 0) {
                break;
            }
            MessageObject messageObject2 = this.messages.get(i2);
            if (this.selectedMessagesIds[0].get(messageObject2.getId()) == null) {
                messageObject = messageObject2;
                break;
            }
            i2--;
        }
        this.messages.removeAll(groupedMessages.messages);
        int indexOf2 = messageObject != null ? this.messages.indexOf(messageObject) + 1 : 0;
        Iterator<MessageObject> it2 = groupedMessages.messages.iterator();
        while (it2.hasNext()) {
            this.messages.add(indexOf2, it2.next());
        }
        groupedMessages.calculate();
        this.groupedMessagesMap.put(groupedMessages.groupId, groupedMessages);
        this.chatAdapter.notifyDataSetChanged(true);
        hideActionMode();
        updateVisibleRows();
        MessageObject messageObject3 = groupedMessages.messages.get(0);
        int indexOf3 = this.messages.indexOf(messageObject3);
        GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
        if (gridLayoutManagerFixed != null && indexOf3 > 0 && (gridLayoutManagerFixed.findViewByPosition(this.chatAdapter.messagesStartRow + indexOf3) != null || this.chatLayoutManager.findViewByPosition((this.chatAdapter.messagesStartRow + indexOf3) - 1) != null)) {
            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf3, getScrollOffsetForMessage(messageObject3), false);
            return;
        }
        int scrollOffsetForMessage = getScrollOffsetForMessage(messageObject3);
        this.chatScrollHelperCallback.scrollTo = messageObject3;
        this.chatScrollHelperCallback.lastBottom = false;
        this.chatScrollHelperCallback.lastItemOffset = scrollOffsetForMessage;
        this.chatScrollHelperCallback.lastPadding = (int) this.chatListViewPaddingTop;
        this.chatScrollHelper.setScrollDirection(-1);
        this.chatScrollHelper.scrollToPosition(indexOf3, scrollOffsetForMessage, false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void ungroupSelectedMessages() {
        for (int i = 0; i < this.selectedMessagesIds[0].size(); i++) {
            MessageObject valueAt = this.selectedMessagesIds[0].valueAt(i);
            this.groupedMessagesMap.remove(valueAt.getGroupId());
            TLRPC$Message tLRPC$Message = valueAt.messageOwner;
            valueAt.localGroupId = 0L;
            valueAt.localSentGroupId = 0L;
            tLRPC$Message.grouped_id = 0L;
            valueAt.forceUpdate = true;
        }
        addToSelectedMessages(null, false, true);
        this.chatAdapter.notifyDataSetChanged(true);
        hideActionMode();
        updateVisibleRows();
    }

    private ArrayList<MessageObject> getSortedSelectedMessagesIds() {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        for (int i = 0; i < this.selectedMessagesIds[0].size(); i++) {
            arrayList.add(this.selectedMessagesIds[0].valueAt(i));
        }
        Collections.sort(arrayList, Comparator.CC.comparingInt(new ToIntFunction() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda302
            @Override // p033j$.util.function.ToIntFunction
            public final int applyAsInt(Object obj) {
                int lambda$getSortedSelectedMessagesIds$30;
                lambda$getSortedSelectedMessagesIds$30 = ChatActivity.this.lambda$getSortedSelectedMessagesIds$30((MessageObject) obj);
                return lambda$getSortedSelectedMessagesIds$30;
            }
        }));
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$getSortedSelectedMessagesIds$30(MessageObject messageObject) {
        return this.messages.indexOf(messageObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openSaveDirectoryChooser() {
        Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT_TREE");
        intent.addFlags(195);
        intent.putExtra("android.provider.extra.PROMPT", LocaleController.getInternalString(C3632R.string.message_document_file_save_as_choose_directory));
        try {
            startActivityForResult(intent, IdFabric$RequestCode.FILE_SAVING_DIRECTORY);
        } catch (Exception unused) {
        }
    }

    private void showChooseAnotherDirectoryDialog() {
        showDialog(DialogUtils.createDialog(getContext(), new DialogModel(LocaleController.getInternalString(C3632R.string.message_document_file_save_as_incorrect_title), LocaleController.getInternalString(C3632R.string.message_document_file_save_as_incorrect_description), LocaleController.getString("Cancel", C3632R.string.Cancel), LocaleController.getString("OK", C3632R.string.OK)), new Callbacks$Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda156
            @Override // com.iMe.fork.utils.Callbacks$Callback
            public final void invoke() {
                ChatActivity.this.openSaveDirectoryChooser();
            }
        }, null));
    }

    private void showSaveFileDialog(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        DialogUtils.createEditTextAlert(this, new EditTextDialogModel(LocaleController.getInternalString(C3632R.string.message_document_file_save_as), null, LocaleController.getInternalString(C3632R.string.message_document_file_save_as_hint), FileLoader.getDocumentFileName(messageObject.getDocument()), !isKeyboardVisible(), LocaleController.getString("Cancel", C3632R.string.Cancel), LocaleController.getInternalString(C3632R.string.message_document_file_save_as_choose)), new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda150
            @Override // com.iMe.fork.utils.Callbacks$Callback1
            public final void invoke(Object obj) {
                ChatActivity.this.lambda$showSaveFileDialog$31(messageObject, (String) obj);
            }
        }, null).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSaveFileDialog$31(MessageObject messageObject, String str) {
        this.savingFileCustomName = str;
        this.savingDocument = messageObject.getDocument();
        this.savingMessageObject = messageObject;
        int i = Build.VERSION.SDK_INT;
        if (i >= 23 && ((i <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity() != null && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, IdFabric$RequestCode.FILE_SAVING_WRITE_STORAGE_PERMISSION);
        } else {
            openSaveDirectoryChooser();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showLanguageSettingsDialog() {
        this.presenter.loadTextTranslateLanguages();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$MultiPanelScrollListener */
    /* loaded from: classes5.dex */
    public class MultiPanelScrollListener extends RecyclerView.OnScrollListener {
        private final int SCROLL_THRESHOLD;
        private boolean isVisible;
        private int scrolledDistance;

        private MultiPanelScrollListener() {
            this.SCROLL_THRESHOLD = AndroidUtilities.m107dp(100);
            this.scrolledDistance = 0;
            this.isVisible = true;
        }

        /* synthetic */ MultiPanelScrollListener(ChatActivity chatActivity, C41961 c41961) {
            this();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        public void onScrolled(RecyclerView recyclerView, int i, int i2) {
            super.onScrolled(recyclerView, i, i2);
            if (ChatActivity.this.getMultiPanelController().isHideMultiPanelOnScrollEnabled() && !ChatActivity.this.isMultiPanelLocked && this.isVisible) {
                if (Math.abs(this.scrolledDistance) >= this.SCROLL_THRESHOLD) {
                    show(false);
                }
                this.scrolledDistance += i2;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
        public void onScrollStateChanged(final RecyclerView recyclerView, int i) {
            super.onScrollStateChanged(recyclerView, i);
            if (i == 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$MultiPanelScrollListener$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.MultiPanelScrollListener.this.lambda$onScrollStateChanged$0(recyclerView);
                    }
                }, 100L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onScrollStateChanged$0(RecyclerView recyclerView) {
            if (ChatActivity.this.getParentActivity() == null || recyclerView.getScrollState() != 0) {
                return;
            }
            show(true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void show(boolean z) {
            if (this.isVisible != z) {
                if (z && ChatActivity.this.isMultiPanelLocked) {
                    return;
                }
                this.isVisible = z;
                this.scrolledDistance = 0;
                ChatActivity.this.showMultiPanel(z, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$33(DialogInterface dialogInterface) {
        this.postponedScrollIsCanceled = true;
        this.postponedScrollMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceNextPinnedMessageId = 0;
        invalidateMessagesVisiblePart();
        showPinnedProgress(false);
    }

    /* renamed from: of */
    public static ChatActivity m68of(long j) {
        Bundle bundle = new Bundle();
        if (j >= 0) {
            bundle.putLong("user_id", j);
        } else {
            bundle.putLong("chat_id", -j);
        }
        return new ChatActivity(bundle);
    }

    public void deleteHistory(final int i, final int i2, final boolean z) {
        this.chatAdapter.frozenMessages.clear();
        for (int i3 = 0; i3 < this.messages.size(); i3++) {
            MessageObject messageObject = this.messages.get(i3);
            int i4 = messageObject.messageOwner.date;
            if (i4 <= i || i4 >= i2) {
                this.chatAdapter.frozenMessages.add(messageObject);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        if (this.chatAdapter.frozenMessages.isEmpty()) {
            showProgressView(true);
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = true;
        chatActivityAdapter.notifyDataSetChanged(true);
        UndoView undoView = getUndoView();
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 81, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda241
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$35(i, i2, z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$36();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$35(int i, int i2, boolean z) {
        getMessagesController().deleteMessagesRange(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.dialog_id : 0L, i, i2, z, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda205
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$34();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$34() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$36() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    public void showHeaderItem(boolean z) {
        if (z) {
            if (this.chatActivityEnterView.hasText() && TextUtils.isEmpty(this.chatActivityEnterView.getSlowModeTimer())) {
                ActionBarMenu.LazyItem lazyItem = this.attachItem;
                if (lazyItem != null) {
                    lazyItem.setVisibility(0);
                }
                ActionBarMenuItem actionBarMenuItem = this.headerItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(8);
                    return;
                }
                return;
            }
            ActionBarMenu.LazyItem lazyItem2 = this.attachItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(0);
                return;
            }
            return;
        }
        ActionBarMenu.LazyItem lazyItem3 = this.attachItem;
        if (lazyItem3 != null) {
            lazyItem3.setVisibility(8);
        }
        ActionBarMenuItem actionBarMenuItem3 = this.headerItem;
        if (actionBarMenuItem3 != null) {
            actionBarMenuItem3.setVisibility(8);
        }
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public long getTopicId() {
        if (this.isTopic) {
            return this.threadMessageId;
        }
        return 0L;
    }

    public long getSavedDialogId() {
        if (this.chatMode == 3) {
            return this.threadMessageId;
        }
        return 0L;
    }

    public boolean isForumInViewAsMessagesMode() {
        return ChatObject.isForum(this.currentChat) && !this.isTopic;
    }

    @Override // org.telegram.p043ui.Components.FloatingDebug.FloatingDebugProvider
    public List<FloatingDebugController.DebugItem> onGetDebugItems() {
        String string;
        ArrayList arrayList = new ArrayList();
        if (ChatObject.isChannel(this.currentChat)) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(C3632R.string.DebugShareAlert)));
            int i = this.shareAlertDebugMode;
            if (i == 1) {
                string = LocaleController.getString(C3632R.string.DebugShareAlertDialogsModeLess);
            } else if (i != 2) {
                string = LocaleController.getString(C3632R.string.DebugShareAlertDialogsModeNormal);
            } else {
                string = LocaleController.getString(C3632R.string.DebugShareAlertDialogsModeMore);
            }
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.formatString(C3632R.string.DebugShareAlertSwitchDialogsMode, string), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda230
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$37();
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(C3632R.string.DebugShareAlertTopicsSlowMotion), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda174
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$38();
                }
            }));
        }
        if (this.currentUser == null) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(C3632R.string.DebugMessageSkeletons)));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(C3632R.string.DebugMessageSkeletonsLightOverlayAlpha), BitmapDescriptorFactory.HUE_RED, 255.0f, new AnimationProperties.FloatProperty(this, "") { // from class: org.telegram.ui.ChatActivity.11
                @Override // org.telegram.p043ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    int unused = ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA = (int) f;
                }

                @Override // android.util.Property
                public Float get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(C3632R.string.DebugMessageSkeletonsSaturation), 1.0f, 10.0f, new AnimationProperties.FloatProperty("") { // from class: org.telegram.ui.ChatActivity.12
                @Override // org.telegram.p043ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    float unused = ChatActivity.SKELETON_SATURATION = f;
                    ChatActivity.this.skeletonColorMatrix.setSaturation(f);
                    ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                }

                @Override // android.util.Property
                public Float get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_SATURATION);
                }
            }));
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$37() {
        int i = this.shareAlertDebugMode + 1;
        this.shareAlertDebugMode = i;
        this.shareAlertDebugMode = i % 3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$38() {
        this.shareAlertDebugTopicsSlowMotion = !this.shareAlertDebugTopicsSlowMotion;
    }

    public void updateMessages(ArrayList<MessageObject> arrayList, boolean z) {
        for (int i = 0; i < arrayList.size(); i++) {
            this.chatAdapter.updateRowWithMessageObject(arrayList.get(i), false, z);
        }
    }

    public TextView getOrCreateWebBotTitleView() {
        if (this.webBotTitle == null) {
            TextView textView = new TextView(getContext());
            this.webBotTitle = textView;
            textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
            this.webBotTitle.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            this.webBotTitle.setGravity(16);
            this.actionBar.addView(this.webBotTitle, LayoutHelper.createFrame(-1, -1, 0, 72, 0, 72, 0));
        }
        return this.webBotTitle;
    }

    public RecyclerListView getChatListView() {
        return this.chatListView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMultiselect(int i) {
        int i2;
        if (this.chatMode != 3 && (i2 = i - this.chatAdapter.messagesStartRow) >= 0 && i2 < this.messages.size()) {
            MessageObject messageObject = this.messages.get(i2);
            final boolean z = this.selectedMessagesIds[0].get(messageObject.getId(), null) == null && this.selectedMessagesIds[1].get(messageObject.getId(), null) == null;
            final SparseArray sparseArray = new SparseArray();
            for (int i3 = 0; i3 < this.selectedMessagesIds[0].size(); i3++) {
                sparseArray.put(this.selectedMessagesIds[0].keyAt(i3), this.selectedMessagesIds[0].valueAt(i3));
            }
            for (int i4 = 0; i4 < this.selectedMessagesIds[1].size(); i4++) {
                sparseArray.put(this.selectedMessagesIds[1].keyAt(i4), this.selectedMessagesIds[1].valueAt(i4));
            }
            this.chatListView.startMultiselect(i, false, new RecyclerListView.onMultiSelectionChanged() { // from class: org.telegram.ui.ChatActivity.16
                boolean limitReached;

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public void onSelectionChanged(int i5, boolean z2, float f, float f2) {
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (z) {
                        z2 = !z2;
                    }
                    if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                        return;
                    }
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                    if (!z2 || (ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) < 0 && ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) < 0)) {
                        if ((z2 || ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) >= 0) && messageObject2.contentType == 0) {
                            if (z2 && ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() >= 100) {
                                this.limitReached = true;
                            } else {
                                this.limitReached = false;
                            }
                            RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i5);
                            if (findViewHolderForAdapterPosition != null) {
                                View view = findViewHolderForAdapterPosition.itemView;
                                if (view instanceof ChatMessageCell) {
                                    ChatActivity.this.processRowSelect(view, false, f, f2);
                                    return;
                                }
                            }
                            ChatActivity.this.addToSelectedMessages(messageObject2, false);
                            ChatActivity.this.updateActionModeTitle();
                            ChatActivity.this.updateVisibleRows();
                        }
                    }
                }

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public boolean canSelect(int i5) {
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                        return false;
                    }
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                    if (messageObject2.contentType == 0) {
                        if (z || sparseArray.get(messageObject2.getId(), null) != null) {
                            return z && sparseArray.get(messageObject2.getId(), null) != null;
                        }
                        return true;
                    }
                    return false;
                }

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public int checkPosition(int i5, boolean z2) {
                    MessageObject.GroupedMessages groupedMessages;
                    int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                    if (i6 >= 0 && i6 < ChatActivity.this.messages.size()) {
                        MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                        if (messageObject2.contentType == 0 && messageObject2.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject2.getGroupId())) != null) {
                            ArrayList<MessageObject> arrayList = groupedMessages.messages;
                            return ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(arrayList.get(z2 ? 0 : arrayList.size() - 1));
                        }
                    }
                    return i5;
                }

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public boolean limitReached() {
                    return this.limitReached;
                }

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public void getPaddings(int[] iArr) {
                    ChatActivity chatActivity = ChatActivity.this;
                    iArr[0] = (int) chatActivity.chatListViewPaddingTop;
                    iArr[1] = chatActivity.blurredViewBottomOffset;
                }

                @Override // org.telegram.p043ui.Components.RecyclerListView.onMultiSelectionChanged
                public void scrollBy(int i5) {
                    ChatActivity.this.chatListView.scrollBy(0, i5);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$17 */
    /* loaded from: classes5.dex */
    public class C420717 implements RecyclerListView.OnItemClickListenerExtended {
        C420717() {
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onItemClick(View view, int i, float f, float f2) {
            ChatMessageCell chatMessageCell;
            MessageObject messageObject;
            if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                return;
            }
            ChatActivity.this.wasManualScroll = true;
            boolean z = view instanceof ChatActionCell;
            boolean z2 = false;
            if (z) {
                ChatActionCell chatActionCell = (ChatActionCell) view;
                if (chatActionCell.getMessageObject().isDateObject && !ChatActivity.this.isForwardingEditor()) {
                    if (ChatActivity.this.isInsideContainer) {
                        return;
                    }
                    Bundle bundle = new Bundle();
                    int i2 = chatActionCell.getMessageObject().messageOwner.date;
                    bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                    bundle.putLong("topic_id", ChatActivity.this.getTopicId());
                    bundle.putInt(SessionDescription.ATTR_TYPE, 0);
                    ChatActivity.this.presentFragment(new CalendarActivity(bundle, 0, i2));
                    return;
                }
            }
            if (z) {
                ChatActionCell chatActionCell2 = (ChatActionCell) view;
                if (chatActionCell2.getMessageObject() != null && (chatActionCell2.getMessageObject().messageOwner.action instanceof TLRPC$TL_messageActionSetSameChatWallPaper)) {
                    final int replyMsgId = chatActionCell2.getMessageObject().getReplyMsgId();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.C420717.this.lambda$onItemClick$0(replyMsgId);
                        }
                    }, 16L);
                    return;
                }
            }
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) view;
                    if (ChatActivity.this.textSelectionHelper.isSelected(chatMessageCell2.getMessageObject())) {
                        return;
                    }
                    z2 = !chatMessageCell2.isInsideBackground(f, f2);
                }
                ChatActivity.this.processRowSelect(view, z2, f, f2);
            } else if (!(view instanceof ChatMessageCell) || (messageObject = (chatMessageCell = (ChatMessageCell) view).getMessageObject()) == null || messageObject.type != 27) {
                ChatActivity.this.createMenu(view, true, false, f, f2);
            } else {
                messageObject.toggleChannelRecommendations();
                messageObject.forceUpdate = true;
                chatMessageCell.forceResetMessageObject();
                view.requestLayout();
                if (i >= 0) {
                    ChatActivity.this.chatAdapter.notifyItemChanged(i);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemClickListenerExtended
        public boolean hasDoubleTap(View view, int i) {
            TLRPC$ChatFull tLRPC$ChatFull;
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
            if (tLRPC$TL_availableReaction != null || (doubleTapReaction != null && doubleTapReaction.startsWith("animated_"))) {
                boolean z = ChatActivity.this.dialog_id >= 0;
                if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                    if (tLRPC$TL_availableReaction != null) {
                        doubleTapReaction = tLRPC$TL_availableReaction.reaction;
                    }
                    z = ChatObject.reactionIsAvailable(tLRPC$ChatFull, doubleTapReaction);
                }
                if (z && (view instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                    return (chatMessageCell.getMessageObject().isSending() || chatMessageCell.getMessageObject().isEditing() || chatMessageCell.getMessageObject().type == 16 || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || chatMessageCell.getMessageObject().isSponsored()) ? false : true;
                }
                return false;
            }
            return false;
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onDoubleTap(View view, int i, float f, float f2) {
            boolean z;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$ChatFull tLRPC$ChatFull2;
            if (!(view instanceof ChatMessageCell) || ChatActivity.this.getParentActivity() == null || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || ChatActivity.this.isInPreviewMode()) {
                return;
            }
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
            if (primaryMessageObject.isSecretMedia() || primaryMessageObject.isExpiredStory() || primaryMessageObject.type == 27) {
                return;
            }
            ReactionsEffectOverlay.removeCurrent(false);
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            if (doubleTapReaction == null) {
                return;
            }
            if (doubleTapReaction.startsWith("animated_")) {
                z = ChatActivity.this.dialog_id >= 0;
                if (!z && (tLRPC$ChatFull2 = ChatActivity.this.chatInfo) != null) {
                    z = ChatObject.reactionIsAvailable(tLRPC$ChatFull2, doubleTapReaction);
                }
                if (z) {
                    ChatActivity.this.selectReaction(primaryMessageObject, null, null, f, f2, ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(doubleTapReaction), true, false, false);
                    return;
                }
                return;
            }
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
            if (tLRPC$TL_availableReaction == null || chatMessageCell.getMessageObject().isSponsored()) {
                return;
            }
            z = ChatActivity.this.dialog_id >= 0;
            if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                z = ChatObject.reactionIsAvailable(tLRPC$ChatFull, tLRPC$TL_availableReaction.reaction);
            }
            if (z) {
                ChatActivity.this.selectReaction(primaryMessageObject, null, null, f, f2, ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(tLRPC$TL_availableReaction), true, false, false);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate */
    /* loaded from: classes5.dex */
    public class ChatActivityEnterViewDelegate implements ChatActivityEnterView.ChatActivityEnterViewDelegate {
        boolean isEditTextItemVisibilitySuppressed;
        int lastSize;

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public /* synthetic */ TL_stories$StoryItem getReplyToStory() {
            return ChatActivityEnterView.ChatActivityEnterViewDelegate.CC.$default$getReplyToStory(this);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public /* synthetic */ void needStartRecordVideo(int i, boolean z, int i2, int i3) {
            ChatActivityEnterView.ChatActivityEnterViewDelegate.CC.$default$needStartRecordVideo(this, i, z, i2, i3);
        }

        private ChatActivityEnterViewDelegate() {
        }

        /* synthetic */ ChatActivityEnterViewDelegate(ChatActivity chatActivity, C41961 c41961) {
            this();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openReaction() {
            if (ReactionHelper.checkReactionWork(((BaseFragment) ChatActivity.this).currentAccount)) {
                ReactionHelper.showReactionActivationAlert(ChatActivity.this);
                return;
            }
            CharSequence fieldText = ChatActivity.this.chatActivityEnterView.getFieldText();
            ChatActivity.this.presentFragmentAfterCloseKeyboard(new CreateReactionButtonsActivity(ChatActivity.this.dialog_id, fieldText == null ? "" : fieldText.toString(), null, null, ChatActivity.this.replyingMessageObject, new CreateReactionButtonsActivity.ReactionDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda2
                @Override // com.iMe.fork.p023ui.fragment.CreateReactionButtonsActivity.ReactionDelegate
                public final void clearChat() {
                    ChatActivity.ChatActivityEnterViewDelegate.this.lambda$openReaction$0();
                }
            }));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$openReaction$0() {
            ChatActivity.this.chatActivityEnterView.setFieldText("");
            ChatActivity.this.afterMessageSend();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void sendEditedSticker(SendMessagesHelper.SendingMediaInfo sendingMediaInfo, boolean z, int i, String str) {
            SendMessagesHelper.prepareSendingPhoto(ChatActivity.this.getAccountInstance(), sendingMediaInfo.path, sendingMediaInfo.thumbPath, null, ChatActivity.this.getDialogId(), ChatActivity.this.getReplyMessage(), ChatActivity.this.getThreadMessage(), null, null, sendingMediaInfo.entities, new ArrayList(), null, sendingMediaInfo.ttl, ChatActivity.this.editingMessageObject, sendingMediaInfo.videoEditedInfo, z, i, false, "", str);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTopViewFullyShown() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.forwardingPreviewView != null) {
                chatActivity.showForwardSettingsHint(true);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean z, int i, boolean z2, String str) {
            ChatActivity.this.sendMedia(photoEntry, videoEditedInfo, z, i, z2, str);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int getContentViewHeight() {
            return ChatActivity.this.contentView.getHeight();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int measureKeyboardHeight() {
            return ChatActivity.this.contentView.measureKeyboardHeight();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public TLRPC$TL_channels_sendAsPeers getSendAsPeers() {
            return ChatActivity.this.sendAsPeersObj;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageSend(CharSequence charSequence, boolean z, int i, String str) {
            MessagePreviewParams messagePreviewParams;
            MessagePreviewParams.Messages messages;
            TLRPC$Message tLRPC$Message;
            MessagePreviewParams.Messages messages2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().addHashtagsFromMessage(charSequence);
            }
            boolean z2 = false;
            if (i != 0) {
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                if (charSequence != null) {
                    ChatActivity.access$5308(ChatActivity.this);
                }
                MessagePreviewParams messagePreviewParams2 = ChatActivity.this.messagePreviewParams;
                if (messagePreviewParams2 != null && (messages2 = messagePreviewParams2.forwardMessages) != null && !messages2.messages.isEmpty()) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivity.access$5312(chatActivity2, chatActivity2.messagePreviewParams.forwardMessages.messages.size());
                }
                ChatActivity.this.updateScheduledInterface(false);
            }
            if (!TextUtils.isEmpty(charSequence) && (messagePreviewParams = ChatActivity.this.messagePreviewParams) != null && (messages = messagePreviewParams.forwardMessages) != null && !messages.messages.isEmpty() && ChatActivity.this.messagePreviewParams.quote == null) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                ChatActivity.this.messagePreviewParams.forwardMessages.getSelectedMessages(arrayList);
                boolean z3 = arrayList.size() > 0;
                TLRPC$Peer peer = ChatActivity.this.getMessagesController().getPeer(ChatActivity.this.dialog_id);
                int i2 = 0;
                while (true) {
                    if (i2 >= arrayList.size()) {
                        z2 = z3;
                        break;
                    }
                    MessageObject messageObject = arrayList.get(i2);
                    if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && !MessageObject.peersEqual(tLRPC$Message.peer_id, peer)) {
                        break;
                    }
                    i2++;
                }
                if (z2) {
                    Bulletin createSimpleBulletin = BulletinFactory.m65of(ChatActivity.this).createSimpleBulletin(C3632R.raw.hint_swipe_reply, LocaleController.getString(C3632R.string.SwipeToReplyHint), LocaleController.getString(C3632R.string.SwipeToReplyHintMessage));
                    RLottieImageView rLottieImageView = ((Bulletin.TwoLineLottieLayout) createSimpleBulletin.getLayout()).imageView;
                    rLottieImageView.setScaleX(1.8f);
                    rLottieImageView.setScaleY(1.8f);
                    createSimpleBulletin.show(true);
                }
            }
            if (ChatObject.isForum(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity3 = ChatActivity.this;
                if (!chatActivity3.isTopic && chatActivity3.replyingMessageObject != null) {
                    long topicId = ChatActivity.this.replyingMessageObject.replyToForumTopic != null ? ChatActivity.this.replyingMessageObject.replyToForumTopic.f1658id : MessageObject.getTopicId(((BaseFragment) ChatActivity.this).currentAccount, ChatActivity.this.replyingMessageObject.messageOwner, true);
                    if (topicId != 0) {
                        ChatActivity.this.getMediaDataController().cleanDraft(ChatActivity.this.dialog_id, topicId, false);
                    }
                }
            }
            if (ChatActivity.this.messagePreviewParams != null && SharedConfig.forwardingOptionsHintShown && !SharedConfig.hasPreferenceKey(TelegramPreferenceKeys.Global.isOpenForwardingOptionsAutomaticallyEnabled())) {
                ChatActivity chatActivity4 = ChatActivity.this;
                AlertsCreator.showConfirmationDialog(chatActivity4, chatActivity4.getParentActivity(), null, LocaleController.getInternalString(C3632R.string.auto_open_forwarding_options_alert_message), LocaleController.getString("OK", C3632R.string.OK), false, ChatActivity.this.themeDelegate, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda3
                    @Override // com.iMe.fork.utils.Callbacks$Callback1
                    public final void invoke(Object obj) {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onMessageSend$1((Boolean) obj);
                    }
                });
            }
            ChatActivity.this.hideFieldPanel(z, i, true);
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.getEmojiView() != null) {
                ChatActivity.this.chatActivityEnterView.getEmojiView().onMessageSend();
            }
            if (ChatActivity.this.getMessagesController().premiumFeaturesBlocked() || ChatActivity.this.getMessagesController().transcribeAudioTrialWeeklyNumber > 0 || ChatActivity.this.getMessagesController().didPressTranscribeButtonEnough() || ChatActivity.this.getUserConfig().isPremium() || TextUtils.isEmpty(charSequence) || ChatActivity.this.messages == null) {
                return;
            }
            for (int i3 = 1; i3 < Math.min(5, ChatActivity.this.messages.size()); i3++) {
                MessageObject messageObject2 = ChatActivity.this.messages.get(i3);
                if (messageObject2 != null && !messageObject2.isOutOwner() && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && messageObject2.isContentUnread())) {
                    TranscribeButton.showOffTranscribe(messageObject2);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMessageSend$1(Boolean bool) {
            SharedConfig.setOpenForwardingOptionsAutomaticallyEnabled(bool.booleanValue());
            ChatActivity.this.getUndoView().showInfo(LocaleController.getInternalString(C3632R.string.auto_open_forwarding_options_hint));
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onEditTextScroll() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuOpen() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuClose() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.fireUpdate();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSwitchRecordMode(boolean z) {
            ChatActivity.this.showVoiceHint(false, z);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onUpdateSlowModeButton(View view, boolean z, CharSequence charSequence) {
            ChatActivity.this.showSlowModeHint(view, z, charSequence);
            if (ChatActivity.this.headerItem == null || ChatActivity.this.headerItem.getVisibility() == 0) {
                return;
            }
            ChatActivity.this.headerItem.setVisibility(0);
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSelectionChanged(int i, int i2) {
            if (ChatActivity.this.editTextItem == null) {
                return;
            }
            final ActionBarMenu createMenu = ((BaseFragment) ChatActivity.this).actionBar.createMenu();
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.onTextSelectionChanged(i, i2);
            }
            boolean z = true;
            if (i2 - i > 0) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.chatActivityEnterView == null || chatActivity.getFormattingTextController().getFormattingPanelType() == FormattingPanelType.DEFAULT) {
                    if (ChatActivity.this.editTextItem.getTag() == null) {
                        ChatActivity.this.editTextItem.setTag(1);
                        if (ChatActivity.this.editTextItem.getVisibility() != 0) {
                            if ((ChatActivity.this.chatMode == 3 && ChatActivity.this.getSavedDialogId() == ChatActivity.this.getUserConfig().getClientUserId()) || (ChatActivity.this.chatMode == 0 && ((ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0 && !ChatActivity.this.isTemplatesChannel(true, false)))) {
                                ChatActivity.this.editTextItem.setVisibility(0);
                                ChatActivity.this.checkEditTextItemMenu();
                                ChatActivity.this.headerItem.setVisibility(8);
                                ChatActivity.this.attachItem.setVisibility(8);
                            } else {
                                ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.m107dp(48), BitmapDescriptorFactory.HUE_RED);
                                ofFloat.setDuration(220L);
                                ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                                ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.1
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationStart(Animator animator) {
                                        ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                                        ChatActivity.this.checkEditTextItemMenu();
                                        ChatActivity.this.editTextItem.setVisibility(0);
                                        createMenu.translateXItems(AndroidUtilities.m107dp(48));
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                                    }
                                });
                                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda0
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$2(ActionBarMenu.this, valueAnimator);
                                    }
                                });
                                ofFloat.start();
                            }
                        }
                    }
                } else {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivityEnterView chatActivityEnterView = chatActivity2.chatActivityEnterView;
                    if (chatActivity2.getFormattingTextController().getFormattingPanelType() == FormattingPanelType.ALTERNATIVE_WEB && ChatActivity.this.chatActivityEnterView.getFormattingMessagesContainerWebVisible()) {
                        z = false;
                    }
                    chatActivityEnterView.setShowFormattingButton(z);
                }
                ChatActivity.this.editTextStart = i;
                ChatActivity.this.editTextEnd = i2;
                return;
            }
            ChatActivity chatActivity3 = ChatActivity.this;
            if (chatActivity3.chatActivityEnterView == null || chatActivity3.getFormattingTextController().getFormattingPanelType() == FormattingPanelType.DEFAULT) {
                if (ChatActivity.this.editTextItem.getTag() != null) {
                    ChatActivity.this.editTextItem.setTag(null);
                    if (ChatActivity.this.editTextItem.getVisibility() != 8) {
                        if ((ChatActivity.this.chatMode == 3 && ChatActivity.this.getSavedDialogId() == ChatActivity.this.getUserConfig().getClientUserId()) || (ChatActivity.this.chatMode == 0 && ((ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0 && !ChatActivity.this.isTemplatesChannel(true, false)))) {
                            ChatActivity.this.editTextItem.setVisibility(8);
                            if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                                ChatActivity.this.headerItem.setVisibility(0);
                                ChatActivity.this.attachItem.setVisibility(8);
                                return;
                            }
                            ChatActivity.this.headerItem.setVisibility(8);
                            ChatActivity.this.attachItem.setVisibility(0);
                            return;
                        }
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, AndroidUtilities.m107dp(48));
                        ofFloat2.setDuration(220L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ofFloat2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationStart(Animator animator) {
                                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                                ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = true;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                ChatActivity.this.editTextItem.setVisibility(8);
                                createMenu.translateXItems(BitmapDescriptorFactory.HUE_RED);
                                ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                                ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = false;
                            }
                        });
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda1
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$3(ActionBarMenu.this, valueAnimator);
                            }
                        });
                        ofFloat2.start();
                    }
                }
            } else if (ChatActivity.this.isKeyboardVisible()) {
                ChatActivity.this.chatActivityEnterView.setShowFormattingButton(false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$2(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$3(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextChanged(final CharSequence charSequence, boolean z, boolean z2) {
            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(charSequence) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(charSequence, ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false, false);
            }
            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }
            TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
            if ((tLRPC$Chat == null || ChatObject.canSendEmbed(tLRPC$Chat)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled() && (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption())) {
                if (z) {
                    ChatActivity.this.searchLinks(charSequence, true);
                } else {
                    ChatActivity.this.checkEditLinkRemoved(charSequence);
                    ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.3
                        @Override // java.lang.Runnable
                        public void run() {
                            if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                ChatActivity.this.searchLinks(charSequence, false);
                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                            }
                        }
                    };
                    AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? C0483C.DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS : 1000L);
                }
            }
            EmojiAnimationsOverlay emojiAnimationsOverlay = ChatActivity.this.emojiAnimationsOverlay;
            if (emojiAnimationsOverlay != null) {
                emojiAnimationsOverlay.cancelAllAnimations();
            }
            ReactionsEffectOverlay.dismissAll();
            if (z2) {
                return;
            }
            if ((ChatActivity.this.scheduledOrNoSoundHint == null || ChatActivity.this.scheduledOrNoSoundHint.getVisibility() != 0) && (ChatActivity.this.scheduledHint == null || ChatActivity.this.scheduledHint.getVisibility() != 0)) {
                ChatActivity.this.showScheduledHint();
            } else {
                ChatActivity.this.hideSendButtonHints();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSpansChanged(CharSequence charSequence) {
            ChatActivity.this.searchLinks(charSequence, true);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needSendTyping() {
            ChatActivity.this.getMessagesController().sendTyping(ChatActivity.this.dialog_id, ChatActivity.this.threadMessageId, 0, ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonHidden() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonShow() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.headerItem != null) {
                ChatActivity.this.headerItem.setVisibility(0);
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageEditEnd(boolean z) {
            boolean z2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (z) {
                return;
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null) {
                mentionsContainerView.getAdapter().setNeedBotContext(true);
            }
            if (ChatActivity.this.editingMessageObject != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onMessageEditEnd$4();
                    }
                }, 30L);
            }
            if (ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                ChatActivity.this.chatActivityEnterView.setFieldFocused();
                z2 = true;
            } else {
                z2 = false;
            }
            ChatActivity.this.chatActivityEnterView.setAllowStickersAndGifs(true, true, true, z2);
            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                ChatActivity.this.getConnectionsManager().cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                ChatActivity.this.editingMessageObjectReqId = 0;
            }
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.lambda$didReceivedNotification$183();
            ChatActivity.this.updateVisibleRows();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMessageEditEnd$4() {
            ChatActivity.this.hideFieldPanel(true);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onWindowSizeChanged(int i) {
            if (i < AndroidUtilities.m107dp(72) + C3704ActionBar.getCurrentActionBarHeight()) {
                ChatActivity.this.allowStickersPanel = false;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 0) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(4);
                }
            } else {
                ChatActivity.this.allowStickersPanel = true;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 4) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                }
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.allowContextBotPanel = !chatActivity.chatActivityEnterView.isPopupShowing();
            int i2 = i + (ChatActivity.this.chatActivityEnterView.isPopupShowing() ? 65536 : 0);
            if (this.lastSize != i2) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
            }
            this.lastSize = i2;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersTab(boolean z) {
            if (ChatActivity.this.emojiButtonRed != null) {
                ChatActivity.this.emojiButtonRed.setVisibility(8);
            }
            ChatActivity.this.allowContextBotPanelSecond = !z;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void didPressAttachButton() {
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void toggleVideoRecordingPause() {
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.togglePause();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordVideo(int i, boolean z, int i2, int i3, boolean z2) {
            ChatActivity.this.checkInstantCameraView();
            if (ChatActivity.this.instantCameraView != null) {
                if (i == 0) {
                    ChatActivity.this.instantCameraView.showCamera(false, z2);
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatAdapter.updateRowsSafe();
                } else if (i == 1 || i == 3 || i == 4) {
                    ChatActivity.this.instantCameraView.send(i, z, i2, i3);
                } else if (i == 2 || i == 5) {
                    ChatActivity.this.instantCameraView.cancel(i == 2);
                }
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needChangeVideoPreviewState(int i, float f) {
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.changeVideoPreviewState(i, f);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordAudio(int i) {
            int i2 = i == 0 ? 8 : 0;
            if (ChatActivity.this.overlayView.getVisibility() != i2) {
                ChatActivity.this.overlayView.setVisibility(i2);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
            if (ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                if (Bulletin.getVisibleBulletin() != null && Bulletin.getVisibleBulletin().isShowing()) {
                    Bulletin.getVisibleBulletin().hide();
                }
            } else {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            float f = BitmapDescriptorFactory.HUE_RED;
            if (mentionsContainerView != null) {
                mentionsContainerView.animate().alpha(ChatActivity.this.chatActivityEnterView.isStickersExpanded() ? 0.0f : 1.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
            }
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                ViewPropertyAnimator animate = ChatActivity.this.suggestEmojiPanel.animate();
                if (!ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                    f = 1.0f;
                }
                animate.alpha(f).setInterpolator(CubicBezierInterpolator.DEFAULT).withEndAction(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onStickersExpandedChange$5();
                    }
                }).start();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onStickersExpandedChange$5() {
            if (ChatActivity.this.suggestEmojiPanel == null || !ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                return;
            }
            ChatActivity.this.suggestEmojiPanel.setVisibility(8);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void scrollToSendingMessage() {
            int sendingMessageId = ChatActivity.this.getSendMessagesHelper().getSendingMessageId(ChatActivity.this.dialog_id);
            if (sendingMessageId != 0) {
                ChatActivity.this.scrollToMessageId(sendingMessageId, 0, true, 0, true, 0);
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasScheduledMessages() {
            return (!ChatActivity.this.getMessagesController().isForum(ChatActivity.this.getDialogId()) || ChatActivity.this.isTopic) && ChatActivity.this.scheduledMessagesCount > 0 && ChatActivity.this.chatMode == 0;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSendLongClick() {
            if (ChatActivity.this.scheduledOrNoSoundHint != null) {
                ChatActivity.this.scheduledOrNoSoundHint.hide();
            }
            if (ChatActivity.this.scheduledHint != null) {
                ChatActivity.this.scheduledHint.hide();
            }
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openScheduledMessages() {
            ChatActivity.this.openScheduledMessages();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAudioVideoInterfaceUpdated() {
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void bottomPanelTranslationYChanged(float f) {
            if (ChatActivity.this.getFormattingTextController().getFormattingPanelType() == FormattingPanelType.ALTERNATIVE_WEB) {
                if (ChatActivity.this.chatActivityEnterView.getFormattingMessagesContainerWebVisible()) {
                    if (ChatActivity.this.formattingMessagesWeb == null || ChatActivity.this.formattingMessagesWeb.getVisibility() != 8) {
                        ChatActivity.this.formattingMessagesWeb.setTranslationY(f);
                        f -= AndroidUtilities.m107dp(60);
                    } else {
                        ChatActivity.this.formattingMessagesWeb.setVisibility(0);
                        ChatActivity.this.formattingMessagesWeb.setEnabledView(true);
                        ChatActivity.this.formattingMessagesWeb.updateColors();
                    }
                } else {
                    ChatActivity.this.formattingMessagesWeb.setVisibility(8);
                }
            }
            float f2 = BitmapDescriptorFactory.HUE_RED;
            if (f != BitmapDescriptorFactory.HUE_RED) {
                ChatActivity.this.wasManualScroll = true;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.bottomPanelTranslationY = chatActivity.chatActivityEnterView.panelAnimationInProgress() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() - f : 0.0f;
            ChatActivity chatActivity2 = ChatActivity.this;
            if (chatActivity2.chatActivityEnterView.panelAnimationInProgress()) {
                f2 = f;
            }
            chatActivity2.bottomPanelTranslationYReverse = f2;
            ChatActivity.this.chatActivityEnterView.setTranslationY(f);
            ChatActivity.this.mentionContainer.setTranslationY(f);
            ChatActivity chatActivity3 = ChatActivity.this;
            chatActivity3.contentView.setEmojiOffset(chatActivity3.chatActivityEnterView.panelAnimationInProgress(), ChatActivity.this.bottomPanelTranslationY);
            float topViewTranslation = f + ChatActivity.this.chatActivityEnterView.getTopViewTranslation();
            ChatActivity.this.mentionContainer.setTranslationY(topViewTranslation);
            ChatActivity.this.chatListView.setTranslationY(topViewTranslation);
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.updateBulletinLayout();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void prepareMessageSending() {
            ChatActivity.this.waitingForSendingMessageLoad = true;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTrendingStickersShowed(boolean z) {
            if (z) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ChatActivity.this.fragmentView.requestLayout();
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasForwardingMessages() {
            MessagePreviewParams.Messages messages;
            MessagePreviewParams messagePreviewParams = ChatActivity.this.messagePreviewParams;
            return (messagePreviewParams == null || (messages = messagePreviewParams.forwardMessages) == null || messages.messages.isEmpty()) ? false : true;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onKeyboardRequested() {
            ChatActivity.this.checkAdjustResize();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean onceVoiceAvailable() {
            TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
            if (tLRPC$User != null && !UserObject.isUserSelf(tLRPC$User)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.currentUser.bot && chatActivity.currentEncryptedChat == null && chatActivity.chatMode == 0) {
                    return true;
                }
            }
            return false;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public ReplyQuote getReplyQuote() {
            return ChatActivity.this.replyingQuote;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$39() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField() == null || this.chatActivityEnterView.getEditField().getText().length() < 5) {
            return;
        }
        SharedConfig.increaseScheduledOrNoSoundHintShowed();
        if (this.scheduledOrNoSoundHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledOrNoSoundHint = hintView;
            hintView.createCloseButton();
            this.scheduledOrNoSoundHint.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.scheduledOrNoSoundHint.setVisibility(4);
            this.scheduledOrNoSoundHint.setText(LocaleController.getString("ScheduledOrNoSoundHint", C3632R.string.ScheduledOrNoSoundHint));
            this.contentView.addView(this.scheduledOrNoSoundHint, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 10, 0));
        }
        this.scheduledOrNoSoundHint.showForView(sendButton, true);
        this.scheduledOrNoSoundHintShown = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$40() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || this.forwardingPreviewView != null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField() == null || this.chatActivityEnterView.getEditField().getText().length() == 0) {
            return;
        }
        SharedConfig.increaseScheduledHintShowed();
        if (this.scheduledHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledHint = hintView;
            hintView.createCloseButton();
            this.scheduledHint.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.scheduledHint.setVisibility(4);
            this.scheduledHint.setText(LocaleController.getString("ScheduledHint", C3632R.string.ScheduledHint));
            this.contentView.addView(this.scheduledHint, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 10, 0));
        }
        this.scheduledHint.showForView(sendButton, true);
        this.scheduledHintShown = true;
    }

    public ChatActivity(Bundle bundle) {
        super(bundle);
        this.walletFlowCoordinator = KoinJavaComponent.inject(WalletFlowCoordinator.class);
        this.lastMultiPanelButtons = new ArrayList();
        this.ignoreChatStartMessagesLoading = true;
        this.isNeedHideKeyboardOnOpenSearchUserMessages = true;
        this.multipleFilesSendingUris = new ArrayList<>();
        this.menuItemsGroups = new SparseArray<>();
        this.savingMessageObject = null;
        this.savingDocument = null;
        this.savingFileCustomName = "";
        this.templatesDelegate = new C41961();
        this.shareAlertDebugMode = 0;
        this.justCreatedTopic = false;
        this.justCreatedChat = false;
        this.chatMessageCellsCache = new ArrayList<>();
        this.alreadyPlayedStickers = new HashMap<>();
        this.actionModeViews = new ArrayList<>();
        this.pinnedMessageImageView = new BackupImageView[2];
        this.pinnedNameTextView = new TrackingWidthSimpleTextView[2];
        this.pinnedMessageTextView = new SimpleTextView[2];
        this.pinnedMessageButton = new PinnedMessageButton[2];
        this.pinnedNextAnimation = new AnimatorSet[2];
        this.pinnedMessageButtonShown = false;
        this.hideDateDelay = 500;
        this.scheduledMessagesCount = -1;
        this.reportType = -1;
        this.threadMessageVisible = true;
        this.pendingSendMessagesDict = new SparseArray<>();
        this.pendingSendMessages = new ArrayList<>();
        this.animatingMessageObjects = new ArrayList<>();
        this.animatingDocuments = new HashMap<>();
        this.scrollToPositionOnRecreate = -1;
        this.scrollToOffsetOnRecreate = 0;
        this.pollsToCheck = new ArrayList<>(10);
        this.pinnedMessageIds = new ArrayList<>();
        this.pinnedMessageObjects = new HashMap<>();
        this.loadingPinnedMessages = new SparseArray<>();
        this.currentPinnedMessageIndex = new int[1];
        this.dateObjectsStableIds = new SparseIntArray();
        this.allowContextBotPanelSecond = true;
        this.paused = true;
        this.firstOpen = true;
        this.lastLoadIndex = 1;
        this.selectedMessagesIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.selectedMessagesCanStarIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.waitingForLoad = new ArrayList<>();
        this.needRemovePreviousSameChatActivity = true;
        this.prevSetUnreadCount = Integer.MIN_VALUE;
        this.animateSendingViews = new ArrayList<>();
        this.messagesDict = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.repliesMessagesDict = new SparseArray<>();
        this.replyMessageOwners = new SparseArray<>();
        this.messagesByDays = new HashMap<>();
        this.messages = new ArrayList<>();
        this.waitingForReplies = new SparseArray<>();
        this.polls = new LongSparseArray<>();
        this.groupedMessagesMap = new LongSparseArray<>();
        this.maxMessageId = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
        this.minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.minDate = new int[2];
        this.endReached = new boolean[2];
        this.cacheEndReached = new boolean[2];
        this.forwardEndReached = new boolean[]{true, true};
        this.loading = true;
        this.firstLoading = true;
        this.last_message_id = 0;
        this.messageSkeletons = new ArrayList();
        this.skeletonPaint = new Paint(1);
        this.skeletonServicePaint = new Paint(1);
        this.skeletonColorMatrix = new ColorMatrix();
        this.skeletonBackgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.skeletonBackgroundDrawable = new Theme.MessageDrawable(0, false, false, new Theme.ResourcesProvider() { // from class: org.telegram.ui.ChatActivity.7
            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
                return Theme.ResourcesProvider.CC.$default$getAnimatedEmojiColorFilter(this);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getColorOrDefault(int i) {
                return getColor(i);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getCurrentColor(int i) {
                return getColor(i);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Drawable getDrawable(String str) {
                return Theme.ResourcesProvider.CC.$default$getDrawable(this, str);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Paint getPaint(String str) {
                return Theme.ResourcesProvider.CC.$default$getPaint(this, str);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ boolean hasGradientService() {
                return Theme.ResourcesProvider.CC.$default$hasGradientService(this);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ boolean isDark() {
                boolean isCurrentThemeDark;
                isCurrentThemeDark = Theme.isCurrentThemeDark();
                return isCurrentThemeDark;
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void setAnimatedColor(int i, int i2) {
                Theme.ResourcesProvider.CC.$default$setAnimatedColor(this, i, i2);
            }

            @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
            public int getColor(int i) {
                return ChatActivity.this.getThemedColor(i);
            }
        });
        this.skeletonMatrix = new Matrix();
        this.skeletonOutlinePaint = new Paint(1);
        this.skeletonOutlineMatrix = new Matrix();
        this.skeletonOutlinePaint.setStyle(Paint.Style.STROKE);
        this.skeletonOutlinePaint.setStrokeWidth(AndroidUtilities.m107dp(1));
        this.startLoadFromMessageOffset = Integer.MAX_VALUE;
        this.startFromVideoTimestamp = -1;
        this.first = true;
        this.highlightMessageId = Integer.MAX_VALUE;
        this.highlightMessageQuoteOffset = -1;
        this.scrollToMessagePosition = -10000;
        this.botInfo = new LongSparseArray<>();
        this.destroyTextureViewRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda212
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$32();
            }
        };
        this.actionBarBackgroundPaint = new Paint(1);
        this.scrimPaintAlpha = BitmapDescriptorFactory.HUE_RED;
        this.scrimViewAlpha = 1.0f;
        this.scrimPopupWindowHideDimOnDismiss = true;
        this.updateDeleteItemRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.8
            @Override // java.lang.Runnable
            public void run() {
                String formatPluralString;
                if (ChatActivity.this.selectedObject == null || ChatActivity.this.menuDeleteItem == null) {
                    return;
                }
                int max = Math.max(0, ChatActivity.this.selectedObject.messageOwner.ttl_period - (ChatActivity.this.getConnectionsManager().getCurrentTime() - ChatActivity.this.selectedObject.messageOwner.date));
                if (max < 86400) {
                    formatPluralString = AndroidUtilities.formatDuration(max, false);
                } else {
                    formatPluralString = LocaleController.formatPluralString("Days", Math.round(max / 86400.0f), new Object[0]);
                }
                ChatActivity.this.menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", C3632R.string.AutoDeleteIn, formatPluralString));
                AndroidUtilities.runOnUIThread(ChatActivity.this.updateDeleteItemRunnable, 1000L);
            }
        };
        this.swipeBackEnabled = true;
        this.fragmentTransitionRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.9
            @Override // java.lang.Runnable
            public void run() {
                if (ChatActivity.this.fragmentTransition == null || ChatActivity.this.fragmentTransition.isRunning()) {
                    return;
                }
                ChatActivity.this.fragmentTransition.start();
            }
        };
        this.chatMessagesMetadataController = new ChatMessagesMetadataController(this);
        this.postponedScrollCancelListener = new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda23
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$new$33(dialogInterface);
            }
        };
        this.postponeNotificationsWhileLoadingCallback = new NotificationCenter.PostponeNotificationCallback() { // from class: org.telegram.ui.ChatActivity.10
            @Override // org.telegram.messenger.NotificationCenter.PostponeNotificationCallback
            public boolean needPostpone(int i, int i2, Object[] objArr) {
                if (i == NotificationCenter.didReceiveNewMessages) {
                    long longValue = ((Long) objArr[0]).longValue();
                    if (ChatActivity.this.firstLoading && longValue == ChatActivity.this.dialog_id) {
                        return true;
                    }
                }
                return false;
            }
        };
        this.fixedKeyboardHeight = -1;
        this.photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.13
            @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                return ChatActivity.this.getPlaceForPhoto(messageObject, tLRPC$FileLocation, z, false);
            }
        };
        this.botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.14
            /* JADX WARN: Removed duplicated region for block: B:26:0x008f A[LOOP:0: B:12:0x0035->B:26:0x008f, LOOP_END] */
            /* JADX WARN: Removed duplicated region for block: B:29:0x0058 A[SYNTHETIC] */
            @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public org.telegram.p043ui.PhotoViewer.PlaceProviderObject getPlaceForPhoto(org.telegram.messenger.MessageObject r5, org.telegram.tgnet.TLRPC$FileLocation r6, int r7, boolean r8) {
                /*
                    r4 = this;
                    r5 = 0
                    if (r7 < 0) goto L92
                    org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                    java.util.ArrayList r6 = org.telegram.p043ui.ChatActivity.access$2500(r6)
                    int r6 = r6.size()
                    if (r7 >= r6) goto L92
                    org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.Components.MentionsContainerView r6 = r6.mentionContainer
                    if (r6 == 0) goto L92
                    org.telegram.ui.Components.MentionsContainerView$MentionsListView r6 = r6.getListView()
                    if (r6 != 0) goto L1d
                    goto L92
                L1d:
                    org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.Components.MentionsContainerView r6 = r6.mentionContainer
                    org.telegram.ui.Components.MentionsContainerView$MentionsListView r6 = r6.getListView()
                    int r6 = r6.getChildCount()
                    org.telegram.ui.ChatActivity r8 = org.telegram.p043ui.ChatActivity.this
                    java.util.ArrayList r8 = org.telegram.p043ui.ChatActivity.access$2500(r8)
                    java.lang.Object r7 = r8.get(r7)
                    r8 = 0
                    r0 = r8
                L35:
                    if (r0 >= r6) goto L92
                    org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.Components.MentionsContainerView r1 = r1.mentionContainer
                    org.telegram.ui.Components.MentionsContainerView$MentionsListView r1 = r1.getListView()
                    android.view.View r1 = r1.getChildAt(r0)
                    boolean r2 = r1 instanceof org.telegram.p043ui.Cells.ContextLinkCell
                    if (r2 == 0) goto L55
                    r2 = r1
                    org.telegram.ui.Cells.ContextLinkCell r2 = (org.telegram.p043ui.Cells.ContextLinkCell) r2
                    org.telegram.tgnet.TLRPC$BotInlineResult r3 = r2.getResult()
                    if (r3 != r7) goto L55
                    org.telegram.messenger.ImageReceiver r2 = r2.getPhotoImage()
                    goto L56
                L55:
                    r2 = r5
                L56:
                    if (r2 == 0) goto L8f
                    r5 = 2
                    int[] r5 = new int[r5]
                    r1.getLocationInWindow(r5)
                    org.telegram.ui.PhotoViewer$PlaceProviderObject r6 = new org.telegram.ui.PhotoViewer$PlaceProviderObject
                    r6.<init>()
                    r7 = r5[r8]
                    r6.viewX = r7
                    r7 = 1
                    r5 = r5[r7]
                    int r7 = android.os.Build.VERSION.SDK_INT
                    r0 = 21
                    if (r7 < r0) goto L71
                    goto L73
                L71:
                    int r8 = org.telegram.messenger.AndroidUtilities.statusBarHeight
                L73:
                    int r5 = r5 - r8
                    r6.viewY = r5
                    org.telegram.ui.ChatActivity r5 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.Components.MentionsContainerView r5 = r5.mentionContainer
                    org.telegram.ui.Components.MentionsContainerView$MentionsListView r5 = r5.getListView()
                    r6.parentView = r5
                    r6.imageReceiver = r2
                    org.telegram.messenger.ImageReceiver$BitmapHolder r5 = r2.getBitmapSafe()
                    r6.thumb = r5
                    int[] r5 = r2.getRoundRadius()
                    r6.radius = r5
                    return r6
                L8f:
                    int r0 = r0 + 1
                    goto L35
                L92:
                    return r5
                */
                throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.C420414.getPlaceForPhoto(org.telegram.messenger.MessageObject, org.telegram.tgnet.TLRPC$FileLocation, int, boolean):org.telegram.ui.PhotoViewer$PlaceProviderObject");
            }

            @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2, String str, boolean z3) {
                if (i < 0 || i >= ChatActivity.this.botContextResults.size()) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.lambda$createView$66((TLRPC$BotInlineResult) chatActivity.botContextResults.get(i), z, i2, str);
            }
        };
        this.onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() { // from class: org.telegram.ui.ChatActivity.15
            @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onLongClickRelease() {
                RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onLongClickRelease(this);
            }

            @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onMove(float f, float f2) {
                RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onMove(this, f, f2);
            }

            /* JADX WARN: Removed duplicated region for block: B:28:0x007a  */
            /* JADX WARN: Removed duplicated region for block: B:32:0x008d  */
            @Override // org.telegram.p043ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public boolean onItemClick(android.view.View r11, int r12, float r13, float r14) {
                /*
                    r10 = this;
                    org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.ChatActivity$ChatActivityTextSelectionHelper r0 = org.telegram.p043ui.ChatActivity.access$2700(r0)
                    boolean r0 = r0.isTryingSelect()
                    r1 = 0
                    if (r0 != 0) goto La7
                    org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.ChatActivity$ChatActivityTextSelectionHelper r0 = org.telegram.p043ui.ChatActivity.access$2700(r0)
                    boolean r0 = r0.isInSelectionMode()
                    if (r0 != 0) goto La7
                    org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                    boolean r0 = org.telegram.p043ui.ChatActivity.access$2800(r0)
                    if (r0 == 0) goto L23
                    goto La7
                L23:
                    org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                    r2 = 1
                    org.telegram.p043ui.ChatActivity.access$2902(r0, r2)
                    boolean r0 = r11 instanceof org.telegram.p043ui.Cells.ChatActionCell
                    if (r0 == 0) goto L53
                    r0 = r11
                    org.telegram.ui.Cells.ChatActionCell r0 = (org.telegram.p043ui.Cells.ChatActionCell) r0
                    org.telegram.messenger.MessageObject r3 = r0.getMessageObject()
                    org.telegram.tgnet.TLRPC$Message r3 = r3.messageOwner
                    org.telegram.tgnet.TLRPC$MessageAction r3 = r3.action
                    boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionSetMessagesTTL
                    if (r3 != 0) goto L53
                    org.telegram.messenger.MessageObject r3 = r0.getMessageObject()
                    int r3 = r3.type
                    r4 = 21
                    if (r3 == r4) goto L53
                    org.telegram.messenger.MessageObject r0 = r0.getMessageObject()
                    boolean r0 = r0.isWallpaperAction()
                    if (r0 == 0) goto L51
                    goto L53
                L51:
                    r0 = r1
                    goto L54
                L53:
                    r0 = r2
                L54:
                    org.telegram.ui.ChatActivity r3 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.ui.ActionBar.ActionBar r3 = org.telegram.p043ui.ChatActivity.access$3000(r3)
                    boolean r3 = r3.isActionModeShowed()
                    if (r3 != 0) goto L76
                    org.telegram.ui.ChatActivity r3 = org.telegram.p043ui.ChatActivity.this
                    int r3 = org.telegram.p043ui.ChatActivity.access$3100(r3)
                    if (r3 < 0) goto L6a
                    if (r0 == 0) goto L76
                L6a:
                    org.telegram.ui.ChatActivity r4 = org.telegram.p043ui.ChatActivity.this
                    r6 = 0
                    r7 = 1
                    r5 = r11
                    r8 = r13
                    r9 = r14
                    boolean r13 = org.telegram.p043ui.ChatActivity.access$3200(r4, r5, r6, r7, r8, r9)
                    goto L89
                L76:
                    boolean r0 = r11 instanceof org.telegram.p043ui.Cells.ChatMessageCell
                    if (r0 == 0) goto L83
                    r0 = r11
                    org.telegram.ui.Cells.ChatMessageCell r0 = (org.telegram.p043ui.Cells.ChatMessageCell) r0
                    boolean r0 = r0.isInsideBackground(r13, r14)
                    r1 = r0 ^ 1
                L83:
                    org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.p043ui.ChatActivity.access$3300(r0, r11, r1, r13, r14)
                    r13 = r2
                L89:
                    boolean r14 = r11 instanceof org.telegram.p043ui.Cells.ChatMessageCell
                    if (r14 == 0) goto La5
                    org.telegram.ui.Cells.ChatMessageCell r11 = (org.telegram.p043ui.Cells.ChatMessageCell) r11
                    org.telegram.messenger.MessageObject r14 = r11.getMessageObject()
                    if (r14 == 0) goto La5
                    org.telegram.messenger.MessageObject r11 = r11.getMessageObject()
                    int r11 = r11.type
                    r14 = 27
                    if (r11 == r14) goto La5
                    org.telegram.ui.ChatActivity r11 = org.telegram.p043ui.ChatActivity.this
                    org.telegram.p043ui.ChatActivity.access$3400(r11, r12)
                    goto La6
                La5:
                    r2 = r13
                La6:
                    return r2
                La7:
                    return r1
                */
                throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.C420515.onItemClick(android.view.View, int, float, float):boolean");
            }
        };
        this.onItemClickListener = new C420717();
        this.chatScrollHelperCallback = new ChatScrollCallback();
        this.showScheduledOrNoSoundRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda207
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$39();
            }
        };
        this.showScheduledHintRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda197
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$40();
            }
        };
        this.filledEditTextItemMenu = false;
        this.checkTranslationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda222
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$194();
            }
        };
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean onFragmentCreate() {
        char c;
        String str;
        int i;
        boolean z;
        TLRPC$Chat chat;
        final long j = this.arguments.getLong("chat_id", 0L);
        final long j2 = this.arguments.getLong("user_id", 0L);
        final int i2 = this.arguments.getInt("enc_id", 0);
        this.dialogFolderId = this.arguments.getInt("dialog_folder_id", 0);
        this.dialogFilterId = this.arguments.getInt("dialog_filter_id", 0);
        this.chatMode = this.arguments.getInt("chatMode", 0);
        this.voiceChatHash = this.arguments.getString("voicechat", null);
        this.livestream = !TextUtils.isEmpty(this.arguments.getString("livestream", null));
        this.attachMenuBotToOpen = this.arguments.getString("attach_bot", null);
        this.attachMenuBotStartCommand = this.arguments.getString("attach_bot_start_command", null);
        this.inlineReturn = this.arguments.getLong("inline_return", 0L);
        String string = this.arguments.getString("inline_query");
        this.inlineQueryForInput = this.arguments.getString("inline_query_input");
        this.premiumInvoiceBot = this.arguments.getBoolean("premium_bot", false);
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        this.startLoadFromDate = this.arguments.getInt("start_from_date", 0);
        this.startFromVideoTimestamp = this.arguments.getInt("video_timestamp", -1);
        this.threadUnreadMessagesCount = this.arguments.getInt("unread_count", 0);
        if (this.startFromVideoTimestamp >= 0) {
            this.startFromVideoMessageId = this.startLoadFromMessageId;
        }
        this.reportType = this.arguments.getInt("report", -1);
        this.arguments.getBoolean("pulled", false);
        this.historyPreloaded = this.arguments.getBoolean("historyPreloaded", false);
        int i3 = this.highlightMessageId;
        if (i3 != 0 && i3 != Integer.MAX_VALUE) {
            this.startLoadFromMessageId = i3;
        }
        this.migrated_to = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        this.needRemovePreviousSameChatActivity = this.arguments.getBoolean("need_remove_previous_same_chat_activity", true);
        this.justCreatedChat = this.arguments.getBoolean("just_created_chat", false);
        long j3 = -j;
        this.albumMode = getAlbumsController().isDialogAlbum(j3);
        this.cloudMode = j2 == getUserConfig().getClientUserId() && this.chatMode == 0;
        this.isFirstOpenAttachWallet = this.arguments.getBoolean("open_wallet", false);
        this.isNeedAutoActivateBot = this.arguments.getBoolean("auto_activate_bot", false);
        this.customScreenType = this.arguments.getInt("custom_screen_type", 0);
        this.isAuthorHiddenForce = this.arguments.getBoolean("force_hide_forward_author", false);
        if (j != 0) {
            TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(j));
            this.currentChat = chat2;
            if (chat2 == null) {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = getMessagesStorage();
                messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda266
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$41(messagesStorage, j, countDownLatch);
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Exception e) {
                    FileLog.m102e(e);
                }
                if (this.currentChat == null) {
                    return false;
                }
                getMessagesController().putChat(this.currentChat, true);
            }
            this.dialog_id = j3;
            if (ChatObject.isChannel(this.currentChat)) {
                if (ChatObject.isNotInChat(this.currentChat) && !isThreadChat() && !isInScheduleMode()) {
                    this.waitingForGetDifference = true;
                    getMessagesController().startShortPoll(this.currentChat, this.classGuid, false, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda137
                        @Override // androidx.core.util.Consumer
                        public final void accept(Object obj) {
                            ChatActivity.this.lambda$onFragmentCreate$42((Boolean) obj);
                        }
                    });
                } else {
                    getMessagesController().startShortPoll(this.currentChat, this.classGuid, false);
                }
            }
        } else if (j2 != 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
            this.currentUser = user;
            if (user == null) {
                final MessagesStorage messagesStorage2 = getMessagesStorage();
                final CountDownLatch countDownLatch2 = new CountDownLatch(1);
                str = string;
                messagesStorage2.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda265
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$43(messagesStorage2, j2, countDownLatch2);
                    }
                });
                try {
                    countDownLatch2.await();
                } catch (Exception e2) {
                    FileLog.m102e(e2);
                }
                if (this.currentUser == null) {
                    return false;
                }
                getMessagesController().putUser(this.currentUser, true);
            } else {
                str = string;
            }
            this.dialog_id = j2;
            String string2 = this.arguments.getString("botUser");
            this.botUser = string2;
            if (str != null) {
                getMessagesController().sendBotStart(this.currentUser, str);
            } else if (this.premiumInvoiceBot && !TextUtils.isEmpty(string2)) {
                getMessagesController().sendBotStart(this.currentUser, this.botUser);
                this.botUser = null;
                this.premiumInvoiceBot = false;
            }
        } else if (i2 == 0) {
            return false;
        } else {
            this.currentEncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(i2));
            final MessagesStorage messagesStorage3 = getMessagesStorage();
            if (this.currentEncryptedChat == null) {
                final CountDownLatch countDownLatch3 = new CountDownLatch(1);
                messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda264
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$44(messagesStorage3, i2, countDownLatch3);
                    }
                });
                try {
                    countDownLatch3.await();
                } catch (Exception e3) {
                    FileLog.m102e(e3);
                }
                if (this.currentEncryptedChat == null) {
                    return false;
                }
                getMessagesController().putEncryptedChat(this.currentEncryptedChat, true);
            }
            TLRPC$User user2 = getMessagesController().getUser(Long.valueOf(this.currentEncryptedChat.user_id));
            this.currentUser = user2;
            if (user2 == null) {
                final CountDownLatch countDownLatch4 = new CountDownLatch(1);
                messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda267
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$45(messagesStorage3, countDownLatch4);
                    }
                });
                try {
                    countDownLatch4.await();
                } catch (Exception e4) {
                    FileLog.m102e(e4);
                }
                if (this.currentUser == null) {
                    return false;
                }
                c = 1;
                getMessagesController().putUser(this.currentUser, true);
            } else {
                c = 1;
            }
            this.dialog_id = DialogObject.makeEncryptedDialogId(i2);
            int[] iArr = this.maxMessageId;
            iArr[c] = Integer.MIN_VALUE;
            iArr[0] = Integer.MIN_VALUE;
            int[] iArr2 = this.minMessageId;
            iArr2[c] = Integer.MAX_VALUE;
            iArr2[0] = Integer.MAX_VALUE;
        }
        TLObject tLObject = this.currentUser;
        if (tLObject == null) {
            tLObject = this.currentChat;
        }
        this.dialogType = DialogType.getDialogType(tLObject);
        TLObject tLObject2 = this.currentUser;
        if (tLObject2 == null) {
            tLObject2 = this.currentChat;
        }
        this.recentChatsDialogType = RecentChatsDialogType.getDialogType(tLObject2, this.dialog_id);
        this.dialogTranslationSettings = getDialogTranslationSettingsController().getSettings(this.dialog_id);
        this.dialog_id_Long = Long.valueOf(this.dialog_id);
        this.transitionAnimationGlobalIndex = NotificationCenter.getGlobalInstance().setAnimationInProgress(this.transitionAnimationGlobalIndex, new int[0]);
        if (this.currentUser != null && Build.VERSION.SDK_INT < 23) {
            MediaController.getInstance().startMediaObserver();
        }
        getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getNotificationCenter().addObservers(this, observers);
        if (this.chatMode != 1) {
            if (this.threadMessageId == 0) {
                getNotificationCenter().addObserver(this, NotificationCenter.screenshotTook);
                getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
                getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
                getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                getNotificationCenter().addObserver(this, NotificationCenter.commentsRead);
                getNotificationCenter().addObserver(this, NotificationCenter.changeRepliesCounter);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadChatInviter);
                getNotificationCenter().addObserver(this, NotificationCenter.groupCallUpdated);
            } else {
                getNotificationCenter().addObserver(this, NotificationCenter.threadMessagesRead);
                if (this.isTopic) {
                    getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                    getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                }
            }
            getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
            getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
            getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
            if (this.currentEncryptedChat != null) {
                getNotificationCenter().addObserver(this, NotificationCenter.didVerifyMessagesStickers);
            }
        }
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        if (this.chatMode != 2) {
            getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
        }
        if (this.chatMode == 0) {
            getNotificationCenter().addObserver(this, NotificationCenter.didLoadSponsoredMessages);
        }
        getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.topicsDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslating);
        getNotificationCenter().addObserver(this, NotificationCenter.onReceivedChannelDifference);
        getNotificationCenter().addObserver(this, NotificationCenter.storiesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRecommendationsLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.updateTranscriptionLock);
        getNotificationCenter().addObserver(this, NotificationCenter.savedMessagesDialogsUpdate);
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.attach();
        }
        super.onFragmentCreate();
        if (this.chatMode == 2) {
            ArrayList arrayList = new ArrayList();
            int size = this.pinnedMessageIds.size();
            for (int i4 = 0; i4 < size; i4++) {
                MessageObject messageObject = this.pinnedMessageObjects.get(this.pinnedMessageIds.get(i4));
                if (messageObject != null) {
                    MessageObject messageObject2 = new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, false);
                    if (isForwardingEditor()) {
                        TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
                        tLRPC$Message.flags &= -5;
                        messageObject2.isForwardingEditor = true;
                        tLRPC$Message.dialog_id = this.dialog_id;
                    } else {
                        messageObject2.isPinnedChat = true;
                    }
                    messageObject2.generateLayout(null);
                    messageObject2.replyMessageObject = messageObject.replyMessageObject;
                    messageObject2.mediaExists = messageObject.mediaExists;
                    messageObject2.attachPathExists = messageObject.attachPathExists;
                    arrayList.add(messageObject2);
                }
            }
            int i5 = this.lastLoadIndex;
            this.lastLoadIndex = i5 + 1;
            this.waitingForLoad.add(Integer.valueOf(i5));
            if (this.pinnedMessageIds.isEmpty()) {
                return false;
            }
            i = 10;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(this.dialog_id), Integer.valueOf(arrayList.size()), arrayList, Boolean.FALSE, 0, Integer.valueOf(this.last_message_id), 0, 0, 2, Boolean.TRUE, Integer.valueOf(this.classGuid), Integer.valueOf(i5), this.pinnedMessageIds.get(0), 0, 2);
            z = true;
        } else {
            i = 10;
            z = true;
            if (!this.forceHistoryEmpty) {
                this.loading = true;
            }
        }
        if (isThreadChat() && !this.isTopic) {
            if (this.highlightMessageId == this.startLoadFromMessageId) {
                this.needSelectFromMessageId = z;
            }
        } else {
            getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == z ? z : false, z);
            if (this.chatMode == 0) {
                if (this.currentEncryptedChat == null) {
                    getMediaDataController().loadBotKeyboard(MessagesStorage.TopicKey.m98of(this.dialog_id, getTopicId()));
                }
                getMessagesController().loadPeerSettings(this.currentUser, this.currentChat);
                if (this.startLoadFromMessageId == 0) {
                    SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                    int i6 = notificationsSettings.getInt("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), 0);
                    if (i6 != 0) {
                        this.wasManualScroll = true;
                        this.loadingFromOldPosition = true;
                        this.startLoadFromMessageOffset = notificationsSettings.getInt("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), 0);
                        this.startLoadFromMessageId = i6;
                    }
                } else {
                    this.showScrollToMessageError = true;
                    this.needSelectFromMessageId = true;
                }
            }
        }
        this.loadInfo = false;
        if (this.currentChat != null) {
            this.chatInfo = getMessagesController().getChatFull(this.currentChat.f1602id);
            this.groupCall = getMessagesController().getGroupCall(this.currentChat.f1602id, true);
            if (ChatObject.isChannel(this.currentChat) && !getMessagesController().isChannelAdminsLoaded(this.currentChat.f1602id)) {
                getMessagesController().loadChannelAdmins(this.currentChat.f1602id, true);
            }
            fillInviterId(false);
            if (this.chatMode != 2) {
                MessagesStorage messagesStorage4 = getMessagesStorage();
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                messagesStorage4.loadChatInfo(tLRPC$Chat.f1602id, ChatObject.isChannel(tLRPC$Chat), null, true, false, this.startLoadFromMessageId);
            }
            if (this.chatMode == 0 && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && this.chatInfo.migrated_from_chat_id != 0 && !isThreadChat()) {
                TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
                this.mergeDialogId = -tLRPC$ChatFull.migrated_from_chat_id;
                this.maxMessageId[1] = tLRPC$ChatFull.migrated_from_max_id;
            }
            this.loadInfo = this.chatInfo == null;
            checkGroupCallJoin(false);
        } else if (this.currentUser != null) {
            if (this.chatMode != 2) {
                getMessagesController().loadUserInfo(this.currentUser, true, this.classGuid, this.startLoadFromMessageId);
            }
            this.loadInfo = this.userInfo == null;
        }
        if (this.forceHistoryEmpty) {
            boolean[] zArr = this.endReached;
            zArr[1] = true;
            zArr[0] = true;
            boolean[] zArr2 = this.forwardEndReached;
            zArr2[1] = true;
            zArr2[0] = true;
            this.firstLoading = false;
            checkDispatchHideSkeletons(false);
        }
        if (this.chatMode != 2 && !this.forceHistoryEmpty) {
            if (SharedConfig.deviceIsHigh()) {
                this.initialMessagesSize = (!isThreadChat() || this.isTopic) ? 25 : 30;
            } else {
                this.initialMessagesSize = (!isThreadChat() || this.isTopic) ? 15 : 20;
            }
            if (!this.waitingForGetDifference) {
                firstLoadMessages();
            }
        }
        if (this.chatMode == 0) {
            if (j2 != 0 && this.currentUser.bot) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda247
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$46(j2);
                    }
                });
            } else if (this.chatInfo instanceof TLRPC$TL_chatFull) {
                for (int i7 = 0; i7 < this.chatInfo.participants.participants.size(); i7++) {
                    TLRPC$User user3 = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i7).user_id));
                    if (user3 != null && user3.bot) {
                        getMediaDataController().loadBotInfo(user3.f1751id, -this.chatInfo.f1603id, true, this.classGuid);
                    }
                }
            }
            if (AndroidUtilities.isTablet() && !this.isComments) {
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Long.valueOf(getTopicId()), Boolean.FALSE);
            }
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User != null && !UserObject.isReplyUser(tLRPC$User)) {
                this.userBlocked = getMessagesController().blockePeers.indexOfKey(this.currentUser.f1751id) >= 0;
            }
            TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
            if (tLRPC$EncryptedChat != null && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                getSecretChatHelper().sendNotifyLayerMessage(this.currentEncryptedChat, null);
            }
        }
        TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
        if (tLRPC$ChatFull2 != null && tLRPC$ChatFull2.linked_chat_id != 0 && (chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id))) != null && chat.megagroup) {
            getMessagesController().startShortPoll(chat, this.classGuid, false, null);
        }
        ThemeDelegate themeDelegate = new ThemeDelegate();
        this.themeDelegate = themeDelegate;
        if (themeDelegate.isThemeChangeAvailable(false)) {
            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.needSetDayNightTheme);
        }
        TLRPC$ChatInvite tLRPC$ChatInvite = this.chatInvite;
        if (tLRPC$ChatInvite != null) {
            int currentTime = tLRPC$ChatInvite.expires - getConnectionsManager().getCurrentTime();
            int i8 = currentTime < 0 ? i : currentTime;
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda183
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onFragmentCreate$49();
                }
            };
            this.chatInviteRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, i8 * 1000);
        }
        if (this.isTopic) {
            getMessagesController().getTopicsController().getTopicRepliesCount(this.dialog_id, getTopicId());
        }
        getMessagesController().getSavedMessagesController().preloadDialogs();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$41(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentChat = messagesStorage.getChat(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$42(Boolean bool) {
        boolean booleanValue = bool.booleanValue();
        this.waitingForGetDifference = booleanValue;
        if (booleanValue) {
            return;
        }
        firstLoadMessages();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$43(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$44(MessagesStorage messagesStorage, int i, CountDownLatch countDownLatch) {
        this.currentEncryptedChat = messagesStorage.getEncryptedChat(i);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$45(MessagesStorage messagesStorage, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(this.currentEncryptedChat.user_id);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$46(long j) {
        getMediaDataController().loadBotInfo(j, j, true, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$49() {
        this.chatInviteRunnable = null;
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
            builder.setMessage(LocaleController.getString("JoinByPeekChannelText", C3632R.string.JoinByPeekChannelText));
            builder.setTitle(LocaleController.getString("JoinByPeekChannelTitle", C3632R.string.JoinByPeekChannelTitle));
        } else {
            builder.setMessage(LocaleController.getString("JoinByPeekGroupText", C3632R.string.JoinByPeekGroupText));
            builder.setTitle(LocaleController.getString("JoinByPeekGroupTitle", C3632R.string.JoinByPeekGroupTitle));
        }
        builder.setPositiveButton(LocaleController.getString("JoinByPeekJoin", C3632R.string.JoinByPeekJoin), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda34
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$onFragmentCreate$47(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda33
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$onFragmentCreate$48(dialogInterface, i);
            }
        });
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$47(DialogInterface dialogInterface, int i) {
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        if (unreadCounterTextView != null) {
            unreadCounterTextView.callOnClick();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$48(DialogInterface dialogInterface, int i) {
        finishFragment();
    }

    private void firstLoadMessages() {
        if (this.firstMessagesLoaded) {
            return;
        }
        this.firstMessagesLoaded = true;
        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
        if (this.startLoadFromDate != 0) {
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i = this.startLoadFromDate;
            int i2 = this.classGuid;
            int i3 = this.chatMode;
            long j3 = this.threadMessageId;
            int i4 = this.replyMaxReadId;
            int i5 = this.lastLoadIndex;
            this.lastLoadIndex = i5 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, i, true, 0, i2, 4, 0, i3, j3, i4, i5, this.isTopic);
        } else if (this.startLoadFromMessageId != 0 && (!isThreadChat() || this.startLoadFromMessageId == this.highlightMessageId || this.isTopic)) {
            int i6 = this.migrated_to;
            if (i6 != 0) {
                this.mergeDialogId = i6;
                MessagesController messagesController2 = getMessagesController();
                long j4 = this.mergeDialogId;
                boolean z = this.loadInfo;
                int i7 = this.initialMessagesSize;
                int i8 = this.startLoadFromMessageId;
                int i9 = this.classGuid;
                int i10 = this.chatMode;
                long j5 = this.threadMessageId;
                int i11 = this.replyMaxReadId;
                int i12 = this.lastLoadIndex;
                this.lastLoadIndex = i12 + 1;
                messagesController2.loadMessages(j4, 0L, z, i7, i8, 0, true, 0, i9, 3, 0, i10, j5, i11, i12, this.isTopic);
            } else {
                MessagesController messagesController3 = getMessagesController();
                long j6 = this.dialog_id;
                long j7 = this.mergeDialogId;
                boolean z2 = this.loadInfo;
                int i13 = this.initialMessagesSize;
                int i14 = this.startLoadFromMessageId;
                int i15 = this.classGuid;
                int i16 = this.chatMode;
                long j8 = this.threadMessageId;
                int i17 = this.replyMaxReadId;
                int i18 = this.lastLoadIndex;
                this.lastLoadIndex = i18 + 1;
                messagesController3.loadMessages(j6, j7, z2, i13, i14, 0, true, 0, i15, 3, 0, i16, j8, i17, i18, this.isTopic);
            }
        } else if (this.historyPreloaded) {
            this.lastLoadIndex++;
        } else {
            MessagesController messagesController4 = getMessagesController();
            long j9 = this.dialog_id;
            long j10 = this.mergeDialogId;
            boolean z3 = this.loadInfo;
            int i19 = this.initialMessagesSize;
            int i20 = this.startLoadFromMessageId;
            int i21 = this.classGuid;
            int i22 = this.chatMode;
            long j11 = this.threadMessageId;
            int i23 = this.replyMaxReadId;
            int i24 = this.lastLoadIndex;
            this.lastLoadIndex = i24 + 1;
            messagesController4.loadMessages(j9, j10, z3, i19, i20, 0, true, 0, i21, 2, 0, i22, j11, i23, i24, this.isTopic);
        }
        if (this.chatMode == 0) {
            if (!isThreadChat() || this.isTopic) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController5 = getMessagesController();
                long j12 = this.dialog_id;
                long j13 = this.mergeDialogId;
                int i25 = this.classGuid;
                long j14 = this.threadMessageId;
                int i26 = this.replyMaxReadId;
                int i27 = this.lastLoadIndex;
                this.lastLoadIndex = i27 + 1;
                messagesController5.loadMessages(j12, j13, false, 1, 0, 0, true, 0, i25, 2, 0, 1, j14, i26, i27, this.isTopic);
            }
        }
    }

    private void fillInviterId(boolean z) {
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat == null || this.chatInfo == null || ChatObject.isNotInChat(tLRPC$Chat) || this.currentChat.creator) {
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull.inviterId;
        if (j != 0) {
            this.chatInviterId = j;
            return;
        }
        TLRPC$ChatParticipants tLRPC$ChatParticipants = tLRPC$ChatFull.participants;
        if (tLRPC$ChatParticipants != null) {
            TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatParticipants.self_participant;
            if (tLRPC$ChatParticipant != null) {
                this.chatInviterId = tLRPC$ChatParticipant.inviter_id;
                return;
            }
            long clientUserId = getUserConfig().getClientUserId();
            int size = this.chatInfo.participants.participants.size();
            for (int i = 0; i < size; i++) {
                TLRPC$ChatParticipant tLRPC$ChatParticipant2 = this.chatInfo.participants.participants.get(i);
                if (tLRPC$ChatParticipant2.user_id == clientUserId) {
                    this.chatInviterId = tLRPC$ChatParticipant2.inviter_id;
                    return;
                }
            }
        }
        if (z && this.chatInviterId == 0) {
            getMessagesController().checkChatInviter(this.currentChat.f1602id, false);
        }
    }

    private void hideUndoViews() {
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        UndoView undoView2 = this.topUndoView;
        if (undoView2 != null) {
            undoView2.hide(true, 0);
        }
    }

    public int getOtherSameChatsDiff() {
        INavigationLayout iNavigationLayout = this.parentLayout;
        int i = 0;
        if (iNavigationLayout == null || iNavigationLayout.getFragmentStack() == null) {
            return 0;
        }
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        if (indexOf == -1) {
            indexOf = this.parentLayout.getFragmentStack().size();
        }
        while (true) {
            if (i >= this.parentLayout.getFragmentStack().size()) {
                i = indexOf;
                break;
            }
            BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(i);
            if (baseFragment != this && (baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.dialog_id) {
                break;
            }
            i++;
        }
        return i - indexOf;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onBeginSlide() {
        super.onBeginSlide();
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay == null || !chatSelectionReactionMenuOverlay.isVisible()) {
            return;
        }
        this.selectionReactionsOverlay.setHiddenByScroll(true);
    }

    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        ContentPreviewViewer.getInstance().clearDelegate(this.contentPreviewViewerDelegate);
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
        getNotificationCenter().onAnimationFinish(this.scrollAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollCallbackAnimationIndex);
        hideUndoViews();
        Runnable runnable = this.chatInviteRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.chatInviteRunnable = null;
        }
        getNotificationCenter().removePostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, false);
        getNotificationCenter().removeObservers(this, observers);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.threadMessagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.commentsRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.changeRepliesCounter);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadChatInviter);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupCallUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateMessagesViews);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadPinnedMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.topicsDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSponsoredMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslating);
        getNotificationCenter().removeObserver(this, NotificationCenter.onReceivedChannelDifference);
        getNotificationCenter().removeObserver(this, NotificationCenter.storiesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRecommendationsLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateTranscriptionLock);
        getNotificationCenter().removeObserver(this, NotificationCenter.savedMessagesDialogsUpdate);
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.detach();
        }
        if (this.currentEncryptedChat != null) {
            getNotificationCenter().removeObserver(this, NotificationCenter.didVerifyMessagesStickers);
        }
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.needSetDayNightTheme);
        if (this.chatMode == 0 && AndroidUtilities.isTablet()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Long.valueOf(getTopicId()), Boolean.TRUE);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.detach();
        }
        if (this.currentUser != null) {
            getMessagesController().cancelLoadFullUser(this.currentUser.f1751id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            getMessagesController().startShortPoll(this.currentChat, this.classGuid, true);
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull != null && tLRPC$ChatFull.linked_chat_id != 0) {
                getMessagesController().startShortPoll(getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id)), this.classGuid, true);
            }
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.onDestroy();
        }
        PinchToZoomHelper pinchToZoomHelper = this.pinchToZoomHelper;
        if (pinchToZoomHelper != null) {
            pinchToZoomHelper.clear();
        }
        this.chatThemeBottomSheet = null;
        INavigationLayout parentLayout = getParentLayout();
        if (parentLayout != null && parentLayout.getFragmentStack() != null) {
            BackButtonMenu.clearPulledDialogs(this, parentLayout.getFragmentStack().indexOf(this) - (!replacingChatActivity ? 1 : 0));
        }
        replacingChatActivity = false;
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.chatMessagesMetadataController.onFragmentDestroy();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$ChatActivityTextSelectionHelper */
    /* loaded from: classes5.dex */
    public static class ChatActivityTextSelectionHelper extends TextSelectionHelper.ChatListTextSelectionHelper {
        ChatActivity chatActivity;

        private ChatActivityTextSelectionHelper() {
        }

        /* synthetic */ ChatActivityTextSelectionHelper(C41961 c41961) {
            this();
        }

        public void setChatActivity(ChatActivity chatActivity) {
            cancelAllAnimators();
            clear();
            this.textSelectionOverlay = null;
            this.chatActivity = chatActivity;
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        public int getParentTopPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return (int) chatActivity.chatListViewPaddingTop;
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        public int getParentBottomPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return chatActivity.blurredViewBottomOffset;
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        protected int getThemedColor(int i) {
            return Theme.getColor(i, this.chatActivity.themeDelegate);
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        protected Theme.ResourcesProvider getResourcesProvider() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity != null) {
                return chatActivity.themeDelegate;
            }
            return null;
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        protected boolean canShowQuote() {
            ChatActivity chatActivity;
            Cell cell;
            ChatActivity chatActivity2 = this.chatActivity;
            return ((chatActivity2 != null && chatActivity2.isForwardingEditor()) || (chatActivity = this.chatActivity) == null || chatActivity.getCurrentEncryptedChat() != null || this.chatActivity.textSelectionHelper.isDescription || (cell = this.selectedView) == 0 || ((ChatMessageCell) cell).getMessageObject() == null || ((ChatMessageCell) this.selectedView).getMessageObject().type == 23 || ((ChatMessageCell) this.selectedView).getMessageObject().isVoiceTranscriptionOpen() || ((ChatMessageCell) this.selectedView).getMessageObject().isInvoice() || this.chatActivity.getMessagesController().getTranslateController().isTranslatingDialog(this.chatActivity.dialog_id) || UserObject.isService(this.chatActivity.dialog_id)) ? false : true;
        }

        @Override // org.telegram.p043ui.Cells.TextSelectionHelper
        protected void onQuoteClick(MessageObject messageObject, int i, int i2, CharSequence charSequence) {
            ChatActivity chatActivity;
            MessageObject.GroupedMessages group;
            if (messageObject == null || (chatActivity = this.chatActivity) == null) {
                return;
            }
            int min = Math.min(i2, chatActivity.getMessagesController().quoteLengthMax + i);
            if (messageObject.getGroupId() != 0 && (group = this.chatActivity.getGroup(messageObject.getGroupId())) != null && !group.isDocuments) {
                messageObject = group.captionMessage;
            }
            if (messageObject == null) {
                return;
            }
            ReplyQuote from = ReplyQuote.from(messageObject, i, min);
            if (from.getText() == null) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = this.chatActivity.chatActivityEnterView;
            if (chatActivityEnterView == null || chatActivityEnterView.getVisibility() != 0) {
                this.chatActivity.replyingQuote = from;
                this.chatActivity.replyingMessageObject = messageObject;
                this.chatActivity.forbidForwardingWithDismiss = false;
                ChatActivity chatActivity2 = this.chatActivity;
                chatActivity2.messagePreviewParams = new MessagePreviewParams(chatActivity2.currentEncryptedChat != null, chatActivity2.getMessagesController().isChatNoForwards(this.chatActivity.currentChat));
                ChatActivity chatActivity3 = this.chatActivity;
                chatActivity3.messagePreviewParams.updateReply(chatActivity3.replyingMessageObject, this.chatActivity.getGroup(messageObject.getGroupId()), this.chatActivity.getDialogId(), this.chatActivity.replyingQuote);
                Bundle bundle = new Bundle();
                bundle.putBoolean("onlySelect", true);
                bundle.putInt("dialogsType", 3);
                bundle.putBoolean("quote", true);
                bundle.putInt("messagesCount", 1);
                bundle.putBoolean("canSelectTopics", true);
                DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                dialogsActivity.setDelegate(this.chatActivity);
                this.chatActivity.presentFragment(dialogsActivity);
                return;
            }
            if (((BaseFragment) this.chatActivity).actionBar != null && ((BaseFragment) this.chatActivity).actionBar.isActionModeShowed()) {
                this.chatActivity.clearSelectionMode();
            }
            this.chatActivity.showFieldPanelForReplyQuote(messageObject, from);
            ChatActivityEnterView chatActivityEnterView2 = this.chatActivity.chatActivityEnterView;
            if (chatActivityEnterView2 != null) {
                chatActivityEnterView2.openKeyboard();
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:307:0x0793  */
    /* JADX WARN: Removed duplicated region for block: B:413:0x09d4  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0ad8  */
    /* JADX WARN: Removed duplicated region for block: B:417:0x0ae6  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x0b2c  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x0c5b  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x0c5d  */
    /* JADX WARN: Removed duplicated region for block: B:432:0x0c75  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0c78  */
    /* JADX WARN: Removed duplicated region for block: B:436:0x0cb1  */
    /* JADX WARN: Removed duplicated region for block: B:437:0x0cd0  */
    /* JADX WARN: Removed duplicated region for block: B:440:0x0e0f  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0e2e  */
    /* JADX WARN: Removed duplicated region for block: B:444:0x0f36  */
    /* JADX WARN: Removed duplicated region for block: B:445:0x0f55  */
    /* JADX WARN: Removed duplicated region for block: B:448:0x0fc3  */
    /* JADX WARN: Removed duplicated region for block: B:476:0x11db  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x121b  */
    /* JADX WARN: Removed duplicated region for block: B:499:0x1330  */
    /* JADX WARN: Removed duplicated region for block: B:502:0x1465  */
    /* JADX WARN: Removed duplicated region for block: B:526:0x171f  */
    /* JADX WARN: Removed duplicated region for block: B:529:0x177f  */
    /* JADX WARN: Removed duplicated region for block: B:542:0x1823  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x183d  */
    /* JADX WARN: Removed duplicated region for block: B:551:0x1871  */
    /* JADX WARN: Removed duplicated region for block: B:554:0x187c  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x188b  */
    /* JADX WARN: Removed duplicated region for block: B:558:0x18c9  */
    /* JADX WARN: Removed duplicated region for block: B:559:0x18d4  */
    /* JADX WARN: Removed duplicated region for block: B:570:0x1973  */
    /* JADX WARN: Removed duplicated region for block: B:573:0x19a2  */
    /* JADX WARN: Removed duplicated region for block: B:576:0x19c6  */
    /* JADX WARN: Removed duplicated region for block: B:581:0x19d6  */
    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public android.view.View createView(final android.content.Context r44) {
        /*
            Method dump skipped, instructions count: 6681
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.createView(android.content.Context):android.view.View");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$18 */
    /* loaded from: classes5.dex */
    public class C420818 extends C3704ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Context val$context;

        C420818(Context context) {
            this.val$context = context;
        }

        @Override // org.telegram.p043ui.ActionBar.C3704ActionBar.ActionBarMenuOnItemClick
        public void onItemClick(final int i) {
            TLRPC$User tLRPC$User;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$Chat chat;
            TLRPC$User tLRPC$User2;
            String userName;
            TLRPC$User tLRPC$User3;
            if (i == IdFabric$Menu.GROUP_MESSAGES) {
                ChatActivity.this.groupSelectedMessages();
            } else if (i == IdFabric$Menu.UNGROUP_MESSAGES) {
                ChatActivity.this.ungroupSelectedMessages();
            } else if (i == IdFabric$Menu.CHAT_CLEAR_CACHE) {
                ChatActivity.this.showClearCacheBottomSheet();
            } else if (i == IdFabric$Menu.CHAT_CLOUD_LOCK) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.presentFragment(PasscodeActivity.determineOpenFragment(chatActivity.getLockedSection()));
            } else {
                if (i == IdFabric$Menu.MESSAGE_SAVE_CLOUD) {
                    ChatActivity.this.openForward(true, true);
                } else if (i == IdFabric$Menu.CHAT_ADD_TO_FOLDER) {
                    ChatActivity.this.showAddToFolderBottomSheet();
                } else if (i == IdFabric$Menu.CHAT_SELECT_TOPIC) {
                    ChatActivity.this.showSelectTopicAlert();
                } else if (i == IdFabric$Menu.CHAT_TRANSLATE_SETTINGS) {
                    ChatActivity.this.showLanguageSettingsDialog();
                } else if (i == IdFabric$Menu.CHAT_JUMP_TO_START) {
                    ChatActivity.this.jumpToChatStart();
                } else if (i == IdFabric$Menu.CHAT_TOGGLE_ALBUM) {
                    ChatActivity.this.toggleAlbum();
                } else if (i == IdFabric$Menu.CHAT_DONATE) {
                    ChatActivity.this.openDonationScreen();
                } else if (i == IdFabric$Menu.CHAT_ALBUMS) {
                    if (SharedConfig.isAlbumsIntroShown) {
                        ChatActivity.this.presentFragment(DialogsActivity.newInstanceInAlbumsMode());
                    } else {
                        ChatActivity.this.presentFragment(new ActionIntroActivity(100));
                    }
                } else if (i == IdFabric$Menu.CHAT_CLOUD_OPEN_BY_DEFAULT) {
                    ChatActivity.this.getAlbumsController().setOpenAlbumsInsteadCloudEnabled(false);
                    ChatActivity.this.getAlbumsController().saveConfig();
                    ChatActivity.this.updateAlbumsItem();
                    ChatActivity.this.updateOpenAlbumsInsteadCloudItem();
                } else if (i == -1) {
                    if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                        ChatActivity.this.clearSelectionMode();
                    } else if (!ChatActivity.this.checkRecordLocked(true)) {
                        ChatActivity.this.finishFragment();
                    }
                } else if (i == 59) {
                    ChatActivity.this.getMessagesController().getTopicsController().toggleViewForumAsMessages(-ChatActivity.this.dialog_id, false);
                    TopicsFragment.prepareToSwitchAnimation(ChatActivity.this);
                } else {
                    MessageObject messageObject = null;
                    if (i == 10) {
                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                        long j = 0;
                        for (int i2 = 1; i2 >= 0; i2--) {
                            ArrayList arrayList = new ArrayList();
                            for (int i3 = 0; i3 < ChatActivity.this.selectedMessagesCanCopyIds[i2].size(); i3++) {
                                arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[i2].keyAt(i3)));
                            }
                            if (ChatActivity.this.currentEncryptedChat == null) {
                                Collections.sort(arrayList);
                            } else {
                                Collections.sort(arrayList, Collections.reverseOrder());
                            }
                            for (int i4 = 0; i4 < arrayList.size(); i4++) {
                                MessageObject messageObject2 = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[i2].get(((Integer) arrayList.get(i4)).intValue());
                                if (spannableStringBuilder.length() != 0) {
                                    spannableStringBuilder.append((CharSequence) "\n\n");
                                }
                                spannableStringBuilder.append(ChatActivity.this.getMessageContent(messageObject2, j, arrayList.size() != 1 && ((tLRPC$User3 = ChatActivity.this.currentUser) == null || !tLRPC$User3.self)));
                                j = messageObject2.getFromChatId();
                            }
                        }
                        if (spannableStringBuilder.length() != 0) {
                            AndroidUtilities.addToClipboard(spannableStringBuilder);
                            ChatActivity.this.createUndoView();
                            if (ChatActivity.this.undoView == null) {
                                return;
                            }
                            ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                        }
                        ChatActivity.this.clearSelectionMode();
                    } else if (i == 12) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        if (!ChatActivity.this.isForwardingEditor()) {
                            ChatActivity.this.createDeleteMessagesAlert(null, null);
                            return;
                        }
                        ArrayList arrayList2 = new ArrayList();
                        for (int i5 = 1; i5 >= 0; i5--) {
                            for (int i6 = 0; i6 < ChatActivity.this.selectedMessagesIds[i5].size(); i6++) {
                                arrayList2.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[i5].keyAt(i6)));
                            }
                            ChatActivity.this.selectedMessagesIds[i5].clear();
                        }
                        ChatActivity.this.hideActionMode();
                        ChatActivity.this.processDeletedMessages(arrayList2, 0L, false);
                    } else if (i == 11) {
                        ChatActivity.this.openForward(true, false);
                    } else if (i == 25) {
                        ArrayList arrayList3 = new ArrayList();
                        for (int i7 = 1; i7 >= 0; i7--) {
                            for (int i8 = 0; i8 < ChatActivity.this.selectedMessagesIds[i7].size(); i8++) {
                                arrayList3.add((MessageObject) ChatActivity.this.selectedMessagesIds[i7].valueAt(i8));
                            }
                            ChatActivity.this.selectedMessagesIds[i7].clear();
                            ChatActivity.this.selectedMessagesCanCopyIds[i7].clear();
                            ChatActivity.this.selectedMessagesCanStarIds[i7].clear();
                        }
                        final boolean z = ChatActivity.this.canSaveMusicCount > 0;
                        ChatActivity.this.hideActionMode();
                        ChatActivity.this.updatePinnedMessageView(true);
                        ChatActivity.this.updateVisibleRows();
                        MediaController.saveFilesFromMessages(ChatActivity.this.getParentActivity(), ChatActivity.this.getAccountInstance(), arrayList3, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda3
                            @Override // org.telegram.messenger.MessagesStorage.IntCallback
                            public final void run(int i9) {
                                ChatActivity.C420818.this.lambda$onItemClick$0(z, i9);
                            }
                        });
                    } else if (i == 13) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        ChatActivity chatActivity2 = ChatActivity.this;
                        Activity parentActivity = chatActivity2.getParentActivity();
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity2.showDialog(AlertsCreator.createTTLAlert(parentActivity, chatActivity3.currentEncryptedChat, chatActivity3.themeDelegate).create());
                    } else if (i == 15 || i == 16 || i == 26) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        if (ChatActivity.this.chatMode == 3) {
                            long savedDialogId = ChatActivity.this.getSavedDialogId();
                            if (savedDialogId >= 0) {
                                tLRPC$User2 = ChatActivity.this.getMessagesController().getUser(Long.valueOf(savedDialogId));
                                chat = null;
                            } else {
                                chat = ChatActivity.this.getMessagesController().getChat(Long.valueOf(-savedDialogId));
                                tLRPC$User2 = null;
                            }
                            if (UserObject.isAnonymous(tLRPC$User2)) {
                                userName = LocaleController.getString(C3632R.string.AnonymousForward);
                            } else if (chat != null) {
                                userName = chat.title;
                            } else {
                                userName = tLRPC$User2 != null ? UserObject.getUserName(tLRPC$User2) : "";
                            }
                            AlertDialog create = new AlertDialog.Builder(ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider()).setTitle(LocaleController.formatString(C3632R.string.ClearHistoryTitleSingle, userName)).setMessage(LocaleController.formatString(C3632R.string.ClearHistoryMessageSingle, userName)).setPositiveButton(LocaleController.getString(C3632R.string.Delete), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda0
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i9) {
                                    ChatActivity.C420818.this.lambda$onItemClick$1(dialogInterface, i9);
                                }
                            }).setNegativeButton(LocaleController.getString(C3632R.string.Cancel), null).create();
                            ChatActivity.this.showDialog(create);
                            TextView textView = (TextView) create.getButton(-1);
                            if (textView != null) {
                                textView.setTextColor(Theme.getColor(Theme.key_text_RedBold));
                                return;
                            }
                            return;
                        }
                        ChatActivity chatActivity4 = ChatActivity.this;
                        TLRPC$ChatFull tLRPC$ChatFull2 = chatActivity4.chatInfo;
                        final boolean z2 = tLRPC$ChatFull2 != null && tLRPC$ChatFull2.can_delete_channel;
                        if (i == 26 || (i == 15 && chatActivity4.currentEncryptedChat == null && (((tLRPC$User = chatActivity4.currentUser) != null && !UserObject.isUserSelf(tLRPC$User) && !UserObject.isDeleted(ChatActivity.this.currentUser)) || ((tLRPC$ChatFull = ChatActivity.this.chatInfo) != null && tLRPC$ChatFull.can_delete_channel)))) {
                            ChatActivity chatActivity5 = ChatActivity.this;
                            AlertsCreator.createClearDaysDialogAlert(chatActivity5, -1, chatActivity5.currentUser, chatActivity5.currentChat, z2, new C42091(z2), ChatActivity.this.getResourceProvider());
                            return;
                        }
                        ChatActivity chatActivity6 = ChatActivity.this;
                        AlertsCreator.createClearOrDeleteDialogAlert(chatActivity6, i == 15, chatActivity6.currentChat, chatActivity6.currentUser, chatActivity6.currentEncryptedChat != null, true, z2, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda2
                            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                            public final void run(boolean z3) {
                                ChatActivity.C420818.this.lambda$onItemClick$2(i, z2, z3);
                            }
                        }, ChatActivity.this.themeDelegate);
                    } else if (i == 17) {
                        ChatActivity chatActivity7 = ChatActivity.this;
                        if (chatActivity7.currentUser == null || chatActivity7.getParentActivity() == null) {
                            return;
                        }
                        if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getTag() != null) {
                            ChatActivity chatActivity8 = ChatActivity.this;
                            chatActivity8.shareMyContact(((Integer) chatActivity8.addToContactsButton.getTag()).intValue(), null);
                            return;
                        }
                        Bundle bundle = new Bundle();
                        bundle.putLong("user_id", ChatActivity.this.currentUser.f1751id);
                        bundle.putBoolean("addContact", true);
                        ChatActivity.this.presentFragment(new ContactAddActivity(bundle));
                    } else if (i == 18) {
                        ChatActivity.this.toggleMute(false);
                    } else if (i == 24) {
                        try {
                            ChatActivity.this.getMediaDataController().installShortcut(ChatActivity.this.currentUser.f1751id);
                        } catch (Exception e) {
                            FileLog.m102e(e);
                        }
                    } else if (i == 21) {
                        Activity parentActivity2 = ChatActivity.this.getParentActivity();
                        long j2 = ChatActivity.this.dialog_id;
                        ChatActivity chatActivity9 = ChatActivity.this;
                        AlertsCreator.createReportAlert(parentActivity2, j2, 0, 0, chatActivity9, chatActivity9.themeDelegate, null);
                    } else if (i == 22) {
                        for (int i9 = 0; i9 < 2; i9++) {
                            for (int i10 = 0; i10 < ChatActivity.this.selectedMessagesCanStarIds[i9].size(); i10++) {
                                MessageObject messageObject3 = (MessageObject) ChatActivity.this.selectedMessagesCanStarIds[i9].valueAt(i10);
                                ChatActivity.this.getMediaDataController().addRecentSticker(2, messageObject3, messageObject3.getDocument(), (int) (System.currentTimeMillis() / 1000), !ChatActivity.this.hasUnfavedSelected);
                            }
                        }
                        ChatActivity.this.clearSelectionMode();
                    } else if (i == 23) {
                        for (int i11 = 1; i11 >= 0; i11--) {
                            if (messageObject == null && ChatActivity.this.selectedMessagesIds[i11].size() == 1) {
                                ArrayList arrayList4 = new ArrayList();
                                for (int i12 = 0; i12 < ChatActivity.this.selectedMessagesIds[i11].size(); i12++) {
                                    arrayList4.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[i11].keyAt(i12)));
                                }
                                messageObject = (MessageObject) ChatActivity.this.messagesDict[i11].get(((Integer) arrayList4.get(0)).intValue());
                            }
                            ChatActivity.this.selectedMessagesIds[i11].clear();
                            ChatActivity.this.selectedMessagesCanCopyIds[i11].clear();
                            ChatActivity.this.selectedMessagesCanStarIds[i11].clear();
                        }
                        ChatActivity.this.hideActionMode();
                        ChatActivity.this.lambda$startMessageUnselect$162(messageObject);
                        ChatActivity.this.updatePinnedMessageView(true);
                        ChatActivity.this.updateVisibleRows();
                    } else if (i == 14) {
                        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.val$context, false, true, true, ChatActivity.this.getResourceProvider());
                        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(C3632R.string.AttachMenu), C3632R.C3634drawable.input_attach);
                        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$18$$ExternalSyntheticLambda1
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.C420818.this.lambda$onItemClick$3(view);
                            }
                        });
                        ChatActivity.this.headerItem.toggleSubMenu(actionBarMenuSubItem, ChatActivity.this.attachItem.createView());
                    } else if (i == 30) {
                        ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of("/help", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false, null));
                    } else if (i == 31) {
                        ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of("/settings", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false, null));
                    } else if (i == 40) {
                        ChatActivity.this.openSearchWithText(null);
                    } else if (i == 62) {
                        ChatActivity.this.getMessagesController().getTranslateController().setHideTranslateDialog(ChatActivity.this.getDialogId(), false, true);
                        if (ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId(), true)) {
                            return;
                        }
                        ChatActivity.this.updateTopPanel(true);
                    } else if (i == 32 || i == 33) {
                        ChatActivity chatActivity10 = ChatActivity.this;
                        if (chatActivity10.currentUser == null || chatActivity10.getParentActivity() == null) {
                            return;
                        }
                        ChatActivity chatActivity11 = ChatActivity.this;
                        TLRPC$User tLRPC$User4 = chatActivity11.currentUser;
                        boolean z3 = i == 33;
                        TLRPC$UserFull tLRPC$UserFull = chatActivity11.userInfo;
                        VoIPHelper.startCall(tLRPC$User4, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity11.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.f1751id), ChatActivity.this.getAccountInstance());
                    } else if (i == 50) {
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                    } else if (i == 51) {
                        ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                    } else if (i == 57) {
                        ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView3 == null || chatActivityEnterView3.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedSpoiler();
                    } else if (i == 58) {
                        ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView4 == null || chatActivityEnterView4.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedQuote();
                    } else if (i == 52) {
                        ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView5 == null || chatActivityEnterView5.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                    } else if (i == 55) {
                        ChatActivityEnterView chatActivityEnterView6 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView6 == null || chatActivityEnterView6.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedStrike();
                    } else if (i == 56) {
                        ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUnderline();
                    } else if (i == 53) {
                        ChatActivityEnterView chatActivityEnterView8 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView8 == null || chatActivityEnterView8.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                    } else if (i == 54) {
                        ChatActivityEnterView chatActivityEnterView9 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView9 == null || chatActivityEnterView9.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                        ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                    } else if (i == 27) {
                        ChatActivity.this.showChatThemeBottomSheet();
                    } else if (i != 60) {
                        if (i == 61) {
                            TopicsFragment.prepareToSwitchAnimation(ChatActivity.this);
                        }
                    } else {
                        TopicsController topicsController = ChatActivity.this.getMessagesController().getTopicsController();
                        ChatActivity chatActivity12 = ChatActivity.this;
                        long j3 = chatActivity12.currentChat.f1602id;
                        int i13 = chatActivity12.forumTopic.f1658id;
                        ChatActivity.this.forumTopic.closed = true;
                        topicsController.toggleCloseTopic(j3, i13, true);
                        ChatActivity.this.updateTopicButtons();
                        ChatActivity.this.lambda$didReceivedNotification$183();
                        ChatActivity.this.updateTopPanel(true);
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0(boolean z, int i) {
            if (i <= 0 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            BulletinFactory.m65of(ChatActivity.this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, ChatActivity.this.themeDelegate).show();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$1(DialogInterface dialogInterface, int i) {
            ChatActivity.this.getMessagesController().deleteSavedDialog(ChatActivity.this.getSavedDialogId());
            ChatActivity.this.finishFragment();
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$18$1 */
        /* loaded from: classes5.dex */
        public class C42091 implements MessagesStorage.BooleanCallback {
            final /* synthetic */ boolean val$canDeleteHistory;

            C42091(boolean z) {
                this.val$canDeleteHistory = z;
            }

            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
            public void run(boolean z) {
                if (z) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.currentUser != null || this.val$canDeleteHistory) {
                        MessagesStorage messagesStorage = chatActivity.getMessagesStorage();
                        long j = ChatActivity.this.dialog_id;
                        final boolean z2 = this.val$canDeleteHistory;
                        messagesStorage.getMessagesCount(j, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$18$1$$ExternalSyntheticLambda1
                            @Override // org.telegram.messenger.MessagesStorage.IntCallback
                            public final void run(int i) {
                                ChatActivity.C420818.C42091.this.lambda$run$1(z2, i);
                            }
                        });
                        return;
                    }
                }
                ChatActivity.this.performHistoryClear(z, this.val$canDeleteHistory);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(boolean z, boolean z2) {
                ChatActivity.this.performHistoryClear(true, z);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$1(final boolean z, int i) {
                if (i >= 50) {
                    ChatActivity chatActivity = ChatActivity.this;
                    AlertsCreator.createClearOrDeleteDialogAlert(chatActivity, true, false, true, chatActivity.currentChat, chatActivity.currentUser, false, false, z, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$18$1$$ExternalSyntheticLambda0
                        @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                        public final void run(boolean z2) {
                            ChatActivity.C420818.C42091.this.lambda$run$0(z, z2);
                        }
                    }, ChatActivity.this.themeDelegate);
                    return;
                }
                ChatActivity.this.performHistoryClear(true, z);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$2(int i, boolean z, boolean z2) {
            if (i == 15 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
                if (!tLRPC$Chat.megagroup || ChatObject.isPublic(tLRPC$Chat)) {
                    ChatActivity.this.getMessagesController().deleteDialog(ChatActivity.this.dialog_id, 2, z2);
                    return;
                }
            }
            if (i != 15) {
                NotificationCenter notificationCenter = ChatActivity.this.getNotificationCenter();
                ChatActivity chatActivity = ChatActivity.this;
                int i2 = NotificationCenter.closeChats;
                notificationCenter.removeObserver(chatActivity, i2);
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i2, new Object[0]);
                ChatActivity.this.finishFragment();
                NotificationCenter notificationCenter2 = ChatActivity.this.getNotificationCenter();
                int i3 = NotificationCenter.needDeleteDialog;
                ChatActivity chatActivity2 = ChatActivity.this;
                notificationCenter2.lambda$postNotificationNameOnUIThread$1(i3, Long.valueOf(ChatActivity.this.dialog_id), chatActivity2.currentUser, chatActivity2.currentChat, Boolean.valueOf(z2));
                return;
            }
            ChatActivity.this.performHistoryClear(z2, z);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$3(View view) {
            ChatActivity.this.headerItem.closeSubMenu();
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$19 */
    /* loaded from: classes5.dex */
    public class C421019 extends LongPressListenerWithMovingGesture {
        final /* synthetic */ View val$backButton;

        C421019(View view) {
            this.val$backButton = view;
        }

        @Override // org.telegram.p043ui.LongPressListenerWithMovingGesture
        public void onLongPress() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = BackButtonMenu.show(chatActivity, this.val$backButton, chatActivity.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.themeDelegate);
            ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
            if (actionBarPopupWindow != null) {
                setSubmenu(actionBarPopupWindow);
                ChatActivity.this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$19$$ExternalSyntheticLambda0
                    @Override // android.widget.PopupWindow.OnDismissListener
                    public final void onDismiss() {
                        ChatActivity.C421019.this.lambda$onLongPress$0();
                    }
                });
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.dimBehindView(this.val$backButton, 0.3f);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.hide(true, 1);
                }
                if (ChatActivity.this.undoView != null) {
                    ChatActivity.this.undoView.hide(true, 1);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLongPress$0() {
            setSubmenu(null);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = null;
            chatActivity.menuDeleteItem = null;
            ChatActivity.this.scrimPopupWindowItems = null;
            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
            } else {
                ChatActivity.this.dimBehindView(false);
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                return;
            }
            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$50(View view, MotionEvent motionEvent) {
        ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
        if (chatThemeBottomSheet != null) {
            chatThemeBottomSheet.close();
            return true;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$51(int i, View view) {
        jumpToDate(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$55(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$messages_Messages) {
            if (!((TLRPC$messages_Messages) tLObject).messages.isEmpty()) {
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tLRPC$TL_messages_getHistory.offset_date = this.startLoadFromDate + 86400;
                tLRPC$TL_messages_getHistory.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda329
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                        ChatActivity.this.lambda$createView$54(tLObject, tLObject2, tLRPC$TL_error2);
                    }
                });
                return;
            }
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", C3632R.string.NoMessagesForThisDay));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$54(TLObject tLObject, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        final int i;
        if (tLObject2 instanceof TLRPC$messages_Messages) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject2;
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset - tLRPC$messages_Messages.offset_id_offset;
            } else {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda237
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$53(i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$52(int i) {
        this.actionBar.setSubtitle(LocaleController.formatPluralString("messages", i, new Object[0]));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$53(final int i) {
        if (i != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda236
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$52(i);
                }
            });
        } else {
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", C3632R.string.NoMessagesForThisDay));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$57(View view) {
        if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id, getTopicId())) {
            updateTitleIcons(true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda223
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$56();
                }
            }, 150L);
            this.headerItem.toggleSubMenu();
            if (getParentActivity() != null) {
                BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
                return;
            }
            return;
        }
        this.muteItem.openSwipeBack();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$56() {
        toggleMute(true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$22 */
    /* loaded from: classes5.dex */
    public class C421422 extends RecyclerListViewInternal {
        private final ArrayList<ChatMessageCell> drawCaptionAfter;
        private final ArrayList<ChatMessageCell> drawNamesAfter;
        private final ArrayList<ChatMessageCell> drawTimeAfter;
        private final ArrayList<MessageObject.GroupedMessages> drawingGroups;
        private float endTrackingX;
        private boolean ignoreLayout;
        int lastH;
        private long lastTrackingAnimationTime;
        private int lastWidth;
        private Paint outlineActionBackgroundDarkenPaint;
        private Paint outlineActionBackgroundPaint;
        private Path path;
        private boolean slidingBeyondMax;
        private FloatValueHolder slidingDrawableVisibilityProgress;
        private SpringAnimation slidingDrawableVisibilitySpring;
        private FloatValueHolder slidingFillProgress;
        private SpringAnimation slidingFillProgressSpring;
        private FloatValueHolder slidingOuterRingProgress;
        private SpringAnimation slidingOuterRingSpring;
        private float springMultiplier;
        private int startedTrackingPointerId;
        private int startedTrackingX;
        private int startedTrackingY;
        private float trackAnimationProgress;
        private boolean wasTrackingVibrate;

        C421422(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
            this.drawTimeAfter = new ArrayList<>();
            this.drawNamesAfter = new ArrayList<>();
            this.drawCaptionAfter = new ArrayList<>();
            this.drawingGroups = new ArrayList<>(10);
            this.springMultiplier = 2000.0f;
            this.outlineActionBackgroundPaint = new Paint(1);
            this.outlineActionBackgroundDarkenPaint = new Paint(1);
            this.slidingDrawableVisibilityProgress = new FloatValueHolder(BitmapDescriptorFactory.HUE_RED);
            this.slidingDrawableVisibilitySpring = new SpringAnimation(this.slidingDrawableVisibilityProgress).setMinValue(BitmapDescriptorFactory.HUE_RED).setMaxValue(this.springMultiplier).setSpring(new SpringForce(BitmapDescriptorFactory.HUE_RED).setStiffness(1500.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda4
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.C421422.this.lambda$$0(dynamicAnimation, f, f2);
                }
            });
            this.slidingFillProgress = new FloatValueHolder(BitmapDescriptorFactory.HUE_RED);
            this.slidingFillProgressSpring = new SpringAnimation(this.slidingFillProgress).setMinValue(BitmapDescriptorFactory.HUE_RED).setSpring(new SpringForce(BitmapDescriptorFactory.HUE_RED).setStiffness(400.0f).setDampingRatio(0.5f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda6
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.C421422.this.lambda$$1(dynamicAnimation, f, f2);
                }
            });
            this.slidingOuterRingProgress = new FloatValueHolder(BitmapDescriptorFactory.HUE_RED);
            this.slidingOuterRingSpring = new SpringAnimation(this.slidingOuterRingProgress).setMinValue(BitmapDescriptorFactory.HUE_RED).setSpring(new SpringForce(BitmapDescriptorFactory.HUE_RED).setStiffness(200.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda5
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.C421422.this.lambda$$2(dynamicAnimation, f, f2);
                }
            });
            this.path = new Path();
            this.lastH = 0;
            this.outlineActionBackgroundPaint.setStyle(Paint.Style.STROKE);
            this.outlineActionBackgroundPaint.setStrokeCap(Paint.Cap.ROUND);
            this.outlineActionBackgroundPaint.setStrokeWidth(AndroidUtilities.m107dp(2));
            this.outlineActionBackgroundDarkenPaint.setStyle(Paint.Style.STROKE);
            this.outlineActionBackgroundDarkenPaint.setStrokeCap(Paint.Cap.ROUND);
            this.outlineActionBackgroundDarkenPaint.setStrokeWidth(AndroidUtilities.m107dp(2));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$1(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$2(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView, android.view.View
        public void setTranslationY(float f) {
            BotCommandsMenuContainer botCommandsMenuContainer;
            if (f != getTranslationY()) {
                super.setTranslationY(f);
                if (ChatActivity.this.emptyViewContainer != null) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null || !chatActivityEnterView.panelAnimationInProgress()) {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 1.7f);
                    } else {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                    }
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && (botCommandsMenuContainer = chatActivityEnterView2.botCommandsMenuContainer) != null) {
                    botCommandsMenuContainer.setTranslationY(f);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView
        public boolean allowSelectChildAtPosition(View view) {
            if (view == null || !(view.getVisibility() == 4 || view.getVisibility() == 8)) {
                return super.allowSelectChildAtPosition(view);
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onMeasure(int i, int i2) {
            ChatActivity.this.saveScrollPosition();
            super.onMeasure(i, i2);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            int i5 = i3 - i;
            if (this.lastWidth != i5) {
                this.lastWidth = i5;
                ChatActivity.this.hideHints(false);
            }
            int measuredHeight = getMeasuredHeight();
            if (this.lastH != measuredHeight) {
                this.ignoreLayout = true;
                if (ChatActivity.this.chatListItemAnimator != null) {
                    ChatActivity.this.chatListItemAnimator.endAnimations();
                }
                ChatActivity.this.chatScrollHelper.cancel();
                this.ignoreLayout = false;
                this.lastH = measuredHeight;
            }
            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.textSelectionHelper != null && ChatActivity.this.textSelectionHelper.isInSelectionMode()) {
                ChatActivity.this.textSelectionHelper.invalidate();
            }
            ChatActivity.this.isSkeletonVisible();
        }

        private void setGroupTranslationX(ChatMessageCell chatMessageCell, float f) {
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup == null) {
                return;
            }
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = getChildAt(i);
                if (childAt != chatMessageCell && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                        chatMessageCell2.setSlidingOffset(f);
                        chatMessageCell2.invalidate();
                    }
                }
            }
            invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean z) {
            if (ChatActivity.this.scrimPopupWindow != null) {
                return false;
            }
            return super.requestChildRectangleOnScreen(view, rect, z);
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onInterceptTouchEvent = super.onInterceptTouchEvent(motionEvent);
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                processTouchEvent(motionEvent);
            }
            return onInterceptTouchEvent;
        }

        @Override // androidx.recyclerview.widget.RecyclerView
        public void setItemAnimator(RecyclerView.ItemAnimator itemAnimator) {
            if (isFastScrollAnimationRunning()) {
                return;
            }
            super.setItemAnimator(itemAnimator);
        }

        /* JADX WARN: Removed duplicated region for block: B:106:0x0503  */
        /* JADX WARN: Removed duplicated region for block: B:107:0x0506  */
        /* JADX WARN: Removed duplicated region for block: B:77:0x0316  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x033c  */
        /* JADX WARN: Removed duplicated region for block: B:86:0x0405  */
        /* JADX WARN: Removed duplicated region for block: B:91:0x0428  */
        /* JADX WARN: Removed duplicated region for block: B:98:0x044e  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        private void drawReplyButton(android.graphics.Canvas r25) {
            /*
                Method dump skipped, instructions count: 1362
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.C421422.drawReplyButton(android.graphics.Canvas):void");
        }

        private void processTouchEvent(MotionEvent motionEvent) {
            TLRPC$Chat tLRPC$Chat;
            if (motionEvent != null) {
                ChatActivity.this.wasManualScroll = true;
            }
            if (motionEvent == null || motionEvent.getAction() != 0 || ChatActivity.this.startedTrackingSlidingView || ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.slidingView != null || ((BaseFragment) ChatActivity.this).inPreviewMode) {
                if (ChatActivity.this.slidingView == null || motionEvent == null || motionEvent.getAction() != 2 || motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                    if (ChatActivity.this.slidingView != null) {
                        if (motionEvent != null) {
                            if (motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                                return;
                            }
                            if (motionEvent.getAction() != 3 && motionEvent.getAction() != 1 && motionEvent.getAction() != 6) {
                                return;
                            }
                        }
                        if (motionEvent != null && motionEvent.getAction() != 3 && Math.abs(ChatActivity.this.slidingView.getNonAnimationTranslationX(false)) >= AndroidUtilities.m107dp(50)) {
                            if (ChatActivity.this.isForwardingEditor()) {
                                ChatActivity chatActivity = ChatActivity.this;
                                chatActivity.lambda$startMessageUnselect$162(chatActivity.slidingView.getMessageObject());
                            } else {
                                ChatActivity chatActivity2 = ChatActivity.this;
                                chatActivity2.showFieldPanelForReply(chatActivity2.slidingView.getMessageObject());
                            }
                        }
                        float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                        this.endTrackingX = slidingOffsetX;
                        if (slidingOffsetX == BitmapDescriptorFactory.HUE_RED) {
                            ChatActivity.this.slidingView = null;
                        }
                        this.lastTrackingAnimationTime = System.currentTimeMillis();
                        this.trackAnimationProgress = BitmapDescriptorFactory.HUE_RED;
                        invalidate();
                        ChatActivity.this.maybeStartTrackingSlidingView = false;
                        ChatActivity.this.startedTrackingSlidingView = false;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        return;
                    }
                    return;
                }
                int max = Math.max(AndroidUtilities.m107dp(-80), Math.min(0, (int) (motionEvent.getX() - this.startedTrackingX)));
                int abs = Math.abs(((int) motionEvent.getY()) - this.startedTrackingY);
                if (getScrollState() != 0 || !ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.startedTrackingSlidingView || max > (-AndroidUtilities.getPixelsInCM(0.4f, true)) || Math.abs(max) / 3 <= abs) {
                    if (ChatActivity.this.startedTrackingSlidingView) {
                        if (Math.abs(max) >= AndroidUtilities.m107dp(50)) {
                            if (!this.wasTrackingVibrate) {
                                try {
                                    performHapticFeedback(3, 2);
                                } catch (Exception unused) {
                                }
                                this.wasTrackingVibrate = true;
                            }
                        } else {
                            this.wasTrackingVibrate = false;
                        }
                        float f = max;
                        ChatActivity.this.slidingView.setSlidingOffset(f);
                        MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                        if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                            ChatActivity.this.updateTextureViewPosition(false, false);
                        }
                        setGroupTranslationX(ChatActivity.this.slidingView, f);
                        invalidate();
                        return;
                    }
                    return;
                }
                MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, 0);
                ChatActivity.this.slidingView.onTouchEvent(obtain);
                super.onInterceptTouchEvent(obtain);
                obtain.recycle();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.maybeStartTrackingSlidingView = false;
                ChatActivity.this.startedTrackingSlidingView = true;
                this.startedTrackingX = (int) motionEvent.getX();
                if (getParent() != null) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    return;
                }
                return;
            }
            View pressedChildView = getPressedChildView();
            if (pressedChildView instanceof ChatMessageCell) {
                if (ChatActivity.this.slidingView != null) {
                    ChatActivity.this.slidingView.setSlidingOffset(BitmapDescriptorFactory.HUE_RED);
                }
                ChatActivity.this.slidingView = (ChatMessageCell) pressedChildView;
                MessageObject messageObject2 = ChatActivity.this.slidingView.getMessageObject();
                boolean canSendMessageToTopic = ChatActivity.this.canSendMessageToTopic(messageObject2);
                if (ChatActivity.this.isTemplatesChannel(true, false) || ((ChatActivity.this.isForwardingEditor() && !messageObject2.canEditMessage(null, true)) || ((!ChatActivity.this.isForwardingEditor() && ChatActivity.this.chatMode != 0) || ((ChatActivity.this.threadMessageObjects != null && ChatActivity.this.threadMessageObjects.contains(messageObject2)) || ((ChatActivity.this.getMessageType(messageObject2) == 1 && (messageObject2.getDialogId() == ChatActivity.this.mergeDialogId || messageObject2.needDrawBluredPreview())) || ((ChatActivity.this.currentEncryptedChat == null && messageObject2.getId() < 0) || ((!ChatActivity.this.isForwardingEditor() && ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && ((!ChatActivity.this.bottomOverlayChatWaitsReply || !canSendMessageToTopic) && !messageObject2.wasJustSent)) || ((!ChatActivity.this.isForwardingEditor() && (tLRPC$Chat = ChatActivity.this.currentChat) != null && ((ChatObject.isNotInChat(tLRPC$Chat) && !ChatActivity.this.isThreadChat()) || ((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || !ChatObject.canSendMessages(ChatActivity.this.currentChat) || (ChatObject.isForum(ChatActivity.this.currentChat) && !canSendMessageToTopic)))) || ChatActivity.this.textSelectionHelper.isInSelectionMode())))))))) {
                    ChatActivity.this.slidingView.setSlidingOffset(BitmapDescriptorFactory.HUE_RED);
                    ChatActivity.this.slidingView = null;
                    return;
                }
                this.startedTrackingPointerId = motionEvent.getPointerId(0);
                ChatActivity.this.maybeStartTrackingSlidingView = true;
                this.startedTrackingX = (int) motionEvent.getX();
                this.startedTrackingY = (int) motionEvent.getY();
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (motionEvent.getAction() == 0) {
                ChatActivity.this.scrollByTouch = true;
            }
            if (ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED && (motionEvent.getAction() == 1 || motionEvent.getAction() == 3)) {
                float min = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.m107dp(110));
                if (motionEvent.getAction() != 1 || min != 1.0f || ChatActivity.this.pullingDownDrawable == null || ChatActivity.this.pullingDownDrawable.emptyStub) {
                    if (ChatActivity.this.pullingDownDrawable == null || !ChatActivity.this.pullingDownDrawable.emptyStub || System.currentTimeMillis() - ChatActivity.this.pullingDownDrawable.lastShowingReleaseTime >= 500 || !ChatActivity.this.pullingDownDrawable.animateSwipeToRelease) {
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, BitmapDescriptorFactory.HUE_RED);
                        ChatActivity.this.pullingDownBackAnimator = ofFloat;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda1
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.C421422.this.lambda$onTouchEvent$7(valueAnimator);
                            }
                        });
                        ofFloat.setDuration(250L);
                        ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        ofFloat.start();
                    } else {
                        AnimatorSet animatorSet = new AnimatorSet();
                        ChatActivity.this.pullingDownBackAnimator = animatorSet;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, AndroidUtilities.m107dp(111));
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda2
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.C421422.this.lambda$onTouchEvent$5(valueAnimator);
                            }
                        });
                        ofFloat2.setDuration(400L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(AndroidUtilities.m107dp(111), BitmapDescriptorFactory.HUE_RED);
                        ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda0
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.C421422.this.lambda$onTouchEvent$6(valueAnimator);
                            }
                        });
                        ofFloat3.setStartDelay(600L);
                        ofFloat3.setDuration(250L);
                        ofFloat3.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animatorSet.playSequentially(ofFloat2, ofFloat3);
                        animatorSet.start();
                    }
                } else if (ChatActivity.this.pullingDownDrawable.animationIsRunning()) {
                    ValueAnimator ofFloat4 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, ChatActivity.this.pullingDownOffset + AndroidUtilities.m107dp(8));
                    ChatActivity.this.pullingDownBackAnimator = ofFloat4;
                    ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda3
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.C421422.this.lambda$onTouchEvent$3(valueAnimator);
                        }
                    });
                    ofFloat4.setDuration(200L);
                    ofFloat4.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    ofFloat4.start();
                    ChatActivity.this.pullingDownDrawable.runOnAnimationFinish(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda7
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.C421422.this.lambda$onTouchEvent$4();
                        }
                    });
                } else {
                    ChatActivity.this.animateToNextChat();
                }
            }
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onTouchEvent = super.onTouchEvent(motionEvent);
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return onTouchEvent;
            }
            processTouchEvent(motionEvent);
            return ChatActivity.this.startedTrackingSlidingView || onTouchEvent;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$3(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$4() {
            ChatActivity.this.animateToNextChat();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$5(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$6(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$7(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public void requestDisallowInterceptTouchEvent(boolean z) {
            super.requestDisallowInterceptTouchEvent(z);
            if (ChatActivity.this.slidingView != null) {
                processTouchEvent(null);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView
        public void onChildPressed(View view, float f, float f2, boolean z) {
            MessageObject.GroupedMessages currentMessagesGroup;
            super.onChildPressed(view, f, f2, z);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.isMusic() || messageObject.isDocument() || (currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup()) == null) {
                    return;
                }
                int childCount = getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = getChildAt(i);
                    if (childAt != view && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                            chatMessageCell2.setPressed(z);
                        }
                    }
                }
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            float f;
            super.onDraw(canvas);
            if (ChatActivity.this.slidingView != null) {
                float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                if (!ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && this.endTrackingX != BitmapDescriptorFactory.HUE_RED && slidingOffsetX != BitmapDescriptorFactory.HUE_RED) {
                    long currentTimeMillis = System.currentTimeMillis();
                    float f2 = this.trackAnimationProgress + (((float) (currentTimeMillis - this.lastTrackingAnimationTime)) / 180.0f);
                    this.trackAnimationProgress = f2;
                    if (f2 > 1.0f) {
                        this.trackAnimationProgress = 1.0f;
                    }
                    this.lastTrackingAnimationTime = currentTimeMillis;
                    float interpolation = this.endTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                    if (interpolation == BitmapDescriptorFactory.HUE_RED) {
                        this.endTrackingX = BitmapDescriptorFactory.HUE_RED;
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, interpolation);
                    ChatActivity.this.slidingView.setSlidingOffset(interpolation);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false, false);
                    }
                    float f3 = this.trackAnimationProgress;
                    if (f3 == 1.0f || f3 == BitmapDescriptorFactory.HUE_RED) {
                        ChatActivity.this.slidingView.setSlidingOffset(BitmapDescriptorFactory.HUE_RED);
                        ChatActivity.this.slidingView = null;
                    }
                    invalidate();
                }
                drawReplyButton(canvas);
            }
            if (ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED && !ChatActivity.this.isInPreviewMode()) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.isInsideContainer && chatActivity.chatMode != 3) {
                    canvas.save();
                    if (ChatActivity.this.pullingDownAnimateProgress != BitmapDescriptorFactory.HUE_RED) {
                        f = ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) + (ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset)) * ChatActivity.this.pullingDownAnimateProgress;
                    } else {
                        f = 0.0f;
                    }
                    canvas.translate(BitmapDescriptorFactory.HUE_RED, (getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset) - f);
                    if (ChatActivity.this.pullingDownDrawable == null) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        int i = ((BaseFragment) chatActivity2).currentAccount;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        View view = chatActivity3.fragmentView;
                        long j = chatActivity3.dialog_id;
                        ChatActivity chatActivity4 = ChatActivity.this;
                        chatActivity2.pullingDownDrawable = new ChatPullingDownDrawable(i, view, j, chatActivity4.dialogFolderId, chatActivity4.dialogFilterId, chatActivity4.themeDelegate);
                        ChatActivity.this.pullingDownDrawable.onAttach();
                    }
                    ChatActivity.this.pullingDownDrawable.setWidth(getMeasuredWidth());
                    ChatActivity.this.pullingDownDrawable.draw(canvas, ChatActivity.this.chatListView, Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.m107dp(110)), 1.0f - ChatActivity.this.pullingDownAnimateProgress);
                    canvas.restore();
                    if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                        canvas.saveLayerAlpha(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredWidth(), ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                        canvas.translate(BitmapDescriptorFactory.HUE_RED, (getMeasuredHeight() - ChatActivity.this.pullingDownOffset) - f);
                        ChatActivity.this.pullingDownAnimateToActivity.chatListView.draw(canvas);
                        canvas.restore();
                        return;
                    }
                    return;
                }
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.reset();
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void draw(Canvas canvas) {
            ChatActivity chatActivity;
            float f;
            int i;
            int m108dp;
            MessageSkeleton messageSkeleton;
            int lerp;
            MessageObject.GroupedMessages.TransitionParams transitionParams;
            if ((ChatActivity.this.startMessageAppearTransitionMs == 0 || System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs <= 200) && !AndroidUtilities.isTablet() && !ChatActivity.this.isComments) {
                ChatActivity chatActivity2 = ChatActivity.this;
                if (chatActivity2.currentUser == null) {
                    TLRPC$Chat tLRPC$Chat = chatActivity2.currentChat;
                    boolean z = true;
                    boolean z2 = tLRPC$Chat == null || ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat);
                    if (ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
                        canvas.save();
                        canvas.translate(BitmapDescriptorFactory.HUE_RED, -ChatActivity.this.pullingDownOffset);
                    }
                    updateSkeletonColors();
                    updateSkeletonGradient();
                    int height = getHeight() - ChatActivity.this.blurredViewBottomOffset;
                    int i2 = Integer.MAX_VALUE;
                    for (int i3 = 0; i3 < getChildCount(); i3++) {
                        int top = getChildAt(i3).getTop();
                        if (top < i2) {
                            i2 = top;
                        }
                    }
                    if (ChatActivity.this.startMessageAppearTransitionMs == 0 && i2 <= 0) {
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity3.checkDispatchHideSkeletons(((BaseFragment) chatActivity3).fragmentBeginToShow);
                    }
                    Paint themedPaint = getThemedPaint("paintChatActionBackground");
                    if (ChatActivity.this.skeletonServicePaint.getColor() != themedPaint.getColor()) {
                        ChatActivity.this.skeletonServicePaint.setColor(themedPaint.getColor());
                    }
                    if (ChatActivity.this.skeletonServicePaint.getShader() != themedPaint.getShader()) {
                        ChatActivity.this.skeletonServicePaint.setShader(themedPaint.getShader());
                        ChatActivity.this.skeletonColorMatrix.setSaturation(ChatActivity.SKELETON_SATURATION);
                        ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                    }
                    int i4 = 0;
                    while (i4 < getChildCount()) {
                        View childAt = getChildAt(i4);
                        if (childAt instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                            lerp = (int) (childAt.getTop() + chatMessageCell.getCurrentBackgroundDrawable(z).getBounds().top + (currentMessagesGroup != null ? transitionParams.top + currentMessagesGroup.transitionParams.offsetTop : 0.0f));
                            if (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) {
                                lerp = AndroidUtilities.lerp(height, lerp, childAt.getAlpha());
                            } else if (childAt.getAlpha() != 1.0f) {
                                lerp = height;
                            }
                            if (lerp >= height) {
                                i4++;
                                z = true;
                            }
                            height = lerp;
                            i4++;
                            z = true;
                        } else {
                            if (childAt instanceof ChatActionCell) {
                                lerp = (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) ? AndroidUtilities.lerp(height, childAt.getTop(), childAt.getAlpha()) : childAt.getAlpha() == 1.0f ? childAt.getTop() : height;
                                if (lerp >= height) {
                                }
                                height = lerp;
                            }
                            i4++;
                            z = true;
                        }
                    }
                    if (!ChatActivity.this.isSkeletonVisible()) {
                        if (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs > 200) {
                            ChatActivity.this.messageSkeletons.clear();
                        }
                    } else {
                        boolean z3 = SharedConfig.getDevicePerformanceClass() != 0 && Theme.hasGradientService();
                        int i5 = Theme.key_windowBackgroundWhite;
                        boolean z4 = ColorUtils.calculateLuminance(getThemedColor(i5)) <= 0.699999988079071d && Theme.hasGradientService();
                        boolean z5 = ColorUtils.calculateLuminance(getThemedColor(i5)) <= 0.009999999776482582d && Theme.hasGradientService();
                        if (z3) {
                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, BitmapDescriptorFactory.HUE_RED, getY() - ChatActivity.this.contentPanTranslation);
                        }
                        int alpha = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        if (z5) {
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha * 4.0f));
                        }
                        float currentTimeMillis = ChatActivity.this.startMessageAppearTransitionMs != 0 ? 1.0f - (((float) (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs)) / 200.0f) : 1.0f;
                        int alpha2 = ChatActivity.this.skeletonPaint.getAlpha();
                        int alpha3 = ChatActivity.this.skeletonServicePaint.getAlpha();
                        int alpha4 = ChatActivity.this.skeletonOutlinePaint.getAlpha();
                        ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                        float f2 = (themeDelegate == null || !themeDelegate.isDark || ChatActivity.this.skeletonServicePaint.getShader() == null) ? 1.0f : 0.3f;
                        ChatActivity.this.skeletonServicePaint.setAlpha((int) (255.0f * currentTimeMillis * f2));
                        float f3 = alpha2;
                        ChatActivity.this.skeletonPaint.setAlpha((int) (f2 * currentTimeMillis * f3));
                        ChatActivity.this.skeletonOutlinePaint.setAlpha((int) (currentTimeMillis * f3));
                        int i6 = 0;
                        while (true) {
                            chatActivity = ChatActivity.this;
                            f = 3.0f;
                            if (height <= chatActivity.blurredViewTopOffset) {
                                break;
                            }
                            int m108dp2 = height - AndroidUtilities.m108dp(3.0f);
                            if (i6 >= ChatActivity.this.messageSkeletons.size()) {
                                messageSkeleton = ChatActivity.this.getNewSkeleton(z2);
                                ChatActivity.this.messageSkeletons.add(messageSkeleton);
                            } else {
                                messageSkeleton = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i6);
                            }
                            messageSkeleton.lastBottom = ChatActivity.this.startMessageAppearTransitionMs != 0 ? ChatActivity.this.messages.size() <= 2 ? Math.min(messageSkeleton.lastBottom, m108dp2) : messageSkeleton.lastBottom : m108dp2;
                            height = m108dp2 - messageSkeleton.height;
                            i6++;
                        }
                        if (chatActivity.messageSkeletons.isEmpty()) {
                            m108dp = getHeight() - ChatActivity.this.blurredViewBottomOffset;
                            i = 0;
                        } else {
                            i = 0;
                            m108dp = ((MessageSkeleton) ChatActivity.this.messageSkeletons.get(0)).lastBottom + AndroidUtilities.m108dp(3.0f);
                        }
                        int i7 = i;
                        int i8 = m108dp;
                        int i9 = i7;
                        while (i9 < ChatActivity.this.messageSkeletons.size() && i8 > ChatActivity.this.blurredViewTopOffset) {
                            int m108dp3 = i8 - AndroidUtilities.m108dp(f);
                            MessageSkeleton messageSkeleton2 = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i9);
                            int i10 = messageSkeleton2.lastBottom;
                            int i11 = alpha;
                            ChatActivity.this.skeletonBackgroundDrawable.setBounds(z2 ? AndroidUtilities.m108dp(f) : AndroidUtilities.m107dp(51), i10 - messageSkeleton2.height, messageSkeleton2.width, i10);
                            if (z3) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonServicePaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonPaint);
                            if (z4) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, Theme.chat_actionBackgroundGradientDarkenPaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonOutlinePaint);
                            if (!z2) {
                                int i12 = 27;
                                if (z3) {
                                    canvas.drawCircle(AndroidUtilities.m107dp(27), i10 - AndroidUtilities.m107dp(21), AndroidUtilities.m107dp(21), ChatActivity.this.skeletonServicePaint);
                                    i12 = 27;
                                }
                                canvas.drawCircle(AndroidUtilities.m107dp(i12), i10 - AndroidUtilities.m107dp(21), AndroidUtilities.m107dp(21), ChatActivity.this.skeletonPaint);
                                int i13 = 27;
                                if (z4) {
                                    canvas.drawCircle(AndroidUtilities.m107dp(27), i10 - AndroidUtilities.m107dp(21), AndroidUtilities.m107dp(21), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    i13 = 27;
                                }
                                canvas.drawCircle(AndroidUtilities.m107dp(i13), i10 - AndroidUtilities.m107dp(21), AndroidUtilities.m107dp(21), ChatActivity.this.skeletonOutlinePaint);
                            }
                            i8 = m108dp3 - messageSkeleton2.height;
                            i9++;
                            alpha = i11;
                            f = 3.0f;
                        }
                        ChatActivity.this.skeletonServicePaint.setAlpha(alpha3);
                        ChatActivity.this.skeletonPaint.setAlpha(alpha2);
                        ChatActivity.this.skeletonOutlinePaint.setAlpha(alpha4);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha);
                        invalidate();
                    }
                    ChatActivity chatActivity4 = ChatActivity.this;
                    chatActivity4.lastSkeletonCount = chatActivity4.messageSkeletons.size();
                    ChatActivity chatActivity5 = ChatActivity.this;
                    chatActivity5.lastSkeletonMessageCount = chatActivity5.messages.size();
                    if (ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
                        canvas.restore();
                    }
                }
            }
            super.draw(canvas);
        }

        private void updateSkeletonColors() {
            boolean z = ColorUtils.calculateLuminance(getThemedColor(Theme.key_windowBackgroundWhite)) <= 0.699999988079071d;
            int i = Theme.key_listSelector;
            int blendARGB = ColorUtils.blendARGB(getThemedColor(i), Color.argb(z ? 33 : 3, 255, 255, 255), z ? 0.9f : 0.5f);
            int alphaComponent = ColorUtils.setAlphaComponent(getThemedColor(i), z ? 24 : ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
            if (ChatActivity.this.skeletonColor1 == alphaComponent && ChatActivity.this.skeletonColor0 == blendARGB) {
                return;
            }
            ChatActivity.this.skeletonColor0 = blendARGB;
            ChatActivity.this.skeletonColor1 = alphaComponent;
            ChatActivity.this.skeletonGradient = new LinearGradient((float) BitmapDescriptorFactory.HUE_RED, (float) BitmapDescriptorFactory.HUE_RED, ChatActivity.this.skeletonGradientWidth = AndroidUtilities.m107dp(200), (float) BitmapDescriptorFactory.HUE_RED, new int[]{alphaComponent, blendARGB, blendARGB, alphaComponent}, new float[]{BitmapDescriptorFactory.HUE_RED, 0.4f, 0.6f, 1.0f}, Shader.TileMode.CLAMP);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.skeletonTotalTranslation = (-chatActivity.skeletonGradientWidth) * 2;
            ChatActivity.this.skeletonPaint.setShader(ChatActivity.this.skeletonGradient);
            int argb = Color.argb(z ? 43 : 96, 255, 255, 255);
            ChatActivity.this.skeletonOutlineGradient = new LinearGradient((float) BitmapDescriptorFactory.HUE_RED, (float) BitmapDescriptorFactory.HUE_RED, ChatActivity.this.skeletonGradientWidth, (float) BitmapDescriptorFactory.HUE_RED, new int[]{0, argb, argb, 0}, new float[]{BitmapDescriptorFactory.HUE_RED, 0.4f, 0.6f, 1.0f}, Shader.TileMode.CLAMP);
            ChatActivity.this.skeletonOutlinePaint.setShader(ChatActivity.this.skeletonOutlineGradient);
        }

        private void updateSkeletonGradient() {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long abs = Math.abs(ChatActivity.this.skeletonLastUpdateTime - elapsedRealtime);
            if (abs > 17) {
                abs = 16;
            }
            if (abs < 4) {
                abs = 0;
            }
            int width = getWidth();
            ChatActivity.this.skeletonLastUpdateTime = elapsedRealtime;
            ChatActivity.access$19516(ChatActivity.this, ((float) (abs * width)) / 400.0f);
            if (ChatActivity.this.skeletonTotalTranslation >= width * 2) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.skeletonTotalTranslation = (-chatActivity.skeletonGradientWidth) * 2;
            }
            ChatActivity.this.skeletonMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, BitmapDescriptorFactory.HUE_RED);
            if (ChatActivity.this.skeletonGradient != null) {
                ChatActivity.this.skeletonGradient.setLocalMatrix(ChatActivity.this.skeletonMatrix);
            }
            ChatActivity.this.skeletonOutlineMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, BitmapDescriptorFactory.HUE_RED);
            if (ChatActivity.this.skeletonOutlineGradient != null) {
                ChatActivity.this.skeletonOutlineGradient.setLocalMatrix(ChatActivity.this.skeletonOutlineMatrix);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            canvas.save();
            if (ChatActivity.this.fragmentTransition == null || (ChatActivity.this.fromPullingDownTransition && !ChatActivity.this.toPullingDownTransition)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (!chatActivity.isInsideContainer) {
                    canvas.clipRect(BitmapDescriptorFactory.HUE_RED, (chatActivity.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4), getMeasuredWidth(), getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset);
                }
            }
            this.selectorRect.setEmpty();
            if (ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
                int save = canvas.save();
                float measuredHeight = ChatActivity.this.pullingDownAnimateProgress != BitmapDescriptorFactory.HUE_RED ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f;
                ChatActivity chatActivity2 = ChatActivity.this;
                float f = (-chatActivity2.pullingDownOffset) - measuredHeight;
                chatActivity2.drawingChatLisViewYoffset = f;
                canvas.translate(BitmapDescriptorFactory.HUE_RED, f);
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
                canvas.restoreToCount(save);
            } else {
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
            }
            canvas.restore();
        }

        private void drawChatForegroundElements(Canvas canvas) {
            boolean z;
            int size = this.drawTimeAfter.size();
            boolean z2 = false;
            if (size > 0) {
                for (int i = 0; i < size; i++) {
                    ChatMessageCell chatMessageCell = this.drawTimeAfter.get(i);
                    canvas.save();
                    canvas.translate(chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(false), chatMessageCell.getY());
                    chatMessageCell.drawTime(canvas, chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f, true);
                    canvas.restore();
                }
                this.drawTimeAfter.clear();
            }
            int size2 = this.drawNamesAfter.size();
            if (size2 > 0) {
                for (int i2 = 0; i2 < size2; i2++) {
                    ChatMessageCell chatMessageCell2 = this.drawNamesAfter.get(i2);
                    float left = chatMessageCell2.getLeft() + chatMessageCell2.getNonAnimationTranslationX(false);
                    float y = chatMessageCell2.getY();
                    float alpha = chatMessageCell2.shouldDrawAlphaLayer() ? chatMessageCell2.getAlpha() : 1.0f;
                    canvas.save();
                    canvas.translate(left, y);
                    chatMessageCell2.setInvalidatesParent(true);
                    chatMessageCell2.drawNamesLayout(canvas, alpha);
                    chatMessageCell2.setInvalidatesParent(false);
                    canvas.restore();
                }
                this.drawNamesAfter.clear();
            }
            int size3 = this.drawCaptionAfter.size();
            if (size3 > 0) {
                int i3 = 0;
                while (i3 < size3) {
                    ChatMessageCell chatMessageCell3 = this.drawCaptionAfter.get(i3);
                    boolean z3 = (chatMessageCell3.getCurrentPosition() == null || (chatMessageCell3.getCurrentPosition().flags & 1) != 0) ? z2 : true;
                    float alpha2 = chatMessageCell3.shouldDrawAlphaLayer() ? chatMessageCell3.getAlpha() : 1.0f;
                    float left2 = chatMessageCell3.getLeft() + chatMessageCell3.getNonAnimationTranslationX(z2);
                    float y2 = chatMessageCell3.getY();
                    canvas.save();
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell3.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null && currentMessagesGroup.transitionParams.backgroundChangeBounds) {
                        float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(true);
                        MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                        float f = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                        float f2 = transitionParams.top + transitionParams.offsetTop;
                        float f3 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                        float f4 = transitionParams.bottom + transitionParams.offsetBottom;
                        if (!transitionParams.backgroundChangeBounds) {
                            f2 += chatMessageCell3.getTranslationY();
                            f4 += chatMessageCell3.getTranslationY();
                        }
                        canvas.clipRect(f + AndroidUtilities.m107dp(8), f2 + AndroidUtilities.m107dp(8), f3 - AndroidUtilities.m107dp(8), f4 - AndroidUtilities.m107dp(8));
                    }
                    if (chatMessageCell3.getTransitionParams().wasDraw) {
                        canvas.translate(left2, y2);
                        chatMessageCell3.setInvalidatesParent(true);
                        chatMessageCell3.drawCaptionLayout(canvas, z3, alpha2);
                        z = false;
                        chatMessageCell3.setInvalidatesParent(false);
                        canvas.restore();
                    } else {
                        z = false;
                    }
                    i3++;
                    z2 = z;
                }
                this.drawCaptionAfter.clear();
            }
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r13v24, types: [boolean, int] */
        /* JADX WARN: Type inference failed for: r13v25 */
        /* JADX WARN: Type inference failed for: r13v26 */
        private void drawChatBackgroundElements(Canvas canvas) {
            int i;
            int i2;
            float f;
            int i3;
            int i4;
            int i5;
            int i6;
            float f2;
            ChatActivity chatActivity;
            boolean z;
            int i7;
            int i8;
            int i9;
            ChatActivity chatActivity2;
            MessageObject.GroupedMessages currentMessagesGroup;
            View childAt;
            boolean z2;
            int i10;
            ?? r13;
            ChatActivity chatActivity3;
            Canvas canvas2 = canvas;
            int childCount = getChildCount();
            boolean z3 = 0;
            int i11 = 0;
            MessageObject.GroupedMessages groupedMessages = null;
            while (true) {
                i = 4;
                i2 = 8;
                f = BitmapDescriptorFactory.HUE_RED;
                i3 = 2;
                if (i11 >= childCount) {
                    break;
                }
                childAt = getChildAt(i11);
                if (childAt.getVisibility() != 4 && childAt.getVisibility() != 8) {
                    if ((!ChatActivity.this.chatAdapter.isBot || !(childAt instanceof BotHelpCell)) && (!ChatActivity.this.isTemplatesChannel(true, z3) || !(childAt instanceof BotHelpCell))) {
                        if (childAt instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                            MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell.getCurrentMessagesGroup();
                            if (currentMessagesGroup2 == null || currentMessagesGroup2 != groupedMessages) {
                                MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                MessageBackgroundDrawable backgroundDrawable = chatMessageCell.getBackgroundDrawable();
                                if ((backgroundDrawable.isAnimationInProgress() || chatMessageCell.isDrawingSelectionBackground()) && (currentPosition == null || (currentPosition.flags & 2) != 0)) {
                                    if (!chatMessageCell.isHighlighted() && !chatMessageCell.isHighlightedAnimated()) {
                                        int y = (int) chatMessageCell.getY();
                                        canvas.save();
                                        if (currentPosition == null) {
                                            i10 = chatMessageCell.getMeasuredHeight();
                                        } else {
                                            int measuredHeight = chatMessageCell.getMeasuredHeight() + y;
                                            long j = 0;
                                            float f3 = 0.0f;
                                            for (int i12 = z3; i12 < childCount; i12++) {
                                                View childAt2 = getChildAt(i12);
                                                if (childAt2 instanceof ChatMessageCell) {
                                                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                                                    if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup2) {
                                                        MessageBackgroundDrawable backgroundDrawable2 = chatMessageCell2.getBackgroundDrawable();
                                                        y = Math.min(y, (int) chatMessageCell2.getY());
                                                        measuredHeight = Math.max(measuredHeight, ((int) chatMessageCell2.getY()) + chatMessageCell2.getMeasuredHeight());
                                                        long lastTouchTime = backgroundDrawable2.getLastTouchTime();
                                                        if (lastTouchTime > j) {
                                                            j = lastTouchTime;
                                                            f = backgroundDrawable2.getTouchX() + chatMessageCell2.getX();
                                                            f3 = backgroundDrawable2.getTouchY() + chatMessageCell2.getY();
                                                        }
                                                    }
                                                }
                                            }
                                            backgroundDrawable.setTouchCoordsOverride(f, f3 - y);
                                            i10 = measuredHeight - y;
                                        }
                                        int i13 = i10 + y;
                                        canvas2.clipRect(0, y, getMeasuredWidth(), i13);
                                        Paint themedPaint = getThemedPaint("paintChatMessageBackgroundSelected");
                                        ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                                        if (themeDelegate != null && !themeDelegate.isDark && themedPaint != null) {
                                            backgroundDrawable.setCustomPaint(themedPaint);
                                            float top = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                            int backgroundSizeY = ChatActivity.this.contentView.getBackgroundSizeY();
                                            ThemeDelegate themeDelegate2 = ChatActivity.this.themeDelegate;
                                            if (themeDelegate2 != null) {
                                                themeDelegate2.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell.getX(), top);
                                            } else {
                                                Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell.getX(), top);
                                            }
                                        } else {
                                            backgroundDrawable.setCustomPaint(null);
                                            backgroundDrawable.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                        }
                                        backgroundDrawable.setBounds(0, y, getMeasuredWidth(), i13);
                                        backgroundDrawable.draw(canvas2);
                                        canvas.restore();
                                    } else if (currentPosition == null) {
                                        Paint themedPaint2 = getThemedPaint("paintChatMessageBackgroundSelected");
                                        ThemeDelegate themeDelegate3 = ChatActivity.this.themeDelegate;
                                        if ((themeDelegate3 != null && themeDelegate3.isDark) || themedPaint2 == null) {
                                            themedPaint2 = Theme.chat_replyLinePaint;
                                            themedPaint2.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                        } else {
                                            float top2 = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                            int backgroundSizeY2 = ChatActivity.this.contentView.getBackgroundSizeY();
                                            ThemeDelegate themeDelegate4 = ChatActivity.this.themeDelegate;
                                            if (themeDelegate4 != null) {
                                                themeDelegate4.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell.getX(), top2);
                                            } else {
                                                Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell.getX(), top2);
                                            }
                                        }
                                        Paint paint = themedPaint2;
                                        canvas.save();
                                        canvas2.translate(BitmapDescriptorFactory.HUE_RED, chatMessageCell.getTranslationY());
                                        int alpha = paint.getAlpha();
                                        paint.setAlpha((int) (alpha * chatMessageCell.getHighlightAlpha() * chatMessageCell.getAlpha()));
                                        z2 = true;
                                        canvas.drawRect(BitmapDescriptorFactory.HUE_RED, chatMessageCell.getTop(), getMeasuredWidth(), chatMessageCell.getBottom(), paint);
                                        paint.setAlpha(alpha);
                                        canvas.restore();
                                    }
                                    z2 = true;
                                } else {
                                    z2 = true;
                                }
                                groupedMessages = currentMessagesGroup2;
                                r13 = z2;
                            } else {
                                r13 = 1;
                            }
                            if (ChatActivity.this.scrimView != chatMessageCell && currentMessagesGroup2 == null && chatMessageCell.drawBackgroundInParent()) {
                                canvas.save();
                                canvas2.translate(chatMessageCell.getX(), chatMessageCell.getY());
                                if (chatMessageCell.getScaleX() != 1.0f) {
                                    canvas2.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getPivotX(), chatMessageCell.getHeight() >> r13);
                                }
                                chatMessageCell.drawBackgroundInternal(canvas2, r13);
                                canvas.restore();
                            }
                        } else if (childAt instanceof ChatActionCell) {
                            ChatActionCell chatActionCell = (ChatActionCell) childAt;
                            if (chatActionCell.hasGradientService()) {
                                canvas.save();
                                canvas2.translate(chatActionCell.getX(), chatActionCell.getY());
                                canvas2.scale(chatActionCell.getScaleX(), chatActionCell.getScaleY(), chatActionCell.getMeasuredWidth() / 2.0f, chatActionCell.getMeasuredHeight() / 2.0f);
                                chatActionCell.drawBackground(canvas2, true);
                                canvas.restore();
                            }
                        }
                    }
                }
                i11++;
                z3 = 0;
            }
            float measuredHeight2 = ((((getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - chatActivity3.blurredViewBottomOffset) / 2.0f) - (childAt.getMeasuredHeight() / 2)) + ChatActivity.this.chatListViewPaddingTop;
            if (!((BotHelpCell) childAt).animating() && !ChatActivity.this.chatListView.fastScrollAnimationRunning) {
                if (childAt.getTop() > measuredHeight2) {
                    childAt.setTranslationY(measuredHeight2 - childAt.getTop());
                } else {
                    childAt.setTranslationY(BitmapDescriptorFactory.HUE_RED);
                }
            }
            boolean z4 = true;
            MessageObject.GroupedMessages currentMessagesGroup3 = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
            int i14 = 0;
            while (i14 < 3) {
                this.drawingGroups.clear();
                if (i14 != i3 || ChatActivity.this.chatListView.isFastScrollAnimationRunning()) {
                    int i15 = 0;
                    while (i15 < childCount) {
                        View childAt3 = ChatActivity.this.chatListView.getChildAt(i15);
                        if (childAt3 instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell3 = (ChatMessageCell) childAt3;
                            if (childAt3.getY() <= ChatActivity.this.chatListView.getHeight() && childAt3.getY() + childAt3.getHeight() >= f && chatMessageCell3.getVisibility() != i2 && (currentMessagesGroup = chatMessageCell3.getCurrentMessagesGroup()) != null && ((i14 != 0 || currentMessagesGroup.messages.size() != z4) && ((i14 != z4 || currentMessagesGroup.transitionParams.drawBackgroundForDeletedItems) && ((i14 != 0 || !chatMessageCell3.getMessageObject().deleted) && ((i14 != z4 || chatMessageCell3.getMessageObject().deleted) && ((i14 != i3 || chatMessageCell3.willRemovedAfterAnimation()) && (i14 == i3 || !chatMessageCell3.willRemovedAfterAnimation()))))))) {
                                if (!this.drawingGroups.contains(currentMessagesGroup)) {
                                    MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                    transitionParams.left = 0;
                                    transitionParams.top = 0;
                                    transitionParams.right = 0;
                                    transitionParams.bottom = 0;
                                    transitionParams.pinnedBotton = false;
                                    transitionParams.pinnedTop = false;
                                    transitionParams.cell = chatMessageCell3;
                                    this.drawingGroups.add(currentMessagesGroup);
                                }
                                currentMessagesGroup.transitionParams.pinnedTop = chatMessageCell3.isPinnedTop();
                                currentMessagesGroup.transitionParams.pinnedBotton = chatMessageCell3.isPinnedBottom();
                                int left = chatMessageCell3.getLeft() + chatMessageCell3.getBackgroundDrawableLeft();
                                int left2 = chatMessageCell3.getLeft() + chatMessageCell3.getBackgroundDrawableRight();
                                int top3 = chatMessageCell3.getTop() + chatMessageCell3.getBackgroundDrawableTop();
                                int top4 = chatMessageCell3.getTop() + chatMessageCell3.getBackgroundDrawableBottom();
                                if ((chatMessageCell3.getCurrentPosition().flags & i) == 0) {
                                    top3 -= AndroidUtilities.m107dp(10);
                                }
                                int i16 = top3;
                                if ((chatMessageCell3.getCurrentPosition().flags & i2) == 0) {
                                    top4 += AndroidUtilities.m107dp(10);
                                }
                                int i17 = top4;
                                if (chatMessageCell3.willRemovedAfterAnimation()) {
                                    currentMessagesGroup.transitionParams.cell = chatMessageCell3;
                                }
                                MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                int i18 = transitionParams2.top;
                                if (i18 == 0 || i16 < i18) {
                                    transitionParams2.top = i16;
                                }
                                int i19 = transitionParams2.bottom;
                                if (i19 == 0 || i17 > i19) {
                                    transitionParams2.bottom = i17;
                                }
                                int i20 = transitionParams2.left;
                                if (i20 == 0 || left < i20) {
                                    transitionParams2.left = left;
                                }
                                int i21 = transitionParams2.right;
                                if (i21 == 0 || left2 > i21) {
                                    transitionParams2.right = left2;
                                }
                            }
                        }
                        i15++;
                        i3 = 2;
                        f = BitmapDescriptorFactory.HUE_RED;
                    }
                    int i22 = 0;
                    while (i22 < this.drawingGroups.size()) {
                        MessageObject.GroupedMessages groupedMessages2 = this.drawingGroups.get(i22);
                        if (groupedMessages2 == currentMessagesGroup3) {
                            i7 = i14;
                            i8 = i22;
                            i9 = i2;
                        } else {
                            float nonAnimationTranslationX = groupedMessages2.transitionParams.cell.getNonAnimationTranslationX(z4);
                            MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages2.transitionParams;
                            float f4 = transitionParams3.left + nonAnimationTranslationX + transitionParams3.offsetLeft;
                            float f5 = transitionParams3.top + transitionParams3.offsetTop;
                            float f6 = transitionParams3.right + nonAnimationTranslationX + transitionParams3.offsetRight;
                            float f7 = transitionParams3.bottom + transitionParams3.offsetBottom;
                            if (!transitionParams3.backgroundChangeBounds) {
                                f5 += transitionParams3.cell.getTranslationY();
                                f7 += groupedMessages2.transitionParams.cell.getTranslationY();
                            }
                            if (f5 < (ChatActivity.this.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(20)) {
                                f5 = (ChatActivity.this.chatListViewPaddingTop - chatActivity2.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(20);
                            }
                            float f8 = f5;
                            if (f7 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.m107dp(20)) {
                                f7 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.m107dp(20);
                            }
                            float f9 = f7;
                            boolean z5 = (groupedMessages2.transitionParams.cell.getScaleX() == 1.0f && groupedMessages2.transitionParams.cell.getScaleY() == 1.0f) ? false : z4;
                            if (z5) {
                                canvas.save();
                                canvas2.scale(groupedMessages2.transitionParams.cell.getScaleX(), groupedMessages2.transitionParams.cell.getScaleY(), ((f6 - f4) / 2.0f) + f4, f8 + ((f9 - f8) / 2.0f));
                            }
                            int size = groupedMessages2.messages.size();
                            int i23 = 0;
                            while (true) {
                                if (i23 >= size) {
                                    z = true;
                                    break;
                                }
                                MessageObject messageObject = groupedMessages2.messages.get(i23);
                                if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                    z = false;
                                    break;
                                }
                                i23++;
                            }
                            MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages2.transitionParams;
                            i7 = i14;
                            i8 = i22;
                            i9 = 8;
                            transitionParams4.cell.drawBackground(canvas, (int) f4, (int) f8, (int) f6, (int) f9, transitionParams4.pinnedTop, transitionParams4.pinnedBotton, z, ChatActivity.this.contentView.getKeyboardHeight());
                            MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages2.transitionParams;
                            transitionParams5.cell = null;
                            transitionParams5.drawCaptionLayout = groupedMessages2.hasCaption;
                            if (z5) {
                                canvas.restore();
                                for (int i24 = 0; i24 < childCount; i24++) {
                                    View childAt4 = ChatActivity.this.chatListView.getChildAt(i24);
                                    if (childAt4 instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell4 = (ChatMessageCell) childAt4;
                                        if (chatMessageCell4.getCurrentMessagesGroup() == groupedMessages2) {
                                            int left3 = chatMessageCell4.getLeft();
                                            int top5 = chatMessageCell4.getTop();
                                            childAt4.setPivotX((f4 - left3) + ((f6 - f4) / 2.0f));
                                            childAt4.setPivotY((f8 - top5) + ((f9 - f8) / 2.0f));
                                        }
                                    }
                                }
                            }
                        }
                        i22 = i8 + 1;
                        canvas2 = canvas;
                        i2 = i9;
                        i14 = i7;
                        z4 = true;
                    }
                    i4 = i14;
                    i5 = i2;
                    i6 = 2;
                    f2 = BitmapDescriptorFactory.HUE_RED;
                } else {
                    i4 = i14;
                    i6 = i3;
                    f2 = f;
                    i5 = i2;
                }
                i14 = i4 + 1;
                canvas2 = canvas;
                i3 = i6;
                i2 = i5;
                f = f2;
                z4 = true;
                i = 4;
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:322:0x0615  */
        /* JADX WARN: Removed duplicated region for block: B:41:0x00a9  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x00b0  */
        /* JADX WARN: Removed duplicated region for block: B:51:0x00d1  */
        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean drawChild(android.graphics.Canvas r20, android.view.View r21, long r22) {
            /*
                Method dump skipped, instructions count: 1561
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.C421422.drawChild(android.graphics.Canvas, android.view.View, long):boolean");
        }

        @Override // android.view.View
        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
            AccessibilityNodeInfo.CollectionInfo collectionInfo;
            if (ChatActivity.this.currentEncryptedChat != null) {
                return;
            }
            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
            if (Build.VERSION.SDK_INT < 19 || (collectionInfo = accessibilityNodeInfo.getCollectionInfo()) == null) {
                return;
            }
            accessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo.obtain(collectionInfo.getRowCount(), 1, false));
        }

        @Override // android.view.View
        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return null;
            }
            return super.createAccessibilityNodeInfo();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            ChatActivity.this.chatListViewAttached = true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            ChatActivity.this.chatListViewAttached = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$23 */
    /* loaded from: classes5.dex */
    public class C421523 extends ChatListItemAnimator {
        Runnable finishRunnable;

        C421523(ChatActivity chatActivity, RecyclerListView recyclerListView, Theme.ResourcesProvider resourcesProvider) {
            super(chatActivity, recyclerListView, resourcesProvider);
        }

        @Override // androidx.recyclerview.widget.DefaultItemAnimator
        public void checkIsRunning() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator
        public void onAnimationStart() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("chatItemAnimator disable notifications");
            }
            ChatActivity.this.chatActivityEnterView.getAdjustPanLayoutHelper().runDelayedAnimation();
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator
        protected void onAllAnimationsDone() {
            super.onAllAnimationsDone();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$23$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C421523.this.lambda$onAllAnimationsDone$0();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAllAnimationsDone$0() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("chatItemAnimator enable notifications");
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator, androidx.recyclerview.widget.RecyclerView.ItemAnimator
        public void endAnimations() {
            super.endAnimations();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$23$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C421523.this.lambda$endAnimations$1();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$endAnimations$1() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("chatItemAnimator enable notifications");
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$24 */
    /* loaded from: classes5.dex */
    public class C421624 extends GridLayoutManagerFixed {
        boolean computingScroll;

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public boolean supportsPredictiveItemAnimations() {
            return true;
        }

        C421624(Context context, int i, int i2, boolean z) {
            super(context, i, i2, z);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public int getStartForFixGap() {
            return (int) ChatActivity.this.chatListViewPaddingTop;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        protected int getParentStart() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return 0;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getStartAfterPadding() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return super.getStartAfterPadding();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getTotalSpace() {
            if (this.computingScroll) {
                return (int) ((getHeight() - ChatActivity.this.chatListViewPaddingTop) - getPaddingBottom());
            }
            return super.getTotalSpace();
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollExtent(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollExtent = super.computeVerticalScrollExtent(state);
            this.computingScroll = false;
            return computeVerticalScrollExtent;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollOffset(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollOffset = super.computeVerticalScrollOffset(state);
            this.computingScroll = false;
            return computeVerticalScrollOffset;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollRange(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollRange = super.computeVerticalScrollRange(state);
            this.computingScroll = false;
            return computeVerticalScrollRange;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int i, int i2, boolean z) {
            if (!z) {
                i2 = (int) ((i2 - getPaddingTop()) + ChatActivity.this.chatListViewPaddingTop);
            }
            super.scrollToPositionWithOffset(i, i2, z);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i) {
            ChatActivity.this.scrollByTouch = false;
            LinearSmoothScrollerCustom linearSmoothScrollerCustom = new LinearSmoothScrollerCustom(recyclerView.getContext(), 0);
            linearSmoothScrollerCustom.setTargetPosition(i);
            startSmoothScroll(linearSmoothScrollerCustom);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        public boolean shouldLayoutChildFromOpositeSide(View view) {
            if (view instanceof ChatMessageCell) {
                return !((ChatMessageCell) view).getMessageObject().isOutOwner();
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        protected boolean hasSiblingChild(int i) {
            int i2;
            byte b;
            if (i >= ChatActivity.this.chatAdapter.messagesStartRow && i < ChatActivity.this.chatAdapter.messagesEndRow && (i2 = i - ChatActivity.this.chatAdapter.messagesStartRow) >= 0 && i2 < ChatActivity.this.messages.size()) {
                MessageObject messageObject = ChatActivity.this.messages.get(i2);
                MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                if (validGroupedMessage != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(messageObject);
                    if (groupedMessagePosition.minX != groupedMessagePosition.maxX && (b = groupedMessagePosition.minY) == groupedMessagePosition.maxY && b != 0) {
                        int size = validGroupedMessage.posArray.size();
                        for (int i3 = 0; i3 < size; i3++) {
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = validGroupedMessage.posArray.get(i3);
                            if (groupedMessagePosition2 != groupedMessagePosition) {
                                byte b2 = groupedMessagePosition2.minY;
                                byte b3 = groupedMessagePosition.minY;
                                if (b2 <= b3 && groupedMessagePosition2.maxY >= b3) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                super.onLayoutChildren(recycler, state);
                return;
            }
            try {
                super.onLayoutChildren(recycler, state);
            } catch (Exception e) {
                FileLog.m102e(e);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$24$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.C421624.this.lambda$onLayoutChildren$0();
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLayoutChildren$0() {
            ChatActivity.this.chatAdapter.notifyDataSetChanged(false);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollVerticallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
            int i2;
            boolean z;
            float f;
            float f2;
            boolean z2 = false;
            if (i < 0 && ChatActivity.this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
                ChatActivity.access$16816(ChatActivity.this, i);
                if (ChatActivity.this.pullingDownOffset < BitmapDescriptorFactory.HUE_RED) {
                    i = (int) ChatActivity.this.pullingDownOffset;
                    ChatActivity.this.pullingDownOffset = BitmapDescriptorFactory.HUE_RED;
                    ChatActivity.this.chatListView.invalidate();
                } else {
                    i = 0;
                }
            }
            int childCount = ChatActivity.this.chatListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    i2 = 0;
                    z = false;
                    break;
                }
                View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                ChatActivity chatActivity = ChatActivity.this;
                float f3 = chatActivity.chatListViewPaddingTop;
                int childAdapterPosition = chatActivity.chatListView.getChildAdapterPosition(childAt);
                ChatActivity chatActivity2 = ChatActivity.this;
                if (childAdapterPosition == (chatActivity2.reversed ? 0 : chatActivity2.chatAdapter.getItemCount() - 1)) {
                    i2 = super.scrollVerticallyBy(((float) (childAt.getTop() - i)) > f3 ? (int) (childAt.getTop() - f3) : i, recycler, state);
                    z = true;
                } else {
                    i3++;
                }
            }
            if (!z) {
                i2 = super.scrollVerticallyBy(i, recycler, state);
            }
            ChatActivity chatActivity3 = ChatActivity.this;
            if (chatActivity3.currentEncryptedChat == null && chatActivity3.chatMode == 0 && !ChatActivity.this.isInPreviewMode() && ChatActivity.this.getToolsController().isSwipeToGoToNextUnreadDialogEnabled() && !ChatActivity.this.albumMode && !ChatActivity.this.isTemplatesChannel(true, false) && i > 0 && i2 == 0 && ChatActivity.this.getToolsController().getSelectedDialogTypesForSwipeToGoToNextUnreadDialog().contains(ChatActivity.this.dialogType) && ChatActivity.this.chatListView.getScrollState() == 1 && !ChatActivity.this.chatListView.isFastScrollAnimationRunning() && !ChatActivity.this.chatListView.isMultiselect() && ChatActivity.this.reportType < 0) {
                if (ChatActivity.this.pullingDownOffset == BitmapDescriptorFactory.HUE_RED && ChatActivity.this.pullingDownDrawable != null) {
                    ChatActivity.this.pullingDownDrawable.updateDialog();
                }
                if (ChatActivity.this.pullingDownBackAnimator != null) {
                    ChatActivity.this.pullingDownBackAnimator.removeAllListeners();
                    ChatActivity.this.pullingDownBackAnimator.cancel();
                }
                float f4 = 0.05f;
                if (ChatActivity.this.pullingDownOffset < AndroidUtilities.m107dp(110)) {
                    float m107dp = ChatActivity.this.pullingDownOffset / AndroidUtilities.m107dp(110);
                    f = (1.0f - m107dp) * 0.65f;
                    f2 = m107dp * 0.45f;
                } else {
                    if (ChatActivity.this.pullingDownOffset < AndroidUtilities.m107dp(160)) {
                        float m107dp2 = (ChatActivity.this.pullingDownOffset - AndroidUtilities.m107dp(110)) / AndroidUtilities.m107dp(50);
                        f = (1.0f - m107dp2) * 0.45f;
                        f2 = m107dp2 * 0.05f;
                    }
                    float f5 = i * f4;
                    ChatActivity.access$16816(ChatActivity.this, f5);
                    ReactionsEffectOverlay.onScrolled((int) f5);
                    ChatActivity.this.chatListView.invalidate();
                }
                f4 = f + f2;
                float f52 = i * f4;
                ChatActivity.access$16816(ChatActivity.this, f52);
                ReactionsEffectOverlay.onScrolled((int) f52);
                ChatActivity.this.chatListView.invalidate();
            }
            if (ChatActivity.this.pullingDownOffset == BitmapDescriptorFactory.HUE_RED) {
                ChatActivity.this.chatListView.setOverScrollMode(0);
            } else {
                ChatActivity.this.chatListView.setOverScrollMode(2);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatPullingDownDrawable chatPullingDownDrawable = ChatActivity.this.pullingDownDrawable;
                if (ChatActivity.this.pullingDownOffset > BitmapDescriptorFactory.HUE_RED && ChatActivity.this.chatListView.getScrollState() == 1) {
                    z2 = true;
                }
                chatPullingDownDrawable.showBottomPanel(z2);
            }
            return i2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$58(View view) {
        if (this.floatingDateView.getAlpha() == BitmapDescriptorFactory.HUE_RED || this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(this.floatingDateView.getCustomDate() * 1000);
        int i = calendar.get(1);
        int i2 = calendar.get(2);
        int i3 = calendar.get(5);
        calendar.clear();
        calendar.set(i, i2, i3);
        jumpToDate((int) (calendar.getTime().getTime() / 1000));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$59(View view) {
        onPageDownClicked();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$30 */
    /* loaded from: classes5.dex */
    public class View$OnClickListenerC422330 implements View.OnClickListener {
        View$OnClickListenerC422330() {
        }

        private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
                ChatActivity.this.getMessagesStorage().getUnreadMention(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$30$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i) {
                        ChatActivity.View$OnClickListenerC422330.this.lambda$loadLastUnreadMention$0(i);
                    }
                });
                return;
            }
            final MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
            TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
            tLRPC$TL_messages_getUnreadMentions.peer = ChatActivity.this.getMessagesController().getInputPeer(ChatActivity.this.dialog_id);
            tLRPC$TL_messages_getUnreadMentions.limit = 1;
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.isTopic) {
                tLRPC$TL_messages_getUnreadMentions.top_msg_id = (int) chatActivity.threadMessageId;
                tLRPC$TL_messages_getUnreadMentions.flags |= 1;
            }
            tLRPC$TL_messages_getUnreadMentions.add_offset = ChatActivity.this.newMentionsCount - 1;
            ChatActivity.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$30$$ExternalSyntheticLambda2
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.View$OnClickListenerC422330.this.lambda$loadLastUnreadMention$2(messagesStorage, tLObject, tLRPC$TL_error);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$0(int i) {
            if (i == 0) {
                ChatActivity.this.hasAllMentionsLocal = false;
                loadLastUnreadMention();
                return;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$2(final MessagesStorage messagesStorage, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$30$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.View$OnClickListenerC422330.this.lambda$loadLastUnreadMention$1(tLObject, tLRPC$TL_error, messagesStorage);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$1(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, MessagesStorage messagesStorage) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$TL_error != null || tLRPC$messages_Messages.messages.isEmpty()) {
                if (tLRPC$messages_Messages != null) {
                    ChatActivity.this.newMentionsCount = tLRPC$messages_Messages.count;
                } else {
                    ChatActivity.this.newMentionsCount = 0;
                }
                messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.newMentionsCount);
                if (ChatActivity.this.newMentionsCount == 0) {
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                    return;
                }
                ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                loadLastUnreadMention();
                return;
            }
            int i = tLRPC$messages_Messages.messages.get(0).f1626id;
            MessageObject messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(i);
            messagesStorage.markMessageAsMention(ChatActivity.this.dialog_id, i);
            if (messageObject != null) {
                TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                tLRPC$Message.media_unread = true;
                tLRPC$Message.mentioned = true;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            loadLastUnreadMention();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$62(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(1, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda202
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$60();
            }
        });
        dimBehindView((View) this.mentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda136
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$61();
            }
        });
        view.performHapticFeedback(0, 2);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$60() {
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = this.messages.get(i);
            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                messageObject.setContentIsRead();
            }
        }
        this.newMentionsCount = 0;
        getMessagesController().markMentionsAsRead(this.dialog_id, getTopicId());
        this.hasAllMentionsLocal = true;
        showMentionDownButton(false, true);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$61() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$63(View view, MotionEvent motionEvent) {
        return ContentPreviewViewer.getInstance().onTouch(motionEvent, this.mentionContainer.getListView(), 0, this.mentionsOnItemClickListener, this.mentionContainer.getAdapter().isStickers() ? this.contentPreviewViewerDelegate : null, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$67(View view, int i) {
        AnimatedEmojiSpan animatedEmojiSpan;
        char c;
        BlurredFrameLayout blurredFrameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        if (i == 0 || this.mentionContainer.getAdapter().isBannedInline()) {
            return;
        }
        int i2 = i - 1;
        final Object item = this.mentionContainer.getAdapter().getItem(i2);
        int resultStartPosition = this.mentionContainer.getAdapter().getResultStartPosition();
        int resultLength = this.mentionContainer.getAdapter().getResultLength();
        Paint.FontMetricsInt fontMetricsInt = null;
        if (item instanceof TLRPC$TL_document) {
            if (this.chatMode == 0 && checkSlowMode(view)) {
                return;
            }
            boolean z = view instanceof StickerCell;
            MessageObject.SendAnimationData sendAnimationData = z ? ((StickerCell) view).getSendAnimationData() : null;
            final TLRPC$TL_document tLRPC$TL_document = (TLRPC$TL_document) item;
            final Object itemParent = this.mentionContainer.getAdapter().getItemParent(i2);
            final String findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(tLRPC$TL_document);
            Object[] objArr = (z && SharedConfig.isSendingStickerConfirmationEnabled) ? 1 : null;
            if (this.chatMode == 1 || isTemplatesChannel(true, true)) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda345
                    @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z2, int i3, String str) {
                        ChatActivity.this.lambda$createView$64(tLRPC$TL_document, findAnimatedEmojiEmoticon, itemParent, z2, i3, str);
                    }

                    @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public /* synthetic */ ArrayList getSelectedDialogs() {
                        return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                    }
                }, this.themeDelegate, (ChatActivity) null);
            } else if (objArr != null) {
                ContentPreviewViewer.getInstance().showInstantly(view, 0, this.contentPreviewViewerDelegate, this.themeDelegate);
            } else {
                getSendMessagesHelper().sendSticker(tLRPC$TL_document, findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, sendAnimationData, true, 0, false, itemParent, null);
            }
            if (objArr != null) {
                return;
            }
            hideFieldPanel(false);
            this.chatActivityEnterView.addStickerToRecent(tLRPC$TL_document);
            this.chatActivityEnterView.setFieldText("");
        } else if (item instanceof TLRPC$Chat) {
            TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) item;
            if (this.searchingForUser && (blurredFrameLayout2 = this.searchContainer) != null && blurredFrameLayout2.getVisibility() == 0) {
                searchUserMessages(null, tLRPC$Chat);
                return;
            }
            String publicUsername = ChatObject.getPublicUsername(tLRPC$Chat);
            if (publicUsername != null) {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + publicUsername + " ", false);
            }
        } else if (item instanceof TLRPC$User) {
            TLRPC$User tLRPC$User = (TLRPC$User) item;
            if (this.searchingForUser && (blurredFrameLayout = this.searchContainer) != null && blurredFrameLayout.getVisibility() == 0) {
                searchUserMessages(tLRPC$User, null);
            } else if (UserObject.getPublicUsername(tLRPC$User) != null) {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + UserObject.getPublicUsername(tLRPC$User) + " ", false);
            } else {
                SpannableString spannableString = new SpannableString(UserObject.getFirstName(tLRPC$User, false) + " ");
                spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.f1751id, 3), 0, spannableString.length(), 33);
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString, false);
            }
        } else if (item instanceof String) {
            if (this.mentionContainer.getAdapter().isBotCommands()) {
                if (this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda342
                        @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z2, int i3, String str) {
                            ChatActivity.this.lambda$createView$65(item, z2, i3, str);
                        }

                        @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public /* synthetic */ ArrayList getSelectedDialogs() {
                            return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                        }
                    }, this.themeDelegate, (ChatActivity) null);
                    return;
                } else if (checkSlowMode(view)) {
                    return;
                } else {
                    getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of((String) item, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, true, 0, null, false, null));
                    this.chatActivityEnterView.setFieldText("");
                    hideFieldPanel(false);
                    return;
                }
            }
            this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, item + " ", false);
        } else if (item instanceof TLRPC$BotInlineResult) {
            if (this.chatActivityEnterView.getFieldText() != null) {
                if (this.chatMode == 1 || !checkSlowMode(view)) {
                    final TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) item;
                    if (this.currentEncryptedChat != null) {
                        if ((tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaAuto) && "game".equals(tLRPC$BotInlineResult.type)) {
                            c = 1;
                        } else {
                            c = tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaInvoice ? (char) 2 : (char) 0;
                        }
                        if (c != 0) {
                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder.setTitle(LocaleController.getString("SendMessageTitle", C3632R.string.SendMessageTitle));
                            if (c == 1) {
                                builder.setMessage(LocaleController.getString("GameCantSendSecretChat", C3632R.string.GameCantSendSecretChat));
                            } else {
                                builder.setMessage(LocaleController.getString("InvoiceCantSendSecretChat", C3632R.string.InvoiceCantSendSecretChat));
                            }
                            builder.setNegativeButton(LocaleController.getString("OK", C3632R.string.OK), null);
                            showDialog(builder.create());
                            return;
                        }
                    }
                    if ((tLRPC$BotInlineResult.type.equals("photo") && (tLRPC$BotInlineResult.photo != null || tLRPC$BotInlineResult.content != null)) || ((tLRPC$BotInlineResult.type.equals(AnalyticsEvent.SendClip.typeGif) && (tLRPC$BotInlineResult.document != null || tLRPC$BotInlineResult.content != null)) || (tLRPC$BotInlineResult.type.equals("video") && tLRPC$BotInlineResult.document != null))) {
                        ArrayList<Object> arrayList = new ArrayList<>(this.mentionContainer.getAdapter().getSearchResultBotContext());
                        this.botContextResults = arrayList;
                        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                        PhotoViewer.getInstance().openPhotoForSelect(arrayList, this.mentionContainer.getAdapter().getItemPosition(i2), 3, false, this.botContextProvider, this);
                    } else if (this.chatMode == 1 || isTemplatesChannel(true, true)) {
                        AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda344
                            @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                            public final void didSelectDate(boolean z2, int i3, String str) {
                                ChatActivity.this.lambda$createView$66(tLRPC$BotInlineResult, z2, i3, str);
                            }

                            @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                            public /* synthetic */ ArrayList getSelectedDialogs() {
                                return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                            }
                        }, this.themeDelegate, this);
                    } else {
                        lambda$createView$66(tLRPC$BotInlineResult, true, 0, null);
                    }
                }
            }
        } else if (item instanceof TLRPC$TL_inlineBotWebView) {
            processInlineBotWebView((TLRPC$TL_inlineBotWebView) item);
        } else if (item instanceof TLRPC$TL_inlineBotSwitchPM) {
            processInlineBotContextPM((TLRPC$TL_inlineBotSwitchPM) item);
        } else if (item instanceof MediaDataController.KeywordResult) {
            String str = ((MediaDataController.KeywordResult) item).emoji;
            this.chatActivityEnterView.addEmojiToRecent(str);
            if (str != null && str.startsWith("animated_")) {
                try {
                    try {
                        fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                    } catch (Exception e) {
                        FileLog.m101e((Throwable) e, false);
                    }
                    long parseLong = Long.parseLong(str.substring(9));
                    TLRPC$Document findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, parseLong);
                    SpannableString spannableString2 = new SpannableString(MessageObject.findAnimatedEmojiEmoticon(findDocument));
                    if (findDocument != null) {
                        animatedEmojiSpan = new AnimatedEmojiSpan(findDocument, fontMetricsInt);
                    } else {
                        animatedEmojiSpan = new AnimatedEmojiSpan(parseLong, fontMetricsInt);
                    }
                    spannableString2.setSpan(animatedEmojiSpan, 0, spannableString2.length(), 33);
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString2, false);
                } catch (Exception unused) {
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
                }
            } else {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
            }
            this.mentionContainer.updateVisibility(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$64(TLRPC$TL_document tLRPC$TL_document, String str, Object obj, boolean z, int i, String str2) {
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$TL_document, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, null, z, i, false, obj, str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$65(Object obj, boolean z, int i, String str) {
        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of((String) obj, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, z, i, null, false, null));
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$70(View view, int i) {
        boolean z = false;
        if (getParentActivity() != null && this.mentionContainer.getAdapter().isLongClickEnabled() && i != 0 && !this.mentionContainer.getAdapter().isBannedInline()) {
            Object item = this.mentionContainer.getAdapter().getItem(i - 1);
            if (item instanceof TLRPC$User) {
                if (this.mentionContainer.getAdapter().isBannedInline()) {
                    return false;
                }
                final TLRPC$User tLRPC$User = (TLRPC$User) item;
                DialogUtils.createEditTextAlert(this.parentLayout.getLastFragment(), new EditTextDialogModel(LocaleController.getInternalString(C3632R.string.custom_mention_change), null, LocaleController.getInternalString(C3632R.string.custom_mention_hint), UserObject.getFirstName(tLRPC$User), isKeyboardVisible(), LocaleController.getString("Cancel", C3632R.string.Cancel), LocaleController.getString("OK", C3632R.string.OK)), new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda152
                    @Override // com.iMe.fork.utils.Callbacks$Callback1
                    public final void invoke(Object obj) {
                        ChatActivity.this.lambda$createView$68(tLRPC$User, (String) obj);
                    }
                }, null).show();
                return true;
            } else if (item instanceof String) {
                if (this.mentionContainer.getAdapter().isBotCommands()) {
                    if (URLSpanBotCommand.enabled) {
                        this.chatActivityEnterView.setFieldText("");
                        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        String str = (String) item;
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        if (tLRPC$Chat != null && tLRPC$Chat.megagroup) {
                            z = true;
                        }
                        chatActivityEnterView.setCommand(null, str, true, z);
                        return true;
                    }
                    return false;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
                builder.setMessage(LocaleController.getString("ClearSearch", C3632R.string.ClearSearch));
                builder.setPositiveButton(LocaleController.getString("ClearButton", C3632R.string.ClearButton), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i2) {
                        ChatActivity.this.lambda$createView$69(dialogInterface, i2);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
                showDialog(builder.create());
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$68(TLRPC$User tLRPC$User, String str) {
        SpannableString spannableString = new SpannableString(str + ", ");
        spannableString.setSpan(new URLSpanUserMention(Long.toString(tLRPC$User.f1751id), 3), 0, str.length(), 33);
        this.chatActivityEnterView.replaceWithText(this.mentionContainer.getAdapter().getResultStartPosition(), this.mentionContainer.getAdapter().getResultLength(), spannableString, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$69(DialogInterface dialogInterface, int i) {
        this.mentionContainer.getAdapter().clearRecentHashtags();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$72(View view) {
        this.wasManualScroll = true;
        getMessagesController().getNextReactionMention(this.dialog_id, getTopicId(), this.reactionsMentionCount, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda138
            @Override // androidx.core.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.this.lambda$createView$71((Integer) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$71(Integer num) {
        if (num.intValue() == 0) {
            this.reactionsMentionCount = 0;
            updateReactionsMentionButton(true);
            getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
            return;
        }
        updateReactionsMentionButton(true);
        scrollToMessageId(num.intValue(), 0, false, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$75(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(0, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$73();
            }
        });
        dimBehindView((View) this.reactionsMentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda135
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$74();
            }
        });
        view.performHapticFeedback(0, 2);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$73() {
        for (int i = 0; i < this.messages.size(); i++) {
            this.messages.get(i).markReactionsAsRead();
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$74() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$76(View view, int i) {
        getMediaDataController().jumpToSearchedMessage(this.classGuid, i);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$77(View view, MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            checkRecordLocked(false);
        }
        this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$40 */
    /* loaded from: classes5.dex */
    public class C423440 extends ChatActivityEnterView {
        int lastContentViewHeight;
        int messageEditTextPredrawHeigth;
        int messageEditTextPredrawScrollY;

        C423440(Activity activity, SizeNotifierFrameLayout sizeNotifierFrameLayout, ChatActivity chatActivity, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(activity, sizeNotifierFrameLayout, chatActivity, z, resourcesProvider);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onInterceptTouchEvent(motionEvent);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView
        protected boolean pannelAnimationEnabled() {
            return ChatActivity.this.openAnimationEnded;
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView
        public void openKeyboard() {
            if (ChatActivity.this.forwardingPreviewView != null) {
                return;
            }
            super.openKeyboard();
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView
        public void checkAnimation() {
            View view;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                this.shouldAnimateEditTextWithBounds = false;
                return;
            }
            int backgroundTop = getBackgroundTop();
            if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0 && backgroundTop != ChatActivity.this.chatActivityEnterViewAnimateFromTop && this.lastContentViewHeight == ChatActivity.this.contentView.getMeasuredHeight()) {
                int i = (this.animatedTop + ChatActivity.this.chatActivityEnterViewAnimateFromTop) - backgroundTop;
                this.animatedTop = i;
                this.messageEditTextContainer.invalidate();
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.removeAllListeners();
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                float f = i;
                ChatActivity.this.chatListView.setTranslationY(f);
                View view2 = this.topView;
                if (view2 != null && view2.getVisibility() == 0) {
                    this.topView.setTranslationY(this.animatedTop + ((1.0f - this.topViewEnterProgress) * view.getLayoutParams().height));
                    View view3 = this.topLineView;
                    if (view3 != null) {
                        view3.setTranslationY(this.animatedTop);
                    }
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(f);
                }
                ChatActivity.this.changeBoundAnimator = ValueAnimator.ofFloat(f, BitmapDescriptorFactory.HUE_RED);
                ChatActivity.this.changeBoundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$40$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.C423440.this.lambda$checkAnimation$0(valueAnimator);
                    }
                });
                ChatActivity.this.changeBoundAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.40.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ((ChatActivityEnterView) C423440.this).animatedTop = 0;
                        if (((ChatActivityEnterView) C423440.this).topView == null || ((ChatActivityEnterView) C423440.this).topView.getVisibility() != 0) {
                            ChatActivity.this.chatListView.setTranslationY(BitmapDescriptorFactory.HUE_RED);
                            MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                            if (mentionsContainerView2 != null) {
                                mentionsContainerView2.setTranslationY(BitmapDescriptorFactory.HUE_RED);
                            }
                        } else {
                            ((ChatActivityEnterView) C423440.this).topView.setTranslationY(((ChatActivityEnterView) C423440.this).animatedTop + ((1.0f - ((ChatActivityEnterView) C423440.this).topViewEnterProgress) * ((ChatActivityEnterView) C423440.this).topView.getLayoutParams().height));
                            if (((ChatActivityEnterView) C423440.this).topLineView != null) {
                                ((ChatActivityEnterView) C423440.this).topLineView.setTranslationY(((ChatActivityEnterView) C423440.this).animatedTop);
                            }
                        }
                        ChatActivity.this.changeBoundAnimator = null;
                    }
                });
                ChatActivity.this.changeBoundAnimator.setDuration(250L);
                ChatActivity.this.changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                if (!ChatActivity.this.waitingForSendingMessageLoad) {
                    ChatActivity.this.changeBoundAnimator.start();
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            } else if (this.lastContentViewHeight != ChatActivity.this.contentView.getMeasuredHeight()) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            }
            if (this.shouldAnimateEditTextWithBounds) {
                EditTextCaption editTextCaption = this.messageEditText;
                editTextCaption.setOffsetY(editTextCaption.getOffsetY() - ((this.messageEditTextPredrawHeigth - this.messageEditText.getMeasuredHeight()) + (this.messageEditTextPredrawScrollY - this.messageEditText.getScrollY())));
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.messageEditText.getOffsetY(), BitmapDescriptorFactory.HUE_RED);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$40$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.C423440.this.lambda$checkAnimation$1(valueAnimator);
                    }
                });
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                ChatActivity.this.messageEditTextAnimator = ofFloat;
                ofFloat.setDuration(250L);
                ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                ofFloat.start();
                this.shouldAnimateEditTextWithBounds = false;
            }
            this.lastContentViewHeight = ChatActivity.this.contentView.getMeasuredHeight();
            ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$0(ValueAnimator valueAnimator) {
            float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            this.animatedTop = (int) floatValue;
            View view = this.topView;
            if (view != null && view.getVisibility() == 0) {
                View view2 = this.topView;
                view2.setTranslationY(((1.0f - this.topViewEnterProgress) * view2.getLayoutParams().height) + floatValue);
                View view3 = this.topLineView;
                if (view3 != null) {
                    view3.setTranslationY(floatValue);
                }
            } else {
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(floatValue);
                }
                ChatActivity.this.chatListView.setTranslationY(floatValue);
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            this.messageEditTextContainer.invalidate();
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$1(ValueAnimator valueAnimator) {
            this.messageEditText.setOffsetY(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.p043ui.Components.ChatActivityEnterView
        protected void onLineCountChanged(int i, int i2) {
            if (ChatActivity.this.chatActivityEnterView != null) {
                this.shouldAnimateEditTextWithBounds = true;
                this.messageEditTextPredrawHeigth = this.messageEditText.getMeasuredHeight();
                this.messageEditTextPredrawScrollY = this.messageEditText.getScrollY();
                ChatActivity.this.contentView.invalidate();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$79(View view) {
        MessageObject messageObject;
        int i = this.fieldPanelShown;
        if (i == 1 && (messageObject = this.editingMessageObject) != null) {
            if (messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
                if (this.chatAttachAlert == null) {
                    createChatAttachView();
                }
                this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
                openAttachMenu();
                return;
            }
            scrollToMessageId(this.editingMessageObject.getId(), 0, true, 0, true, 0);
        } else if (this.messagePreviewParams != null) {
            if (i != 2) {
                if (i == 3) {
                    SharedConfig.forwardingOptionsHintHintShowed();
                    openForwardingPreview(1);
                    return;
                } else if (i == 4) {
                    openForwardingPreview(2);
                    return;
                } else {
                    return;
                }
            }
            if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
                MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                if (!messagePreviewParams.hasSecretMessages) {
                    ReplyQuote replyQuote = messagePreviewParams.quote;
                    SharedConfig.replyingOptionsHintHintShowed();
                    openForwardingPreview(0);
                    return;
                }
            }
            MessageObject messageObject2 = this.replyingMessageObject;
            if (messageObject2 != null) {
                scrollToMessageId(messageObject2.getId(), 0, true, 0, true, 0);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$80(View view) {
        MessageObject messageObject;
        int i = this.fieldPanelShown;
        if (i == 2) {
            this.replyingQuote = null;
            this.replyingMessageObject = null;
            MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.updateReply(null, null, this.dialog_id, null);
            }
            fallbackFieldPanel();
        } else if (i == 3) {
            openAnotherForward();
        } else if (i == 4) {
            this.foundWebPage = null;
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 != null) {
                int i2 = this.currentAccount;
                MessageObject messageObject2 = this.replyingMessageObject;
                messagePreviewParams2.updateLink(i2, null, null, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
            }
            this.chatActivityEnterView.setWebPage(null, false);
            editResetMediaManual();
            fallbackFieldPanel();
        } else {
            if (ChatObject.isForum(this.currentChat) && !this.isTopic && (messageObject = this.replyingMessageObject) != null) {
                long topicId = MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true);
                if (topicId != 0) {
                    getMediaDataController().cleanDraft(this.dialog_id, topicId, false);
                }
            }
            showFieldPanel(false, null, null, null, null, true, 0, null, true, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$81(View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null) {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$82(ChatActivityEnterTopView.EditViewButton editViewButton, FrameLayout frameLayout, View view) {
        if (this.isInMultipleFilesSending) {
            showSelectFilesDialog();
            return;
        }
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (editViewButton.isEditButton()) {
                openEditingMessageInPhotoEditor();
            } else {
                frameLayout.callOnClick();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$83(View view) {
        this.bottomOverlayChatText.callOnClick();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$89(final Context context, View view) {
        String str;
        if (getParentActivity() == null || this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
            return;
        }
        int i = this.chatMode;
        if (i == 3) {
            Bundle bundle = new Bundle();
            long savedDialogId = getSavedDialogId();
            if (savedDialogId >= 0) {
                bundle.putLong("user_id", savedDialogId);
            } else {
                bundle.putLong("chat_id", -savedDialogId);
            }
            presentFragment(new ChatActivity(bundle));
        } else if (this.reportType >= 0) {
            showDialog(new ReportAlert(getParentActivity(), this.reportType, getResourceProvider()) { // from class: org.telegram.ui.ChatActivity.48
                @Override // org.telegram.p043ui.Components.ReportAlert
                protected void onSend(int i2, String str2) {
                    ArrayList arrayList = new ArrayList();
                    for (int i3 = 0; i3 < ChatActivity.this.selectedMessagesIds[0].size(); i3++) {
                        arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[0].keyAt(i3)));
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC$User tLRPC$User = chatActivity.currentUser;
                    AlertsCreator.sendReport(tLRPC$User != null ? MessagesController.getInputPeer(tLRPC$User) : MessagesController.getInputPeer(chatActivity.currentChat), ChatActivity.this.reportType, str2, arrayList, 0);
                    ChatActivity.this.finishFragment();
                    ChatActivity.this.chatActivityDelegate.onReport();
                }
            });
        } else if (i == 2) {
            finishFragment();
            if (isForwardingEditor()) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                Iterator<MessageObject> it = this.messages.iterator();
                while (it.hasNext()) {
                    MessageObject next = it.next();
                    if (!next.isDateObject) {
                        arrayList.add(next);
                    }
                }
                Collections.reverse(arrayList);
                this.chatActivityDelegate.onForwardingMessagesChanged(arrayList);
                return;
            }
            this.chatActivityDelegate.onUnpin(true, this.bottomOverlayChatText.getTag() == null, false, this, this.pinnedMessageIds, this.pinnedMessageObjects);
        } else {
            TLRPC$User tLRPC$User = this.currentUser;
            if (tLRPC$User != null && this.userBlocked) {
                if (tLRPC$User.bot) {
                    final String str2 = this.botUser;
                    this.botUser = null;
                    getMessagesController().unblockPeer(this.currentUser.f1751id, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda253
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$createView$84(str2);
                        }
                    });
                    return;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", C3632R.string.AreYouSureUnblockContact));
                builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda32
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i2) {
                        ChatActivity.this.lambda$createView$85(dialogInterface, i2);
                    }
                });
                builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
                builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
                showDialog(builder.create());
            } else if (UserObject.isReplyUser(tLRPC$User)) {
                toggleMute(true);
            } else {
                TLRPC$User tLRPC$User2 = this.currentUser;
                if (tLRPC$User2 != null && tLRPC$User2.bot && (str = this.botUser) != null) {
                    if (str.length() != 0) {
                        getMessagesController().sendBotStart(this.currentUser, this.botUser);
                    } else {
                        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false, null));
                    }
                    this.botUser = null;
                    lambda$didReceivedNotification$183();
                    return;
                }
                if (ChatObject.isChannel(this.currentChat)) {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (!(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
                        if (ChatObject.isNotInChat(tLRPC$Chat)) {
                            if (this.currentChat.join_request) {
                                showBottomOverlayProgress(true, true);
                                MessagesController.getInstance(this.currentAccount).addUserToChat(this.currentChat.f1602id, UserConfig.getInstance(this.currentAccount).getCurrentUser(), 0, null, null, true, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda209
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.this.lambda$createView$86();
                                    }
                                }, new MessagesController.ErrorDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda307
                                    @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                                    public final boolean run(TLRPC$TL_error tLRPC$TL_error) {
                                        boolean lambda$createView$87;
                                        lambda$createView$87 = ChatActivity.this.lambda$createView$87(context, tLRPC$TL_error);
                                        return lambda$createView$87;
                                    }
                                });
                                return;
                            }
                            Runnable runnable = this.chatInviteRunnable;
                            if (runnable != null) {
                                AndroidUtilities.cancelRunOnUIThread(runnable);
                                this.chatInviteRunnable = null;
                            }
                            showBottomOverlayProgress(true, true);
                            getMessagesController().addUserToChat(this.currentChat.f1602id, getUserConfig().getCurrentUser(), 0, null, this, null);
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                            if (!hasReportSpam() || this.reportSpamButton.getTag(C3632R.C3635id.object_tag) == null) {
                                return;
                            }
                            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                            edit.putInt("dialog_bar_vis3" + this.dialog_id, 3).commit();
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(this.dialog_id));
                            return;
                        }
                        toggleMute(true);
                        return;
                    }
                }
                TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
                AlertsCreator.createClearOrDeleteDialogAlert(this, false, this.currentChat, this.currentUser, this.currentEncryptedChat != null, true, tLRPC$ChatFull != null && tLRPC$ChatFull.can_delete_channel, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda308
                    @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                    public final void run(boolean z) {
                        ChatActivity.this.lambda$createView$88(z);
                    }
                }, this.themeDelegate);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$84(String str) {
        if (str != null && str.length() != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
        } else {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false, null));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$85(DialogInterface dialogInterface, int i) {
        getMessagesController().unblockPeer(this.currentUser.f1751id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$86() {
        showBottomOverlayProgress(false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$87(Context context, TLRPC$TL_error tLRPC$TL_error) {
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putLong("dialog_join_requested_time_" + this.dialog_id, System.currentTimeMillis()).commit();
        if (tLRPC$TL_error != null && "INVITE_REQUEST_SENT".equals(tLRPC$TL_error.text)) {
            JoinGroupAlert.showBulletin(context, this, ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup);
        }
        showBottomOverlayProgress(false, true);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$88(boolean z) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.closeChats;
        notificationCenter.removeObserver(this, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i, new Object[0]);
        finishFragment();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needDeleteDialog, Long.valueOf(this.dialog_id), this.currentUser, this.currentChat, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$90(View view) {
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 18, LocaleController.getString("BroadcastGroupInfo", C3632R.string.BroadcastGroupInfo));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$91() {
        return this.currentEncryptedChat != null || getMessagesController().isChatNoForwards(this.currentChat);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$92(float[] fArr) {
        fArr[1] = this.chatListView.getBottom() - this.blurredViewBottomOffset;
        fArr[0] = (this.chatListView.getTop() + this.chatListViewPaddingTop) - AndroidUtilities.m107dp(4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setFilterMessages(boolean z) {
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter.isFiltered == z) {
            return;
        }
        chatActivityAdapter.isFiltered = z;
        if (z) {
            updateFilteredMessages();
            return;
        }
        chatActivityAdapter.updateRowsSafe();
        this.chatAdapter.notifyDataSetChanged(true);
    }

    private void updateFilteredMessages() {
        MessageObject messageObject;
        ArrayList arrayList = new ArrayList(MediaDataController.getInstance(this.currentAccount).getFoundMessageObjects());
        this.chatAdapter.filteredMessages.clear();
        for (int i = 0; i < arrayList.size(); i++) {
            MessageObject messageObject2 = (MessageObject) arrayList.get(i);
            int i2 = 0;
            while (true) {
                if (i2 >= this.messages.size()) {
                    messageObject = null;
                    break;
                }
                messageObject = this.messages.get(i2);
                if (messageObject.getDialogId() == messageObject2.getDialogId() && messageObject.getId() == messageObject2.getId()) {
                    break;
                }
                i2++;
            }
            if (messageObject2.stableId == 0) {
                messageObject2.checkMediaExistance();
                if (messageObject != null) {
                    messageObject2.copyStableParams(messageObject);
                } else {
                    int i3 = lastStableId;
                    lastStableId = i3 + 1;
                    messageObject2.stableId = i3;
                }
            }
            messageObject2.isOutOwnerCached = null;
            TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
            if (tLRPC$Message != null) {
                tLRPC$Message.out = true;
            }
            this.chatAdapter.filteredMessages.add(messageObject2);
        }
        this.chatAdapter.filteredEndReached = MediaDataController.getInstance(this.currentAccount).searchEndReached();
        this.chatAdapter.updateRowsSafe();
        this.chatAdapter.notifyDataSetChanged(true);
    }

    private void createBottomMessagesActionButtons() {
        if (this.replyButton != null || getContext() == null) {
            return;
        }
        if (!this.isInsideContainer) {
            this.replyButton = new TextView(getContext());
            if (isForwardingEditor()) {
                this.replyButton.setText(LocaleController.getInternalString(C3632R.string.forwarding_editor_move_down));
            } else {
                this.replyButton.setText(LocaleController.getString("Reply", C3632R.string.Reply));
            }
            this.replyButton.setGravity(16);
            this.replyButton.setTextSize(1, 15.0f);
            this.replyButton.setPadding(AndroidUtilities.m107dp(isForwardingEditor() ? 21 : 14), 0, AndroidUtilities.m107dp(21), 0);
            this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
            TextView textView = this.replyButton;
            int i = Theme.key_actionBarActionModeDefaultIcon;
            textView.setTextColor(getThemedColor(i));
            this.replyButton.setCompoundDrawablePadding(AndroidUtilities.m107dp(7));
            this.replyButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            Drawable mutate = getContext().getResources().getDrawable(C3632R.C3634drawable.input_reply).mutate();
            mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
            if (isForwardingEditor()) {
                this.replyButton.setCompoundDrawablePadding(AndroidUtilities.m107dp(6));
                final Rect bounds = mutate.getBounds();
                this.replyButton.setCompoundDrawablesWithIntrinsicBounds((Drawable) null, (Drawable) null, new LayerDrawable(this, new Drawable[]{mutate}) { // from class: org.telegram.ui.ChatActivity.54
                    @Override // android.graphics.drawable.LayerDrawable, android.graphics.drawable.Drawable
                    public void draw(Canvas canvas) {
                        canvas.save();
                        Rect rect = bounds;
                        float width = rect.left + (rect.width() / 2.0f);
                        Rect rect2 = bounds;
                        canvas.rotate(-90.0f, width, rect2.top + (rect2.width() / 2.0f));
                        canvas.scale(1.0f, -1.0f, bounds.width() / 2.0f, bounds.width() / 2.0f);
                        super.draw(canvas);
                        canvas.restore();
                    }
                }, (Drawable) null);
            } else {
                this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate, (Drawable) null, (Drawable) null, (Drawable) null);
            }
            this.replyButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$createBottomMessagesActionButtons$93(view);
                }
            });
            this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
        }
        this.forwardButton = new TextView(getContext());
        if (isForwardingEditor()) {
            this.forwardButton.setText(LocaleController.getInternalString(C3632R.string.forwarding_editor_move_up));
        } else {
            this.forwardButton.setText(LocaleController.getString("Forward", C3632R.string.Forward));
        }
        this.forwardButton.setGravity(16);
        this.forwardButton.setTextSize(1, 15.0f);
        this.forwardButton.setPadding(AndroidUtilities.m107dp(21), 0, AndroidUtilities.m107dp(21), 0);
        this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.m107dp(6));
        this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
        TextView textView2 = this.forwardButton;
        int i2 = Theme.key_actionBarActionModeDefaultIcon;
        textView2.setTextColor(getThemedColor(i2));
        this.forwardButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        Drawable mutate2 = getContext().getResources().getDrawable(C3632R.C3634drawable.input_forward).mutate();
        mutate2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i2), PorterDuff.Mode.MULTIPLY));
        if (isForwardingEditor()) {
            final Rect bounds2 = mutate2.getBounds();
            mutate2 = new LayerDrawable(this, new Drawable[]{mutate2}) { // from class: org.telegram.ui.ChatActivity.55
                @Override // android.graphics.drawable.LayerDrawable, android.graphics.drawable.Drawable
                public void draw(Canvas canvas) {
                    canvas.save();
                    Rect rect = bounds2;
                    float width = rect.left + (rect.width() / 2.0f);
                    Rect rect2 = bounds2;
                    canvas.rotate(-90.0f, width, rect2.top + (rect2.width() / 2.0f));
                    super.draw(canvas);
                    canvas.restore();
                }
            };
        }
        this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate2, (Drawable) null, (Drawable) null, (Drawable) null);
        this.forwardButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda89
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createBottomMessagesActionButtons$94(view);
            }
        });
        this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$93(View view) {
        int i;
        if (isForwardingEditor()) {
            moveSelectedMessages(false);
        } else if (this.isReplyAsMultiReply) {
            this.presenter.getMultiReplyMessage(this.selectedMessagesIds, this.currentChat);
            for (int i2 = 1; i2 >= 0; i2--) {
                this.selectedMessagesIds[i2].clear();
                this.selectedMessagesCanCopyIds[i2].clear();
                this.selectedMessagesCanStarIds[i2].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setFieldFocused();
                this.chatActivityEnterView.openKeyboard();
            }
        } else {
            MessageObject messageObject = null;
            for (int i3 = 1; i3 >= 0; i3--) {
                if (messageObject == null && this.selectedMessagesIds[i3].size() != 0) {
                    messageObject = this.messagesDict[i3].get(this.selectedMessagesIds[i3].keyAt(0));
                }
                this.selectedMessagesIds[i3].clear();
                this.selectedMessagesCanCopyIds[i3].clear();
                this.selectedMessagesCanStarIds[i3].clear();
            }
            hideActionMode();
            if (messageObject != null && ((i = messageObject.messageOwner.f1626id) > 0 || (i < 0 && this.currentEncryptedChat != null))) {
                showFieldPanelForReply(messageObject);
            }
            updatePinnedMessageView(true);
            updateVisibleRows();
            updateSelectedMessageReactions();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$94(View view) {
        openForward(false, false);
    }

    private void checkInstantSearch() {
        TLRPC$Chat chat;
        String string = getArguments().getString("searchFromString", null);
        long j = getArguments().getInt("search_from_user_id", 0);
        if (string != null) {
            openSearchWithText(string);
        } else if (j != 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
            if (user != null) {
                openSearchWithText("");
                ImageView imageView = this.searchUserButton;
                if (imageView != null) {
                    imageView.callOnClick();
                }
                searchUserMessages(user, null);
            }
        } else {
            long j2 = getArguments().getInt("search_from_chat_id", 0);
            if (j2 == 0 || (chat = getMessagesController().getChat(Long.valueOf(j2))) == null) {
                return;
            }
            openSearchWithText("");
            ImageView imageView2 = this.searchUserButton;
            if (imageView2 != null) {
                imageView2.callOnClick();
            }
            searchUserMessages(null, chat);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x00af  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0232  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x02b7  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0302  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void createTopPanel() {
        /*
            Method dump skipped, instructions count: 842
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.createTopPanel():void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$96(View view) {
        AlertsCreator.showBlockReportSpamAlert(this, this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat, this.reportSpamButton.getTag(C3632R.C3635id.object_tag) != null, this.chatInfo, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda309
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public final void run(int i) {
                ChatActivity.this.lambda$createTopPanel$95(i);
            }
        }, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$95(int i) {
        if (i == 0) {
            updateTopPanel(true);
        } else {
            finishFragment();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$99(View view) {
        if (this.addToContactsButtonArchive) {
            getMessagesController().addDialogToFolder(this.dialog_id, 0, 0, 0L);
            createUndoView();
            UndoView undoView = this.undoView;
            if (undoView == null) {
                return;
            }
            undoView.showWithAction(this.dialog_id, 23, (Runnable) null);
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putBoolean("dialog_bar_archived" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_block" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_report" + this.dialog_id, false);
            edit.commit();
            updateTopPanel(false);
            getNotificationsController().clearDialogNotificationsSettings(this.dialog_id, getTopicId());
        } else if (this.addToContactsButton.getTag() != null && ((Integer) this.addToContactsButton.getTag()).intValue() == 4) {
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull == null || tLRPC$ChatFull.participants == null) {
                return;
            }
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                longSparseArray.put(this.chatInfo.participants.participants.get(i).user_id, null);
            }
            long j = this.chatInfo.f1603id;
            InviteMembersBottomSheet inviteMembersBottomSheet = new InviteMembersBottomSheet(getContext(), this.currentAccount, longSparseArray, this.chatInfo.f1603id, this, this.themeDelegate);
            inviteMembersBottomSheet.setDelegate(new GroupCreateActivity.ContactsAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda361
                @Override // org.telegram.p043ui.GroupCreateActivity.ContactsAddActivityDelegate
                public final void didSelectUsers(ArrayList arrayList, int i2) {
                    ChatActivity.this.lambda$createTopPanel$97(arrayList, i2);
                }

                @Override // org.telegram.p043ui.GroupCreateActivity.ContactsAddActivityDelegate
                public /* synthetic */ void needAddBot(TLRPC$User tLRPC$User) {
                    GroupCreateActivity.ContactsAddActivityDelegate.CC.$default$needAddBot(this, tLRPC$User);
                }
            });
            inviteMembersBottomSheet.show();
        } else if (this.addToContactsButton.getTag() != null) {
            shareMyContact(1, null);
        } else {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", this.currentUser.f1751id);
            bundle.putBoolean("addContact", true);
            ContactAddActivity contactAddActivity = new ContactAddActivity(bundle);
            contactAddActivity.setDelegate(new ContactAddActivity.ContactAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda359
                @Override // org.telegram.p043ui.ContactAddActivity.ContactAddActivityDelegate
                public final void didAddToContacts() {
                    ChatActivity.this.lambda$createTopPanel$98();
                }
            });
            presentFragment(contactAddActivity);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$97(ArrayList arrayList, int i) {
        getMessagesController().addUsersToChat(this.currentChat, this, arrayList, i, null, null, null);
        getMessagesController().hidePeerSettingsBar(this.dialog_id, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$98() {
        if (this.undoView != null || getContext() == null) {
            return;
        }
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 8, this.currentUser);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$100(View view) {
        TopicsController topicsController = getMessagesController().getTopicsController();
        long j = this.currentChat.f1602id;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic = this.forumTopic;
        int i = tLRPC$TL_forumTopic.f1658id;
        tLRPC$TL_forumTopic.closed = false;
        topicsController.toggleCloseTopic(j, i, false);
        updateTopicButtons();
        lambda$didReceivedNotification$183();
        updateTopPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$101(View view) {
        long j = this.dialog_id;
        if (this.currentEncryptedChat != null) {
            j = this.currentUser.f1751id;
        }
        getMessagesController().hidePeerSettingsBar(j, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    private void createTranslateButton() {
        if (this.translateButton != null || getContext() == null) {
            return;
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
            return;
        }
        TranslateButton translateButton = new TranslateButton(getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.58
            @Override // org.telegram.p043ui.Components.TranslateButton
            protected void onButtonClick() {
                if (!ChatActivity.this.getUserConfig().isPremium()) {
                    SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                    edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), 14).commit();
                    ChatActivity.this.showDialog(new PremiumFeatureBottomSheet(ChatActivity.this, 13, false));
                } else {
                    ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId());
                }
                ChatActivity.this.updateTopPanel(true);
            }

            @Override // org.telegram.p043ui.Components.TranslateButton
            protected void onCloseClick() {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), 140).commit();
                ChatActivity.this.updateTopPanel(true);
            }
        };
        this.translateButton = translateButton;
        this.topChatPanelView.addView(translateButton, LayoutHelper.createFrame(-1, 36, 83, 0, 0, 0, 2));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createUndoView() {
        if (this.undoView != null || getContext() == null || this.contentView == null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, false, this.themeDelegate);
        this.undoView = undoView;
        undoView.setAdditionalTranslationY(AndroidUtilities.m107dp(51));
        this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2, 83, 8, 0, 8, 8));
    }

    private void createActionMode() {
        if (this.selectedMessagesCountTextView != null || getContext() == null) {
            return;
        }
        ActionBarMenu createActionMode = this.actionBar.createActionMode();
        NumberTextView numberTextView = new NumberTextView(createActionMode.getContext());
        this.selectedMessagesCountTextView = numberTextView;
        numberTextView.setTextSize(18);
        this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.selectedMessagesCountTextView.setTextColor(getThemedColor(Theme.key_actionBarActionModeDefaultIcon));
        this.selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda134
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view, MotionEvent motionEvent) {
                boolean lambda$createActionMode$102;
                lambda$createActionMode$102 = ChatActivity.lambda$createActionMode$102(view, motionEvent);
                return lambda$createActionMode$102;
            }
        });
        createActionMode.addView(this.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        if (this.currentEncryptedChat == null) {
            this.actionModeViews.add(createActionMode.addItemWithWidth(25, C3632R.C3634drawable.msg_download, AndroidUtilities.m107dp(48), LocaleController.getString("SaveToMusic", C3632R.string.SaveToMusic)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, C3632R.C3634drawable.msg_edit, AndroidUtilities.m107dp(48), LocaleController.getString("Edit", C3632R.string.Edit)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, C3632R.C3634drawable.msg_fave, AndroidUtilities.m107dp(48), LocaleController.getString("AddToFavorites", C3632R.string.AddToFavorites)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, C3632R.C3634drawable.msg_copy, AndroidUtilities.m107dp(48), LocaleController.getString("Copy", C3632R.string.Copy)));
            if (!isTemplatesChannel(false, false)) {
                this.actionModeViews.add(createActionMode.addItemWithWidth(IdFabric$Menu.MESSAGE_SAVE_CLOUD, C3632R.C3634drawable.fork_forward_cloud, AndroidUtilities.m107dp(48), LocaleController.getInternalString(C3632R.string.chat_message_popup_option_forward_cloud)));
            }
            this.actionModeViews.add(createActionMode.addItemWithWidth(11, C3632R.C3634drawable.msg_forward, AndroidUtilities.m107dp(54), LocaleController.getString("Forward", C3632R.string.Forward)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, C3632R.C3634drawable.msg_delete, AndroidUtilities.m107dp(54), LocaleController.getString("Delete", C3632R.string.Delete)));
            if (isForwardingEditor()) {
                ActionBarMenuItem addItemWithWidth = createActionMode.addItemWithWidth(IdFabric$Menu.OPTIONS, C3632R.C3634drawable.ic_ab_other, AndroidUtilities.m107dp(48), LocaleController.getString("AccDescrMoreOptions", C3632R.string.AccDescrMoreOptions));
                this.actionModeOptions = addItemWithWidth;
                int i = IdFabric$Menu.GROUP_MESSAGES;
                int i2 = C3632R.C3634drawable.input_bot2;
                this.groupMessagesItem = addItemWithWidth.addSubItem(i, i2, LocaleController.getInternalString(C3632R.string.forwarding_editor_group));
                this.ungroupMessagesItem = this.actionModeOptions.addSubItem(IdFabric$Menu.UNGROUP_MESSAGES, i2, LocaleController.getInternalString(C3632R.string.forwarding_editor_ungroup));
                this.actionModeViews.add(this.actionModeOptions);
            }
        } else {
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, C3632R.C3634drawable.msg_edit, AndroidUtilities.m107dp(54), LocaleController.getString("Edit", C3632R.string.Edit)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, C3632R.C3634drawable.msg_fave, AndroidUtilities.m107dp(54), LocaleController.getString("AddToFavorites", C3632R.string.AddToFavorites)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, C3632R.C3634drawable.msg_copy, AndroidUtilities.m107dp(54), LocaleController.getString("Copy", C3632R.string.Copy)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, C3632R.C3634drawable.msg_delete, AndroidUtilities.m107dp(54), LocaleController.getString("Delete", C3632R.string.Delete)));
        }
        createActionMode.getItem(23).setVisibility((this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) ? 0 : 8);
        createActionMode.getItem(10).setVisibility((getMessagesController().isChatNoForwards(this.currentChat) || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
        createActionMode.getItem(22).setVisibility(this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0 ? 0 : 8);
        createActionMode.getItem(12).setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createSearchContainer() {
        if (this.searchContainer != null || getContext() == null) {
            return;
        }
        BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(getContext(), this.contentView) { // from class: org.telegram.ui.ChatActivity.59
            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                if (ChatActivity.this.chatActivityEnterView.getVisibility() != 0) {
                    Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                    Theme.chat_composeShadowDrawable.draw(canvas);
                }
                Rect rect = AndroidUtilities.rectTmp2;
                rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
            }

            @Override // android.view.ViewGroup
            protected void measureChildWithMargins(View view, int i, int i2, int i3, int i4) {
                if (view == ChatActivity.this.searchCountText) {
                    int i5 = 14;
                    if (ChatActivity.this.searchCalendarButton != null && ChatActivity.this.searchCalendarButton.getVisibility() != 8) {
                        i5 = 62;
                    }
                    if (ChatActivity.this.searchUserButton != null && ChatActivity.this.searchUserButton.getVisibility() != 8) {
                        i5 += 48;
                    }
                    ((ViewGroup.MarginLayoutParams) view.getLayoutParams()).leftMargin = AndroidUtilities.m107dp(i5);
                }
                super.measureChildWithMargins(view, i, i2, i3, i4);
            }
        };
        this.searchContainer = blurredFrameLayout;
        blurredFrameLayout.drawBlur = false;
        blurredFrameLayout.isTopView = false;
        blurredFrameLayout.setWillNotDraw(false);
        this.searchContainer.setVisibility(4);
        this.searchContainer.setPadding(0, AndroidUtilities.m107dp(3), 0, 0);
        this.searchContainer.setClipToPadding(false);
        View view = new View(getContext());
        this.searchAsListTogglerView = view;
        view.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda131
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view2, MotionEvent motionEvent) {
                boolean lambda$createSearchContainer$103;
                lambda$createSearchContainer$103 = ChatActivity.this.lambda$createSearchContainer$103(view2, motionEvent);
                return lambda$createSearchContainer$103;
            }
        });
        if (Build.VERSION.SDK_INT >= 21) {
            this.searchAsListTogglerView.setBackground(Theme.getSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), false));
        }
        this.searchAsListTogglerView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda98
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$104(view2);
            }
        });
        this.searchContainer.addView(this.searchAsListTogglerView, LayoutHelper.createFrame(-1, -1.0f, 0, (float) BitmapDescriptorFactory.HUE_RED, (Theme.chat_composeShadowDrawable.getIntrinsicHeight() / AndroidUtilities.density) - 3.0f, (float) BitmapDescriptorFactory.HUE_RED, (float) BitmapDescriptorFactory.HUE_RED));
        ImageView imageView = new ImageView(getContext());
        this.searchUpButton = imageView;
        imageView.setScaleType(ImageView.ScaleType.CENTER);
        this.searchUpButton.setImageResource(C3632R.C3634drawable.msg_go_up);
        ImageView imageView2 = this.searchUpButton;
        int i = Theme.key_chat_searchPanelIcons;
        imageView2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        ImageView imageView3 = this.searchUpButton;
        int i2 = Theme.key_actionBarActionModeDefaultSelector;
        imageView3.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchUpButton, LayoutHelper.createFrame(48, 48, 53, 0, 0, 48, 0));
        this.searchUpButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$105(view2);
            }
        });
        this.searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", C3632R.string.AccDescrSearchNext));
        ImageView imageView4 = new ImageView(getContext());
        this.searchDownButton = imageView4;
        imageView4.setScaleType(ImageView.ScaleType.CENTER);
        this.searchDownButton.setImageResource(C3632R.C3634drawable.msg_go_down);
        this.searchDownButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchDownButton, LayoutHelper.createFrame(48, 48, 53, 0, 0, 0, 0));
        this.searchDownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda72
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$106(view2);
            }
        });
        this.searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", C3632R.string.AccDescrSearchPrev));
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && (!ChatObject.isChannel(tLRPC$Chat) || this.currentChat.megagroup)) {
            ImageView imageView5 = new ImageView(getContext());
            this.searchUserButton = imageView5;
            imageView5.setScaleType(ImageView.ScaleType.CENTER);
            this.searchUserButton.setImageResource(C3632R.C3634drawable.msg_usersearch);
            this.searchUserButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
            this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
            this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48, 51, 48, 0, 0, 0));
            this.searchUserButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda86
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ChatActivity.this.lambda$createSearchContainer$107(view2);
                }
            });
            this.searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", C3632R.string.AccDescrSearchByUser));
        }
        ImageView imageView6 = new ImageView(getContext());
        this.searchCalendarButton = imageView6;
        imageView6.setScaleType(ImageView.ScaleType.CENTER);
        this.searchCalendarButton.setImageResource(C3632R.C3634drawable.msg_calendar);
        this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
        this.searchCalendarButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda80
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$108(view2);
            }
        });
        this.searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", C3632R.string.JumpToDate));
        SearchCounterView searchCounterView = new SearchCounterView(getContext(), this.themeDelegate);
        this.searchCountText = searchCounterView;
        searchCounterView.setGravity(3);
        this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, -2, 16, 0, 0, 108, 0));
        this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
        AnimatedTextView animatedTextView = new AnimatedTextView(getContext(), true, true, true);
        this.searchOtherButton = animatedTextView;
        animatedTextView.setGravity(17);
        this.searchOtherButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.searchOtherButton.setTextColor(getThemedColor(Theme.key_chat_fieldOverlayText));
        this.searchOtherButton.setTextSize(AndroidUtilities.m107dp(15));
        AnimatedTextView animatedTextView2 = this.searchOtherButton;
        int i3 = Theme.key_windowBackgroundWhite;
        animatedTextView2.setBackground(Theme.createSelectorWithBackgroundDrawable(getThemedColor(i3), Theme.blendOver(getThemedColor(i3), getThemedColor(Theme.key_listSelector))));
        this.searchOtherButton.setVisibility(8);
        this.searchOtherButton.setAlpha(BitmapDescriptorFactory.HUE_RED);
        this.searchContainer.addView(this.searchOtherButton, LayoutHelper.createFrame(-1, -1, 119));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createSearchContainer$103(View view, MotionEvent motionEvent) {
        return getMediaDataController().getFoundMessageObjects().size() <= 1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$104(View view) {
        if (getMediaDataController().getFoundMessageObjects().size() > 1) {
            HintView hintView = this.searchAsListHint;
            if (hintView != null) {
                hintView.hide();
            }
            toggleMesagesSearchListView();
            if (SharedConfig.searchMessagesAsListUsed) {
                return;
            }
            SharedConfig.setSearchMessagesAsListUsed(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$105(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 1, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        showMessagesSearchListView(false);
        if (SharedConfig.searchMessagesAsListUsed || SharedConfig.searchMessagesAsListHintShows >= 3 || this.searchAsListHintShown || Math.random() > 0.25d) {
            return;
        }
        showSearchAsListHint();
        this.searchAsListHintShown = true;
        SharedConfig.increaseSearchAsListHintShows();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$106(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 2, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$107(View view) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.setReversed(true);
            this.mentionContainer.getAdapter().setSearchingMentions(true);
        }
        this.searchCalendarButton.setVisibility(8);
        this.searchUserButton.setVisibility(8);
        this.searchingForUser = true;
        this.searchingUserMessages = null;
        this.searchingChatMessages = null;
        this.searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", C3632R.string.SearchMembers));
        this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", C3632R.string.SearchFrom));
        if (this.isNeedHideKeyboardOnOpenSearchUserMessages) {
            AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
        }
        this.searchItem.clearSearchText();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$108(View view) {
        if (getParentActivity() == null) {
            return;
        }
        AndroidUtilities.hideKeyboard(this.searchItem.getSearchField());
        showDialog(AlertsCreator.createCalendarPickerDialog(getParentActivity(), 1375315200000L, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity.60
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public void run(int i) {
                ChatActivity.this.jumpToDate(i);
            }
        }, this.themeDelegate).create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showSearchShowOther(final boolean z) {
        this.searchOtherButton.setVisibility(0);
        this.searchOtherButton.animate().alpha(z ? 1.0f : BitmapDescriptorFactory.HUE_RED).withEndAction(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda285
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showSearchShowOther$109(z);
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showSearchShowOther$109(boolean z) {
        this.searchOtherButton.setVisibility(z ? 0 : 8);
    }

    public void onPageDownClicked() {
        this.wasManualScroll = true;
        this.textSelectionHelper.cancelTextSelectionRunnable();
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda182
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$onPageDownClicked$110();
            }
        };
        int i = this.createUnreadMessageAfterId;
        if (i != 0) {
            scrollToMessageId(i, 0, false, this.returnToLoadIndex, true, 0, runnable);
            return;
        }
        int i2 = this.returnToMessageId;
        if (i2 > 0) {
            scrollToMessageId(i2, 0, true, this.returnToLoadIndex, true, 0, runnable);
            return;
        }
        scrollToLastMessage(false, true, runnable);
        if (this.pinnedMessageIds.isEmpty()) {
            return;
        }
        this.forceScrollToFirst = true;
        this.forceNextPinnedMessageId = this.pinnedMessageIds.get(0).intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onPageDownClicked$110() {
        setPagedownLoading(true, true);
    }

    private void playReactionAnimation(Integer num) {
        ChatMessageCell findMessageCell;
        if (this.fragmentView == null || (findMessageCell = findMessageCell(num.intValue(), false)) == null) {
            return;
        }
        TLRPC$MessagePeerReaction randomUnreadReaction = findMessageCell.getMessageObject().getRandomUnreadReaction();
        if (randomUnreadReaction != null && findMessageCell.reactionsLayoutInBubble.hasUnreadReactions) {
            ReactionsEffectOverlay.show(this, null, findMessageCell, null, BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(randomUnreadReaction.reaction), this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
            ReactionsEffectOverlay.startAnimation();
        }
        findMessageCell.markReactionsAsRead();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, boolean z) {
        setScrimView(view);
        dimBehindView(z ? 0.2f : BitmapDescriptorFactory.HUE_RED, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, float f) {
        setScrimView(view);
        dimBehindView(f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setScrimView(View view) {
        View view2 = this.scrimView;
        if (view2 == view) {
            return;
        }
        if (view2 != null && (view2 instanceof ChatActionCell)) {
            ((ChatActionCell) view2).setInvalidateWithParent(null);
        }
        this.scrimView = view;
        if (view instanceof ChatActionCell) {
            ((ChatActionCell) view).setInvalidateWithParent(this.fragmentView);
        }
    }

    public void dimBehindView(boolean z) {
        dimBehindView(z ? 0.2f : BitmapDescriptorFactory.HUE_RED, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkInstantCameraView() {
        if (this.instantCameraView != null || getContext() == null) {
            return;
        }
        InstantCameraView instantCameraView = new InstantCameraView(this, getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.61
            @Override // org.telegram.p043ui.Components.InstantCameraView
            protected void clipBlur(Canvas canvas) {
                canvas.clipRect(0, 0, getWidth(), getHeight() - AndroidUtilities.m108dp(1.5f));
            }
        };
        this.instantCameraView = instantCameraView;
        this.contentView.addView(instantCameraView, 21, LayoutHelper.createFrame(-1, -1, 51));
    }

    private void dimBehindView(float f, boolean z) {
        ValueAnimator ofFloat;
        final boolean z2 = f > BitmapDescriptorFactory.HUE_RED;
        View view = this.scrimView;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            chatMessageCell.setInvalidatesParent(z2);
            if (z2) {
                restartSticker(chatMessageCell);
            }
        }
        this.contentView.invalidate();
        this.chatListView.invalidate();
        AnimatorSet animatorSet = this.scrimAnimatorSet;
        if (animatorSet != null) {
            animatorSet.removeAllListeners();
            this.scrimAnimatorSet.cancel();
        }
        this.scrimAnimatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        if (z2) {
            this.scrimViewAlpha = 1.0f;
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            ofFloat = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, f);
            arrayList.add(ofFloat);
        } else {
            ofFloat = ValueAnimator.ofFloat(this.scrimPaintAlpha, BitmapDescriptorFactory.HUE_RED);
            arrayList.add(ofFloat);
        }
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda7
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$dimBehindView$111(valueAnimator2);
            }
        });
        if (!z2 || z) {
            FrameLayout frameLayout = this.pagedownButton;
            if (frameLayout != null) {
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
            }
            FrameLayout frameLayout2 = this.mentiondownButton;
            if (frameLayout2 != null) {
                Property property2 = View.ALPHA;
                float[] fArr2 = new float[1];
                fArr2[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, fArr2));
            }
            FrameLayout frameLayout3 = this.reactionsMentiondownButton;
            if (frameLayout3 != null) {
                Property property3 = View.ALPHA;
                float[] fArr3 = new float[1];
                fArr3[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout3, property3, fArr3));
            }
        }
        this.scrimAnimatorSet.playTogether(arrayList);
        this.scrimAnimatorSet.setDuration(z2 ? 150L : 220L);
        this.scrimAnimatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.62
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (z2) {
                    return;
                }
                ChatActivity.this.setScrimView(null);
                ChatActivity.this.scrimViewReaction = null;
                ChatActivity.this.contentView.invalidate();
                ChatActivity.this.chatListView.invalidate();
            }
        });
        if (this.scrimView != null && this.scrimViewAlpha <= BitmapDescriptorFactory.HUE_RED) {
            setScrimView(null);
        }
        this.scrimAnimatorSet.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$dimBehindView$111(ValueAnimator valueAnimator) {
        this.scrimPaintAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$PinnedMessageButton */
    /* loaded from: classes5.dex */
    public class PinnedMessageButton extends TextView {
        public PinnedMessageButton(ChatActivity chatActivity, Context context) {
            super(context);
            setSingleLine(true);
            setLines(1);
            setMaxLines(1);
            setEllipsize(TextUtils.TruncateAt.END);
            setTextColor(chatActivity.getThemedColor(Theme.key_featuredStickers_buttonText));
            setBackground(Theme.AdaptiveRipple.filledRect(chatActivity.getThemedColor(Theme.key_featuredStickers_addButton), 16.0f));
            setTextSize(1, 14.0f);
            setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            setGravity(17);
            setPadding(AndroidUtilities.m107dp(14), 0, AndroidUtilities.m107dp(14), 0);
        }

        @Override // android.widget.TextView, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(i), (int) (AndroidUtilities.displaySize.x * 0.45f)), Integer.MIN_VALUE), i2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTextItemMenu() {
        if (this.filledEditTextItemMenu) {
            return;
        }
        ActionBarMenuItem createView = this.editTextItem.createView();
        createView.addSubItem(57, LocaleController.getString("Spoiler", C3632R.string.Spoiler));
        createView.addSubItem(58, LocaleController.getString("Quote", C3632R.string.Quote));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", C3632R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, spannableStringBuilder.length(), 33);
        createView.addSubItem(50, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", C3632R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        createView.addSubItem(51, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", C3632R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        createView.addSubItem(52, spannableStringBuilder3);
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", C3632R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            createView.addSubItem(55, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", C3632R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            createView.addSubItem(56, spannableStringBuilder5);
        }
        createView.addSubItem(53, LocaleController.getString("CreateLink", C3632R.string.CreateLink));
        createView.addSubItem(54, LocaleController.getString("Regular", C3632R.string.Regular));
        this.filledEditTextItemMenu = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonsPosition() {
        float animatedTop = this.chatActivityEnterView.getAnimatedTop() + this.chatActivityEnterView.getTranslationY() + (this.chatActivityEnterTopView.getVisibility() == 0 ? this.chatActivityEnterTopView.getTranslationY() : BitmapDescriptorFactory.HUE_RED);
        FrameLayout frameLayout = this.pagedownButton;
        if (frameLayout != null) {
            frameLayout.setTranslationY((AndroidUtilities.m107dp(100) * (1.0f - this.pagedownButtonEnterProgress)) + animatedTop);
        }
        FrameLayout frameLayout2 = this.mentiondownButton;
        if (frameLayout2 != null) {
            frameLayout2.setTranslationY(((AndroidUtilities.m107dp(100) * (1.0f - this.mentionsButtonEnterProgress)) + animatedTop) - ((AndroidUtilities.m107dp(72) * this.pagedownButtonEnterProgress) * this.mentionsButtonEnterProgress));
        }
        FrameLayout frameLayout3 = this.reactionsMentiondownButton;
        if (frameLayout3 != null) {
            frameLayout3.setTranslationY(((AndroidUtilities.m107dp(100) * (1.0f - this.reactionsMentionButtonEnterProgress)) + animatedTop) - ((((AndroidUtilities.m107dp(50) + (AndroidUtilities.m107dp(22) * this.pagedownButtonCounter.getEnterProgress())) * this.pagedownButtonEnterProgress) + (AndroidUtilities.m107dp(72) * this.mentionsButtonEnterProgress)) * this.reactionsMentionButtonEnterProgress));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.setTranslationY(animatedTop);
        }
    }

    private void updateReactionsMentionButton(boolean z) {
        if (this.reactionsMentiondownButtonCounter == null || getParentActivity() == null) {
            return;
        }
        int i = this.reactionsMentionCount;
        boolean z2 = i > 0 && this.chatMode == 0;
        this.reactionsMentiondownButtonCounter.setCount(i, z);
        if (z2 && this.reactionsMentiondownButton.getTag() == null) {
            this.reactionsMentiondownButton.setTag(1);
            ValueAnimator valueAnimator = this.reactionsMentionButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 1.0f);
                this.reactionsMentionButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda6
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.this.lambda$updateReactionsMentionButton$112(valueAnimator2);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.63
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.reactionsMentionButtonEnterProgress = 1.0f;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            this.reactionsMentionButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
        } else if (z2 || this.reactionsMentiondownButton.getTag() == null) {
        } else {
            this.reactionsMentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.reactionsMentionButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, BitmapDescriptorFactory.HUE_RED);
                this.reactionsMentionButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda11
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$updateReactionsMentionButton$113(valueAnimator3);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.64
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.reactionsMentiondownButton.setVisibility(4);
                        ChatActivity.this.reactionsMentionButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(4);
            this.reactionsMentionButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
            this.contentView.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$112(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$113(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    public void fallbackFieldPanel() {
        MessagePreviewParams.Messages messages;
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage != null) {
            showFieldPanelForWebPage(true, tLRPC$WebPage, false);
            return;
        }
        ReplyQuote replyQuote = this.replyingQuote;
        if (replyQuote != null) {
            showFieldPanelForReplyQuote(this.replyingMessageObject, replyQuote);
            return;
        }
        MessageObject messageObject = this.replyingMessageObject;
        if (messageObject != null && messageObject != this.threadMessageObject) {
            showFieldPanelForReply(messageObject);
            return;
        }
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams != null && (messages = messagePreviewParams.forwardMessages) != null) {
            showFieldPanelForForward(true, messages.messages);
            return;
        }
        MessageObject messageObject2 = this.editingMessageObject;
        if (messageObject2 != null) {
            showFieldPanelForEdit(true, messageObject2);
        } else {
            showFieldPanelForWebPage(false, null, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openForwardingPreview(int i, boolean z) {
        TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers;
        HintView hintView;
        if (!z && (hintView = this.forwardSettingsHintView) != null) {
            hintView.hide();
        }
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (!(messagePreviewParams == null && this.templatePreviewMessagesParams == null) && this.forwardingPreviewView == null) {
            if (messagePreviewParams != null && messagePreviewParams.linkMessage != null) {
                int i2 = this.currentAccount;
                TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
                CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                MessageObject messageObject = this.replyingMessageObject;
                messagePreviewParams.updateLink(i2, tLRPC$WebPage, fieldText, messageObject == this.threadMessageObject ? null : messageObject, this.replyingQuote, this.editingMessageObject);
            }
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 == null || !messagePreviewParams2.isEmpty()) {
                this.keyboardWasVisible = this.chatActivityEnterView.isKeyboardVisible();
                Context context = this.contentView.getContext();
                MessagePreviewParams messagePreviewParams3 = z ? this.templatePreviewMessagesParams : this.messagePreviewParams;
                TLRPC$User tLRPC$User = this.currentUser;
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                int i3 = this.currentAccount;
                ThemeDelegate themeDelegate = this.themeDelegate;
                ReplyQuote replyQuote = this.replyingQuote;
                C426265 c426265 = new C426265(context, this, messagePreviewParams3, tLRPC$User, tLRPC$Chat, i3, themeDelegate, i, replyQuote != null && replyQuote.outdated, z);
                this.forwardingPreviewView = c426265;
                if (z) {
                    this.templatePreviewMessagesParams.attach(c426265);
                } else {
                    this.messagePreviewParams.attach(c426265);
                }
                TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
                TLRPC$Peer tLRPC$Peer = tLRPC$ChatFull != null ? tLRPC$ChatFull.default_send_as : null;
                this.forwardingPreviewView.setSendAsPeer((tLRPC$Peer != null || (tLRPC$TL_channels_sendAsPeers = this.sendAsPeersObj) == null || tLRPC$TL_channels_sendAsPeers.peers.isEmpty()) ? tLRPC$Peer : this.sendAsPeersObj.peers.get(0).peer);
                checkShowBlur(true);
                this.contentView.addView(this.forwardingPreviewView);
                if (this.keyboardWasVisible) {
                    closeKeyboard();
                    this.openKeyboardOnAttachMenuClose = true;
                }
                AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
                this.fragmentView.requestLayout();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$65 */
    /* loaded from: classes5.dex */
    public class C426265 extends MessagePreviewView {
        final /* synthetic */ boolean val$needTemplatePreview;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C426265(Context context, ChatActivity chatActivity, MessagePreviewParams messagePreviewParams, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, int i, MessagePreviewView.ResourcesDelegate resourcesDelegate, int i2, boolean z, boolean z2) {
            super(context, chatActivity, messagePreviewParams, tLRPC$User, tLRPC$Chat, i, resourcesDelegate, i2, z);
            this.val$needTemplatePreview = z2;
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void didEditPressed() {
            ChatActivity.this.chatActivityEnterView.hideBotCommands();
            ChatActivity newInstanceForDialogId = ChatActivity.newInstanceForDialogId(-TemplatesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getTemplatesChannelId(), (int) ChatActivity.this.templatePreviewMessagesParams.template.getMessageId());
            newInstanceForDialogId.needEditHighlightMessage = true;
            ChatActivity.this.presentFragment(newInstanceForDialogId);
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void didRenamePressed() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.showDialog(AlertsCreator.createInputTemplateNameDialog(chatActivity, chatActivity.templatePreviewMessagesParams.template, null, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$65$$ExternalSyntheticLambda0
                @Override // com.iMe.fork.utils.Callbacks$Callback1
                public final void invoke(Object obj) {
                    ChatActivity.C426265.this.lambda$didRenamePressed$0((String) obj);
                }
            }));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didRenamePressed$0(String str) {
            ArrayList arrayList = new ArrayList();
            Iterator<MessageObject> it = ChatActivity.this.templatePreviewMessagesParams.forwardMessages.messages.iterator();
            while (it.hasNext()) {
                arrayList.add(Integer.valueOf(it.next().getId()));
            }
            ChatActivity.this.getTemplatesController().renameTemplate(arrayList, str);
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void didDeletePressed() {
            MessageObject messageObject;
            MessageObject.GroupedMessages groupedMessages;
            SparseArray sparseArray = new SparseArray();
            if (ChatActivity.this.templatePreviewMessagesParams.forwardMessages.groupedMessagesMap.size() > 0) {
                MessageObject.GroupedMessages groupedMessages2 = ChatActivity.this.templatePreviewMessagesParams.forwardMessages.groupedMessagesMap.get(ChatActivity.this.templatePreviewMessagesParams.forwardMessages.groupedMessagesMap.keyAt(0));
                Iterator<MessageObject> it = groupedMessages2.messages.iterator();
                while (it.hasNext()) {
                    MessageObject next = it.next();
                    sparseArray.put(next.getId(), next);
                }
                groupedMessages = groupedMessages2;
                messageObject = null;
            } else {
                MessageObject messageObject2 = ChatActivity.this.templatePreviewMessagesParams.forwardMessages.messages.get(0);
                sparseArray.put(messageObject2.getId(), messageObject2);
                messageObject = messageObject2;
                groupedMessages = null;
            }
            ChatActivity chatActivity = ChatActivity.this;
            AlertsCreator.createDeleteMessagesAlert(chatActivity, null, chatActivity.getMessagesController().getChat(Long.valueOf(ChatActivity.this.getTemplatesController().getTemplatesChannelId())), null, null, 0L, messageObject, new SparseArray[]{sparseArray, new SparseArray()}, groupedMessages, false, false, 1, null, null, ChatActivity.this.themeDelegate);
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void didOpenEditorPressed() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.messagePreviewParams == null) {
                return;
            }
            chatActivity.presentFragment(ChatActivity.newInstanceInForwardingEditor(chatActivity.dialog_id, ChatActivity.this.messagePreviewParams, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$65$$ExternalSyntheticLambda1
                @Override // com.iMe.fork.utils.Callbacks$Callback1
                public final void invoke(Object obj) {
                    ChatActivity.C426265.this.lambda$didOpenEditorPressed$1((MessagePreviewParams) obj);
                }
            }));
            dismiss(false);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didOpenEditorPressed$1(MessagePreviewParams messagePreviewParams) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.messagePreviewParams = messagePreviewParams;
            chatActivity.openForwardingPreview(1, false);
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void removeLink() {
            dismiss(true);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.foundWebPage = null;
            ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setWebPage(null, false);
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            MessagePreviewParams messagePreviewParams = chatActivity2.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.updateLink(((BaseFragment) chatActivity2).currentAccount, null, null, ChatActivity.this.replyingMessageObject != ChatActivity.this.threadMessageObject ? ChatActivity.this.replyingMessageObject : null, ChatActivity.this.replyingQuote, ChatActivity.this.editingMessageObject);
            }
            ChatActivity.this.fallbackFieldPanel();
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void removeQuote() {
            dismiss(true);
            ChatActivity.this.replyingQuote = null;
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.showFieldPanelForReply(chatActivity.replyingMessageObject);
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void removeReply() {
            dismiss(true);
            ChatActivity.this.replyingMessageObject = null;
            ChatActivity.this.replyingQuote = null;
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.messagePreviewParams.updateReply(null, null, chatActivity.dialog_id, null);
            ChatActivity.this.fallbackFieldPanel();
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void removeForward() {
            super.removeForward();
            dismiss(true);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.messagePreviewParams.updateForward(null, chatActivity.dialog_id);
            ChatActivity.this.fallbackFieldPanel();
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void onFullDismiss(boolean z) {
            MessagePreviewParams messagePreviewParams = ChatActivity.this.messagePreviewParams;
            if (messagePreviewParams != null) {
                messagePreviewParams.attach(null);
            }
            if (ChatActivity.this.templatePreviewMessagesParams != null) {
                ChatActivity.this.templatePreviewMessagesParams.attach(null);
            }
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$65$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.C426265.this.lambda$onFullDismiss$2();
                    }
                }, 15L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onFullDismiss$2() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.freezeEmojiView(false);
            }
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void onQuoteSelectedPart() {
            if (ChatActivity.this.replyingQuote != null && ChatActivity.this.replyingQuote.message != null) {
                ChatActivity chatActivity = ChatActivity.this;
                ReplyQuote replyQuote = chatActivity.messagePreviewParams.quote;
                if (replyQuote == null || replyQuote.message == null || chatActivity.replyingQuote.message.getId() == ChatActivity.this.messagePreviewParams.quote.message.getId()) {
                    return;
                }
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.replyingQuote = chatActivity2.messagePreviewParams.quote;
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void onDismiss(boolean z) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.forwardingPreviewView = null;
            chatActivity.checkShowBlur(true);
            ChatActivity chatActivity2 = ChatActivity.this;
            if (chatActivity2.messagePreviewParams != null) {
                if (chatActivity2.replyingQuote == null) {
                    ChatActivity chatActivity3 = ChatActivity.this;
                    chatActivity3.replyingQuote = chatActivity3.messagePreviewParams.quote;
                }
                ChatActivity chatActivity4 = ChatActivity.this;
                if (chatActivity4.messagePreviewParams.quote == null) {
                    chatActivity4.replyingQuote = null;
                }
                if (ChatActivity.this.replyingQuote != null) {
                    ChatActivity.this.replyingQuote.outdated = false;
                    ReplyQuote replyQuote = ChatActivity.this.replyingQuote;
                    ChatActivity chatActivity5 = ChatActivity.this;
                    replyQuote.start = chatActivity5.messagePreviewParams.quoteStart;
                    ReplyQuote replyQuote2 = chatActivity5.replyingQuote;
                    ChatActivity chatActivity6 = ChatActivity.this;
                    replyQuote2.end = chatActivity6.messagePreviewParams.quoteEnd;
                    chatActivity6.replyingQuote.update();
                    if (ChatActivity.this.fieldPanelShown == 2) {
                        ChatActivity chatActivity7 = ChatActivity.this;
                        chatActivity7.showFieldPanelForReplyQuote(chatActivity7.replyingMessageObject, ChatActivity.this.replyingQuote);
                    }
                } else {
                    ArrayList<MessageObject> arrayList = new ArrayList<>();
                    MessagePreviewParams.Messages messages = ChatActivity.this.messagePreviewParams.forwardMessages;
                    if (messages != null) {
                        messages.getSelectedMessages(arrayList);
                    }
                    ChatActivity.this.fallbackFieldPanel();
                }
            }
            ChatActivity.this.forbidForwardingWithDismiss = false;
            if (ChatActivity.this.keyboardWasVisible && z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$65$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.C426265.this.lambda$onDismiss$3();
                    }
                }, 50L);
                ChatActivity.this.keyboardWasVisible = false;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onDismiss$3() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboard();
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:35:0x009f  */
        @Override // org.telegram.p043ui.Components.MessagePreviewView
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        protected void selectAnotherChat(boolean r10) {
            /*
                r9 = this;
                r0 = 0
                r9.dismiss(r0)
                org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r2 = r1.messagePreviewParams
                if (r2 == 0) goto Lc9
                r2 = 1
                if (r10 != 0) goto L10
                org.telegram.p043ui.ChatActivity.access$30302(r1, r2)
            L10:
                org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r1 = r1.messagePreviewParams
                org.telegram.messenger.MessagePreviewParams$Messages r1 = r1.forwardMessages
                if (r1 == 0) goto L5d
                java.util.ArrayList<org.telegram.messenger.MessageObject> r1 = r1.messages
                int r1 = r1.size()
                r3 = r0
                r4 = r3
                r5 = r4
            L21:
                if (r3 >= r1) goto L5f
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r6 = r6.messagePreviewParams
                org.telegram.messenger.MessagePreviewParams$Messages r6 = r6.forwardMessages
                java.util.ArrayList<org.telegram.messenger.MessageObject> r6 = r6.messages
                java.lang.Object r6 = r6.get(r3)
                org.telegram.messenger.MessageObject r6 = (org.telegram.messenger.MessageObject) r6
                boolean r7 = r6.isPoll()
                if (r7 == 0) goto L44
                r7 = 2
                if (r4 == r7) goto L4b
                boolean r4 = r6.isPublicPoll()
                if (r4 == 0) goto L42
                r4 = r7
                goto L4b
            L42:
                r4 = r2
                goto L4b
            L44:
                boolean r7 = r6.isInvoice()
                if (r7 == 0) goto L4b
                r5 = r2
            L4b:
                org.telegram.ui.ChatActivity r7 = org.telegram.p043ui.ChatActivity.this
                android.util.SparseArray[] r7 = org.telegram.p043ui.ChatActivity.access$3600(r7)
                r7 = r7[r0]
                int r8 = r6.getId()
                r7.put(r8, r6)
                int r3 = r3 + 1
                goto L21
            L5d:
                r4 = r0
                r5 = r4
            L5f:
                android.os.Bundle r1 = new android.os.Bundle
                r1.<init>()
                java.lang.String r3 = "onlySelect"
                r1.putBoolean(r3, r2)
                r3 = 3
                java.lang.String r6 = "dialogsType"
                r1.putInt(r6, r3)
                r3 = r10 ^ 1
                java.lang.String r6 = "quote"
                r1.putBoolean(r6, r3)
                if (r10 != 0) goto L86
                org.telegram.ui.ChatActivity r10 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r10 = r10.messagePreviewParams
                org.telegram.messenger.MessagePreviewParams$Messages r3 = r10.replyMessage
                if (r3 == 0) goto L86
                org.telegram.ui.ChatActivity$ReplyQuote r10 = r10.quote
                if (r10 != 0) goto L86
                r10 = r2
                goto L87
            L86:
                r10 = r0
            L87:
                java.lang.String r3 = "reply_to"
                r1.putBoolean(r3, r10)
                java.lang.String r10 = "hasPoll"
                r1.putInt(r10, r4)
                java.lang.String r10 = "hasInvoice"
                r1.putBoolean(r10, r5)
                org.telegram.ui.ChatActivity r10 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r10 = r10.messagePreviewParams
                org.telegram.messenger.MessagePreviewParams$Messages r10 = r10.forwardMessages
                if (r10 != 0) goto L9f
                goto La5
            L9f:
                java.util.ArrayList<org.telegram.messenger.MessageObject> r10 = r10.messages
                int r0 = r10.size()
            La5:
                java.lang.String r10 = "messagesCount"
                r1.putInt(r10, r0)
                org.telegram.ui.ChatActivity r10 = org.telegram.p043ui.ChatActivity.this
                org.telegram.messenger.MessagePreviewParams r10 = r10.messagePreviewParams
                boolean r10 = r10.isAuthorHiddenForce
                java.lang.String r0 = "force_hide_forward_author"
                r1.putBoolean(r0, r10)
                java.lang.String r10 = "canSelectTopics"
                r1.putBoolean(r10, r2)
                org.telegram.ui.DialogsActivity r10 = new org.telegram.ui.DialogsActivity
                r10.<init>(r1)
                org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                r10.setDelegate(r0)
                org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                r0.presentFragment(r10)
            Lc9:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.C426265.selectAnotherChat(boolean):void");
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView
        protected void didSendPressed() {
            super.didSendPressed();
            if (isShowing()) {
                dismiss(true);
                if (this.val$needTemplatePreview) {
                    ChatActivity.this.chatActivityEnterView.hideBotCommands();
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.forwardMessages(chatActivity.templatePreviewMessagesParams.forwardMessages.messages, true, false, true, 0, null, ChatActivity.this.replyingMessageObject);
                    ChatActivity.this.getTemplatesController().incrementUsageRating(ChatActivity.this.templatePreviewMessagesParams.forwardMessages.messages);
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getSendButton().callOnClick();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void animateToNextChat() {
        if (this.pullingDownDrawable == null) {
            return;
        }
        addToPulledDialogsMyself();
        ChatPullingDownDrawable chatPullingDownDrawable = this.pullingDownDrawable;
        addToPulledDialogs(chatPullingDownDrawable.nextChat, chatPullingDownDrawable.nextDialogId, chatPullingDownDrawable.dialogFolderId, chatPullingDownDrawable.dialogFilterId);
        Bundle bundle = new Bundle();
        ChatPullingDownDrawable chatPullingDownDrawable2 = this.pullingDownDrawable;
        TLRPC$User tLRPC$User = chatPullingDownDrawable2.nextUser;
        if (tLRPC$User == null && chatPullingDownDrawable2.nextChat == null) {
            return;
        }
        if (tLRPC$User != null) {
            bundle.putLong("user_id", chatPullingDownDrawable2.getUserId());
        } else {
            bundle.putLong("chat_id", chatPullingDownDrawable2.getChatId());
        }
        bundle.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
        bundle.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
        bundle.putBoolean("pulled", true);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.remove("diditem" + this.pullingDownDrawable.nextDialogId).apply();
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.setPullingDownTransition(true);
        replacingChatActivity = true;
        presentFragment(chatActivity, true);
    }

    private void addToPulledDialogsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), this.currentChat, this.currentUser, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    private void addToPulledDialogs(TLRPC$Chat tLRPC$Chat, long j, int i, int i2) {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), tLRPC$Chat, null, j, i, i2);
    }

    private void setPullingDownTransition(boolean z) {
        this.fromPullingDownTransition = z;
    }

    public void setSwitchFromTopics(boolean z) {
        this.switchFromTopics = z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBulletinLayout() {
        Bulletin visibleBulletin = Bulletin.getVisibleBulletin();
        if (visibleBulletin == null || this.bulletinDelegate == null) {
            return;
        }
        visibleBulletin.updatePosition();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void searchUserMessages(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, boolean z) {
        String str;
        this.searchingUserMessages = tLRPC$User;
        this.searchingChatMessages = tLRPC$Chat;
        if (this.searchItem == null || this.mentionContainer == null) {
            return;
        }
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            str = tLRPC$User.first_name;
            if (TextUtils.isEmpty(str)) {
                str = this.searchingUserMessages.last_name;
            }
        } else {
            str = tLRPC$Chat.title;
        }
        if (str == null) {
            return;
        }
        if (str.length() > 10) {
            str = str.substring(0, 10);
        }
        this.searchingForUser = false;
        String string = LocaleController.getString("SearchFrom", C3632R.string.SearchFrom);
        SpannableString spannableString = new SpannableString(string + " " + str);
        spannableString.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)), string.length() + 1, spannableString.length(), 33);
        this.searchItem.setSearchFieldCaption(spannableString);
        this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
        this.searchItem.setSearchFieldHint(null);
        this.searchItem.clearSearchText();
        getMediaDataController().searchMessagesInChat("", this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction, z);
    }

    private void updateTranslateItemVisibility() {
        ActionBarMenuItem.Item item = this.translateItem;
        if (item == null) {
            return;
        }
        item.setVisibility(8);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v8, types: [java.lang.CharSequence] */
    private void updateInfoTopView(boolean z) {
        View.OnClickListener onClickListener;
        View.OnClickListener onClickListener2;
        int i;
        String str;
        TLRPC$User tLRPC$User;
        if (this.contentView == null) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_bar_distance" + this.dialog_id, -1);
        this.distanceToPeer = i2;
        String str2 = null;
        if (i2 >= 0 && (tLRPC$User = this.currentUser) != null) {
            str2 = LocaleController.formatString("ChatDistanceToPeer", C3632R.string.ChatDistanceToPeer, tLRPC$User.first_name, LocaleController.formatDistance(i2, 0));
            onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda99
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$updateInfoTopView$114(view);
                }
            };
        } else {
            if (this.currentChat != null && this.chatInviterId != 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("dialog_bar_vis3");
                sb.append(this.dialog_id);
                boolean z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
                boolean z3 = notificationsSettings.getBoolean("dialog_bar_report" + this.dialog_id, false);
                boolean z4 = notificationsSettings.getBoolean("dialog_bar_block" + this.dialog_id, false);
                if (z2 && (z3 || z4)) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInviterId));
                    if (user != null) {
                        if (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                            i = C3632R.string.ActionUserInvitedToGroup;
                            str = "ActionUserInvitedToGroup";
                        } else {
                            i = C3632R.string.ActionUserInvitedToChannel;
                            str = "ActionUserInvitedToChannel";
                        }
                        ?? replaceWithLink = MessageObject.replaceWithLink(LocaleController.getString(str, i), "un1", user);
                        onClickListener2 = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda83
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.this.lambda$updateInfoTopView$115(view);
                            }
                        };
                        str2 = replaceWithLink;
                    } else {
                        onClickListener2 = null;
                    }
                    onClickListener = onClickListener2;
                } else {
                    hideInfoView();
                }
            }
            onClickListener = null;
        }
        if (str2 != null) {
            Animator animator = this.infoTopViewAnimator;
            if (animator != null) {
                animator.cancel();
            }
            if (this.infoTopView == null) {
                ChatActionCell chatActionCell = new ChatActionCell(this.contentView.getContext(), false, this.themeDelegate, this.currentAccount);
                this.infoTopView = chatActionCell;
                chatActionCell.setCustomText(str2);
                this.infoTopView.setInvalidateColors(true);
                this.infoTopView.setOnClickListener(onClickListener);
                this.contentView.addView(this.infoTopView, LayoutHelper.createFrame(-2, -2, 49, 0, 0, 0, 0));
            }
            if (z) {
                if (this.infoTopView.getTag() == null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f);
                    this.infoTopView.setTag(1);
                    this.infoTopView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                    final ChatActionCell chatActionCell2 = this.infoTopView;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda18
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.this.lambda$updateInfoTopView$116(chatActionCell2, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.66
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator2) {
                            ChatActivity.this.topViewOffset = AndroidUtilities.m107dp(30);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                        }
                    });
                    ofFloat.setDuration(150L);
                    this.infoTopViewAnimator = ofFloat;
                    ofFloat.start();
                    return;
                }
                return;
            }
            this.infoTopView.setTag(1);
            this.topViewOffset = AndroidUtilities.m107dp(30);
            invalidateChatListViewTopPadding();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$114(View view) {
        presentFragment(new PeopleNearbyActivity());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$115(View view) {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", this.chatInviterId);
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$116(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.m107dp(30) * floatValue;
        invalidateChatListViewTopPadding();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTopUndoView() {
        if (this.topUndoView != null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.67
            @Override // org.telegram.p043ui.Components.UndoView
            public void didPressUrl(CharacterStyle characterStyle) {
                ChatActivity.this.didPressMessageUrl(characterStyle, false, null, null);
            }

            @Override // org.telegram.p043ui.Components.UndoView
            public void showWithAction(long j, int i, Object obj, Object obj2, Runnable runnable, Runnable runnable2) {
                setAdditionalTranslationY((ChatActivity.this.fragmentContextView == null || !ChatActivity.this.fragmentContextView.isCallTypeVisible()) ? BitmapDescriptorFactory.HUE_RED : AndroidUtilities.m107dp(ChatActivity.this.fragmentContextView.getStyleHeight()));
                super.showWithAction(j, i, obj, obj2, runnable, runnable2);
            }
        };
        this.topUndoView = undoView;
        this.contentView.addView(undoView, 17, LayoutHelper.createFrame(-1, -2, 51, 8, 8, 8, 0));
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0284  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0331  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void createPinnedMessageView() {
        /*
            Method dump skipped, instructions count: 872
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.createPinnedMessageView():void");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$68 */
    /* loaded from: classes5.dex */
    public class C426568 extends BlurredFrameLayout {
        C426568(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$68$$ExternalSyntheticLambda0
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    boolean lambda$new$0;
                    lambda$new$0 = ChatActivity.C426568.this.lambda$new$0(view);
                    return lambda$new$0;
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$new$0(View view) {
            if (AndroidUtilities.isTablet() || ChatActivity.this.isThreadChat()) {
                return false;
            }
            ChatActivity.this.openPinnedMessagesList(true);
            return true;
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            if (ChatActivity.this.setPinnedTextTranslationX) {
                for (int i3 = 0; i3 < ChatActivity.this.pinnedNextAnimation.length; i3++) {
                    if (ChatActivity.this.pinnedNextAnimation[i3] != null) {
                        ChatActivity.this.pinnedNextAnimation[i3].start();
                    }
                }
                ChatActivity.this.setPinnedTextTranslationX = false;
            }
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), AndroidUtilities.m107dp(48));
            }
            if (view == ChatActivity.this.pinnedMessageTextView[0] || view == ChatActivity.this.pinnedMessageTextView[1]) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth() - AndroidUtilities.m107dp(38), getMeasuredHeight());
                boolean drawChild = super.drawChild(canvas, view, j);
                canvas.restore();
                return drawChild;
            }
            boolean drawChild2 = super.drawChild(canvas, view, j);
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.restore();
                return drawChild2;
            }
            return drawChild2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$117(View view) {
        int i;
        this.wasManualScroll = true;
        if (isThreadChat() && !this.isTopic) {
            scrollToMessageId((int) this.threadMessageId, 0, true, 0, true, 0);
            return;
        }
        int i2 = this.currentPinnedMessageId;
        if (i2 != 0) {
            if (this.pinnedMessageIds.isEmpty()) {
                i = 0;
            } else {
                ArrayList<Integer> arrayList = this.pinnedMessageIds;
                if (i2 == arrayList.get(arrayList.size() - 1).intValue()) {
                    i = this.pinnedMessageIds.get(0).intValue() + 1;
                    this.forceScrollToFirst = true;
                } else {
                    i = i2 - 1;
                    this.forceScrollToFirst = false;
                }
            }
            this.forceNextPinnedMessageId = i;
            scrollToMessageId(i2, 0, true, 0, true, !this.forceScrollToFirst ? -i : i);
            updateMessagesVisiblePart(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$118(View view) {
        openPinnedMessagesList(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$122(View view) {
        boolean z;
        TLRPC$UserFull tLRPC$UserFull;
        if (getParentActivity() == null) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            z = ChatObject.canPinMessages(tLRPC$Chat);
        } else {
            z = (this.currentEncryptedChat != null || (tLRPC$UserFull = this.userInfo) == null) ? false : tLRPC$UserFull.can_pin_message;
        }
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", C3632R.string.UnpinMessageAlertTitle));
            builder.setMessage(LocaleController.getString("UnpinMessageAlert", C3632R.string.UnpinMessageAlert));
            builder.setPositiveButton(LocaleController.getString("UnpinMessage", C3632R.string.UnpinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda36
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$createPinnedMessageView$119(dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
            showDialog(builder.create());
        } else if (this.pinnedMessageIds.isEmpty()) {
        } else {
            final MultiPanelController multiPanelController = getMultiPanelController();
            final boolean isMultiPanelEnabled = multiPanelController.isMultiPanelEnabled();
            multiPanelController.setMultiPanelEnabled(true);
            multiPanelController.setButtonEnabled(this.dialogType, MultiPanelButton.PINS, true);
            multiPanelController.saveConfig();
            updateMultiPanelView();
            final SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor edit = notificationsSettings.edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            updatePinnedMessageView(true);
            Bulletin bulletin = this.pinBulletin;
            if (bulletin != null) {
                bulletin.hide();
            }
            final int i = this.pinBullerinTag + 1;
            this.pinBullerinTag = i;
            Bulletin createUnpinAllMessagesBulletin = BulletinFactory.createUnpinAllMessagesBulletin(this, 0, true, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda250
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createPinnedMessageView$120(multiPanelController, isMultiPanelEnabled, notificationsSettings, i);
                }
            }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda233
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createPinnedMessageView$121(i);
                }
            }, this.themeDelegate);
            this.pinBulletin = createUnpinAllMessagesBulletin;
            createUnpinAllMessagesBulletin.show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$119(DialogInterface dialogInterface, int i) {
        MessageObject messageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
        if (messageObject == null) {
            messageObject = this.messagesDict[0].get(this.currentPinnedMessageId);
        }
        unpinMessage(messageObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$120(MultiPanelController multiPanelController, boolean z, SharedPreferences sharedPreferences, int i) {
        multiPanelController.setMultiPanelEnabled(z);
        multiPanelController.setButtonEnabled(this.dialogType, MultiPanelButton.PINS, false);
        updateMultiPanelView();
        SharedPreferences.Editor edit = sharedPreferences.edit();
        edit.remove("pin_" + this.dialog_id).commit();
        updatePinnedMessageView(true);
        if (i == this.pinBullerinTag) {
            this.pinBulletin = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$121(int i) {
        if (i == this.pinBullerinTag) {
            this.pinBulletin = null;
        }
    }

    private void openAnotherForward() {
        MessagePreviewParams.Messages messages;
        ArrayList<MessageObject> arrayList;
        String formatString;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messagePreviewParams.isEmpty() || (messages = this.messagePreviewParams.forwardMessages) == null || (arrayList = messages.messages) == null) {
            return;
        }
        int size = arrayList.size();
        long j = 0;
        long j2 = 0;
        for (int i = 0; i < size; i++) {
            MessageObject messageObject = this.messagePreviewParams.forwardMessages.messages.get(i);
            if (j == 0) {
                j2 = messageObject.getDialogId();
                j = messageObject.getFromChatId();
            } else if (j != messageObject.getFromChatId()) {
                break;
            }
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setButtonsVertical(true);
        if (j2 > 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
            if (user == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardPrivate", C3632R.string.CancelForwardPrivate, LocaleController.formatPluralString("MessagesBold", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]), ContactsController.formatName(user.first_name, user.last_name));
        } else {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-j2));
            if (chat == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardChat", C3632R.string.CancelForwardChat, LocaleController.formatPluralString("MessagesBold", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]), chat.title);
        }
        builder.setMessage(AndroidUtilities.replaceTags(formatString));
        builder.setTitle(LocaleController.formatPluralString("messages", this.messagePreviewParams.forwardMessages.messages.size(), new Object[0]));
        builder.setPositiveButton(LocaleController.getString("CancelForwarding", C3632R.string.CancelForwarding), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda37
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$openAnotherForward$123(dialogInterface, i2);
            }
        });
        builder.setNegativeButton(LocaleController.getString("ShowForwardingOptions", C3632R.string.ShowForwardingOptions), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda40
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$openAnotherForward$124(dialogInterface, i2);
            }
        });
        AlertDialog create = builder.create();
        showDialog(create);
        TextView textView = (TextView) create.getButton(-1);
        if (textView != null) {
            textView.setTextColor(getThemedColor(Theme.key_text_RedBold));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$123(DialogInterface dialogInterface, int i) {
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams != null) {
            messagePreviewParams.updateForward(null, this.dialog_id);
        }
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$124(DialogInterface dialogInterface, int i) {
        openForwardingPreview(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openPinnedMessagesList(boolean z) {
        INavigationLayout iNavigationLayout;
        if (this.inPreviewMode || getParentActivity() == null || (iNavigationLayout = this.parentLayout) == null || iNavigationLayout.getLastFragment() != this || this.pinnedMessageIds.isEmpty()) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            bundle.putLong("chat_id", tLRPC$Chat.f1602id);
        } else {
            bundle.putLong("user_id", this.currentUser.f1751id);
        }
        bundle.putInt("chatMode", 2);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.pinnedMessageIds = new ArrayList<>(this.pinnedMessageIds);
        chatActivity.pinnedMessageObjects = new HashMap<>(this.pinnedMessageObjects);
        int size = this.pinnedMessageIds.size();
        for (int i = 0; i < size; i++) {
            Integer num = this.pinnedMessageIds.get(i);
            MessageObject messageObject = this.pinnedMessageObjects.get(num);
            MessageObject messageObject2 = this.messagesDict[0].get(num.intValue());
            if (messageObject == null) {
                messageObject = messageObject2;
            } else if (messageObject2 != null) {
                messageObject.mediaExists = messageObject2.mediaExists;
                messageObject.attachPathExists = messageObject2.attachPathExists;
            }
            if (messageObject != null) {
                chatActivity.pinnedMessageObjects.put(num, messageObject);
                chatActivity.updatePinnedTopicStarterMessage();
            }
        }
        chatActivity.loadedPinnedMessagesCount = this.loadedPinnedMessagesCount;
        chatActivity.totalPinnedMessagesCount = this.isTopic ? this.pinnedMessageIds.size() : this.totalPinnedMessagesCount;
        chatActivity.pinnedEndReached = this.pinnedEndReached;
        chatActivity.userInfo = this.userInfo;
        chatActivity.chatInfo = this.chatInfo;
        chatActivity.chatActivityDelegate = new C426971();
        if (z) {
            presentFragmentAsPreviewWithMenu(chatActivity, new FragmentPreviewMenu(this, chatActivity, getResourceProvider()));
            checkShowBlur(true);
            return;
        }
        presentFragment(chatActivity, false);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$71 */
    /* loaded from: classes5.dex */
    public class C426971 implements ChatActivityDelegate {
        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onForwardingMessagesChanged(ArrayList arrayList) {
            ChatActivityDelegate.CC.$default$onForwardingMessagesChanged(this, arrayList);
        }

        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onReport() {
            ChatActivityDelegate.CC.$default$onReport(this);
        }

        C426971() {
        }

        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public void setFieldText(CharSequence charSequence) {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setFieldText(charSequence);
            }
        }

        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public void openSearch(String str) {
            ChatActivity.this.openSearchWithText(str);
        }

        @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
        public void onUnpin(boolean z, final boolean z2, boolean z3, ChatActivity chatActivity, final ArrayList<Integer> arrayList, HashMap<Integer, MessageObject> hashMap) {
            if (!z) {
                MessageObject messageObject = hashMap.get(Integer.valueOf(arrayList.size() == 1 ? arrayList.get(0).intValue() : ChatActivity.this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(arrayList.size() == 1 ? arrayList.get(0).intValue() : ChatActivity.this.currentPinnedMessageId);
                }
                ChatActivity.this.unpinMessage(messageObject);
                return;
            }
            final MultiPanelController multiPanelController = ChatActivity.this.getMultiPanelController();
            final boolean isMultiPanelEnabled = multiPanelController.isMultiPanelEnabled();
            final ArrayList arrayList2 = new ArrayList(arrayList);
            final ArrayList arrayList3 = new ArrayList(hashMap.values());
            if (z2) {
                SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount);
                String str = "pin_" + ChatActivity.this.dialog_id;
                if (!notificationsSettings.contains(str)) {
                    DialogType dialogType = ChatActivity.this.getDialogType();
                    MultiPanelButton multiPanelButton = MultiPanelButton.PINS;
                    if (!multiPanelController.isButtonEnabled(dialogType, multiPanelButton).booleanValue()) {
                        multiPanelController.setMultiPanelEnabled(true);
                        multiPanelController.setButtonEnabled(ChatActivity.this.dialogType, multiPanelButton, true);
                        multiPanelController.saveConfig();
                        ChatActivity.this.updateMultiPanelView();
                        if (arrayList.isEmpty()) {
                            notificationsSettings.edit().remove("pin_" + ChatActivity.this.dialog_id).commit();
                        } else {
                            notificationsSettings.edit().putInt("pin_" + ChatActivity.this.dialog_id, arrayList.get(0).intValue()).commit();
                        }
                        ChatActivity.this.updatePinnedMessageView(true);
                    }
                }
                multiPanelController.setButtonEnabled(ChatActivity.this.dialogType, MultiPanelButton.PINS, false);
                ChatActivity.this.updateMultiPanelView();
                notificationsSettings.edit().remove(str).commit();
                ChatActivity.this.updatePinnedMessageView(true);
                return;
            }
            ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList2, Boolean.FALSE, null, null, 0, 0, Boolean.TRUE);
            if (ChatActivity.this.pinBulletin != null) {
                ChatActivity.this.pinBulletin.hide();
            }
            ChatActivity.this.showPinBulletin = true;
            final int access$31804 = ChatActivity.access$31804(ChatActivity.this);
            final int pinnedMessagesCount = ChatActivity.this.getPinnedMessagesCount();
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.pinBulletin = BulletinFactory.createUnpinAllMessagesBulletin(z3 ? chatActivity : chatActivity2, pinnedMessagesCount, z2, new Runnable() { // from class: org.telegram.ui.ChatActivity$71$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C426971.this.lambda$onUnpin$0(z2, multiPanelController, isMultiPanelEnabled, arrayList2, arrayList3, pinnedMessagesCount, access$31804);
                }
            }, new Runnable() { // from class: org.telegram.ui.ChatActivity$71$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C426971.this.lambda$onUnpin$1(z2, arrayList, access$31804);
                }
            }, ChatActivity.this.themeDelegate);
            if (!z3 || ChatActivity.this.pinBulletin == null) {
                return;
            }
            ChatActivity.this.showPinBulletin = false;
            ChatActivity.this.pinBulletin.show();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$0(boolean z, MultiPanelController multiPanelController, boolean z2, ArrayList arrayList, ArrayList arrayList2, int i, int i2) {
            if (z) {
                multiPanelController.setMultiPanelEnabled(z2);
                multiPanelController.setButtonEnabled(ChatActivity.this.dialogType, MultiPanelButton.PINS, false);
                ChatActivity.this.updateMultiPanelView();
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.remove("pin_" + ChatActivity.this.dialog_id).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.TRUE, arrayList2, null, 0, Integer.valueOf(i), Boolean.valueOf(ChatActivity.this.pinnedEndReached));
            }
            if (i2 == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$1(boolean z, ArrayList arrayList, int i) {
            if (!z) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.isTopic) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        MessagesController messagesController = ChatActivity.this.getMessagesController();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        messagesController.pinMessage(chatActivity2.currentChat, chatActivity2.currentUser, ((Integer) arrayList.get(i2)).intValue(), true, false, false);
                    }
                } else {
                    MessagesController messagesController2 = chatActivity.getMessagesController();
                    ChatActivity chatActivity3 = ChatActivity.this;
                    messagesController2.unpinAllMessages(chatActivity3.currentChat, chatActivity3.currentUser);
                }
            }
            if (i == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkShowBlur(boolean z) {
        MessagePreviewView messagePreviewView;
        BluredView bluredView;
        BluredView bluredView2;
        INavigationLayout iNavigationLayout = this.parentLayout;
        boolean z2 = !(iNavigationLayout == null || !iNavigationLayout.isInPreviewMode() || this.parentLayout.hasIntegratedBlurInPreview() || this.inPreviewMode) || ((messagePreviewView = this.forwardingPreviewView) != null && messagePreviewView.isShowing());
        if (!z2 || ((bluredView2 = this.blurredView) != null && bluredView2.getTag() != null)) {
            if (z2 || (bluredView = this.blurredView) == null || bluredView.getTag() == null) {
                return;
            }
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().setListener(new HideViewAfterAnimation(this.blurredView)).alpha(BitmapDescriptorFactory.HUE_RED).start();
            this.blurredView.setTag(null);
            this.chatListView.invalidate();
            View view = this.fragmentView;
            if (view != null) {
                view.invalidate();
                return;
            }
            return;
        }
        BluredView bluredView3 = this.blurredView;
        if (bluredView3 == null) {
            BluredView bluredView4 = new BluredView(this.fragmentView.getContext(), this.fragmentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.72
                @Override // android.view.View
                public void setAlpha(float f) {
                    super.setAlpha(f);
                    View view2 = ChatActivity.this.fragmentView;
                    if (view2 != null) {
                        view2.invalidate();
                    }
                }

                @Override // android.view.View
                public void setVisibility(int i) {
                    super.setVisibility(i);
                    View view2 = ChatActivity.this.fragmentView;
                    if (view2 != null) {
                        view2.invalidate();
                    }
                }
            };
            this.blurredView = bluredView4;
            bluredView4.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda76
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ChatActivity.this.lambda$checkShowBlur$125(view2);
                }
            });
            this.contentView.addView(this.blurredView, LayoutHelper.createFrame(-1, -1));
        } else {
            if (this.contentView.indexOfChild(bluredView3) != this.contentView.getChildCount() - 1) {
                this.contentView.removeView(this.blurredView);
                this.contentView.addView(this.blurredView);
            }
            this.blurredView.update();
            this.blurredView.setVisibility(0);
        }
        this.blurredView.setAlpha(BitmapDescriptorFactory.HUE_RED);
        this.blurredView.animate().setListener(null).cancel();
        this.blurredView.animate().alpha(1.0f).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.73
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.fragmentView == null || chatActivity.chatListView == null) {
                    return;
                }
                ChatActivity.this.chatListView.invalidate();
                ChatActivity.this.fragmentView.invalidate();
            }
        }).start();
        this.blurredView.setTag(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkShowBlur$125(View view) {
        finishPreviewFragment();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public int getPreviewHeight() {
        return super.getPreviewHeight();
    }

    private boolean getLiteModeChat() {
        if (this.liteModeChat == null) {
            this.liteModeChat = Boolean.valueOf(LiteMode.isEnabled(LiteMode.FLAGS_CHAT));
        }
        return this.liteModeChat.booleanValue();
    }

    private void showProgressView(boolean z) {
        if (this.progressView == null) {
            return;
        }
        if (!AndroidUtilities.isTablet() && !this.isComments && this.currentUser == null && getLiteModeChat()) {
            this.animateProgressViewTo = z;
            return;
        }
        if (this.fragmentOpened && SharedConfig.animationsEnabled()) {
            if (z == this.animateProgressViewTo) {
                return;
            }
            this.animateProgressViewTo = z;
            if (z) {
                if (this.progressView.getVisibility() != 0) {
                    this.progressView.setVisibility(0);
                    this.progressView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                    this.progressView.setScaleX(0.3f);
                    this.progressView.setScaleY(0.3f);
                }
                this.progressView.animate().setListener(null).cancel();
                this.progressView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
                return;
            }
            this.progressView.animate().setListener(null).cancel();
            this.progressView.animate().alpha(BitmapDescriptorFactory.HUE_RED).scaleX(0.3f).scaleY(0.3f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.74
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.progressView.setVisibility(4);
                }
            }).start();
            return;
        }
        this.animateProgressViewTo = z;
        this.progressView.setVisibility(z ? 0 : 4);
    }

    private void hideInfoView() {
        if (this.distanceToPeer >= 0) {
            this.distanceToPeer = -1;
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_bar_distance" + this.dialog_id, -2).commit();
        }
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell == null || chatActionCell.getTag() == null) {
            return;
        }
        this.infoTopView.setTag(null);
        final ChatActionCell chatActionCell2 = this.infoTopView;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, BitmapDescriptorFactory.HUE_RED);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda19
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.this.lambda$hideInfoView$126(chatActionCell2, valueAnimator);
            }
        });
        ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.75
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator2) {
                ChatActivity.this.topViewOffset = BitmapDescriptorFactory.HUE_RED;
                if (animator2 == ChatActivity.this.infoTopViewAnimator) {
                    ViewGroup viewGroup = (ViewGroup) chatActionCell2.getParent();
                    if (viewGroup != null) {
                        viewGroup.removeView(chatActionCell2);
                    }
                    ChatActivity.this.infoTopView = null;
                    ChatActivity.this.infoTopViewAnimator = null;
                }
            }
        });
        ofFloat.setDuration(150L);
        this.infoTopViewAnimator = ofFloat;
        ofFloat.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hideInfoView$126(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.m107dp(30) * floatValue;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateChatListViewTopPadding() {
        float f;
        TranslateButton translateButton;
        View childAt;
        int i;
        ChatActivityEnterView chatActivityEnterView;
        if (!this.invalidateChatListViewTopPadding || this.chatListView == null) {
            return;
        }
        if (this.fixedKeyboardHeight <= 0 || this.searchExpandProgress != BitmapDescriptorFactory.HUE_RED) {
            BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
            float max = Math.max(0, (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) ? 0 : this.topChatPanelView.getLayoutParams().height - AndroidUtilities.m107dp(2));
            float max2 = max + Math.max(-max, this.topChatPanelViewOffset);
            BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
            float max3 = (blurredFrameLayout2 == null || blurredFrameLayout2.getVisibility() != 0) ? 0.0f : Math.max((float) BitmapDescriptorFactory.HUE_RED, AndroidUtilities.m107dp(48) + this.pinnedMessageEnterOffset);
            if (isThreadChat() && (!this.isTopic || pinnedOnlyStarterMessage())) {
                max3 = 0.0f;
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            MessageObject messageObject = null;
            View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
            float max4 = (view == null || view.getVisibility() != 0) ? 0.0f : Math.max((float) BitmapDescriptorFactory.HUE_RED, (view.getHeight() + this.pendingRequestsDelegate.getViewEnterOffset()) - AndroidUtilities.m107dp(4));
            float f2 = this.chatListViewPaddingTop;
            float m107dp = AndroidUtilities.m107dp(4) + this.contentPaddingTop + max2 + max3 + max4;
            this.chatListViewPaddingTop = m107dp;
            this.chatListViewPaddingTop = m107dp + this.blurredViewTopOffset;
            BlurredLinearLayout blurredLinearLayout = this.multiPanelView;
            if (blurredLinearLayout != null && blurredLinearLayout.getVisibility() == 0) {
                this.chatListViewPaddingTop += Math.max((float) BitmapDescriptorFactory.HUE_RED, AndroidUtilities.m107dp(42) + this.multiPanelViewOffset);
            }
            this.chatListViewPaddingVisibleOffset = 0;
            this.chatListViewPaddingTop += this.contentPanTranslation + this.bottomPanelTranslationY;
            SearchTagsList searchTagsList = this.actionBarSearchTags;
            if (searchTagsList != null && searchTagsList.shown()) {
                this.chatListViewPaddingTop += this.actionBarSearchTags.getMeasuredHeight();
            }
            if (this.searchExpandProgress == BitmapDescriptorFactory.HUE_RED || this.chatActivityEnterView.getVisibility() != 0) {
                f = 0.0f;
            } else {
                float f3 = this.chatListViewPaddingTop;
                f = this.searchExpandProgress * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.m107dp(51));
                this.chatListViewPaddingTop = f3 - f;
            }
            if (this.bottomPanelTranslationY == BitmapDescriptorFactory.HUE_RED && !this.chatActivityEnterView.panelAnimationInProgress() && (this.contentView.getLayoutParams().height < 0 || (this.contentView.getKeyboardHeight() <= AndroidUtilities.m107dp(20) && this.chatActivityEnterView.isPopupShowing()))) {
                this.chatListViewPaddingTop += (this.contentView.getKeyboardHeight() > AndroidUtilities.m107dp(20) || AndroidUtilities.isInMultiwindow || this.inBubbleMode) ? this.contentView.getKeyboardHeight() : this.chatActivityEnterView.getEmojiPadding();
            }
            if (!this.inPreviewMode && (chatActivityEnterView = this.chatActivityEnterView) != null) {
                if (chatActivityEnterView.getAnimatedTop() != 0) {
                    this.chatListViewPaddingTop += (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.m107dp(51)) - this.chatActivityEnterView.getAnimatedTop();
                } else if (!this.chatActivityEnterView.panelAnimationInProgress()) {
                    float heightWithTopView = this.chatListViewPaddingTop + (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.m107dp(51));
                    this.chatListViewPaddingTop = heightWithTopView;
                    if (this.chatActivityEnterView.currentTopViewAnimation == null) {
                        this.chatListViewPaddingTop = heightWithTopView - this.chatListView.getTranslationY();
                    }
                }
            }
            ChatActionCell chatActionCell = this.infoTopView;
            if (chatActionCell != null) {
                chatActionCell.setTranslationY((this.chatListViewPaddingTop - AndroidUtilities.m107dp(30)) + this.topViewOffset);
                float f4 = this.chatListViewPaddingTop;
                float f5 = this.topViewOffset;
                this.chatListViewPaddingTop = f4 + f5;
                this.chatListViewPaddingVisibleOffset = (int) (this.chatListViewPaddingVisibleOffset + f5);
            }
            ChatActionCell chatActionCell2 = this.floatingDateView;
            if (chatActionCell2 != null) {
                chatActionCell2.setTranslationY((((this.chatListView.getTranslationY() - f) + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.m107dp(4));
            }
            int measuredHeight = this.isInsideContainer ? 0 : (this.chatListView.getMeasuredHeight() * 2) / 3;
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null && this.chatLayoutManager != null && this.chatAdapter != null) {
                if (recyclerListView.getPaddingTop() != measuredHeight) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= this.chatListView.getChildCount()) {
                            i = 0;
                            break;
                        }
                        View childAt2 = this.chatListView.getChildAt(i2);
                        if (childAt2 instanceof ChatMessageCell) {
                            messageObject = ((ChatMessageCell) childAt2).getMessageObject();
                            i = getScrollingOffsetForView(childAt2);
                            break;
                        } else if (childAt2 instanceof ChatActionCell) {
                            messageObject = ((ChatActionCell) childAt2).getMessageObject();
                            i = getScrollingOffsetForView(childAt2);
                            break;
                        } else {
                            i2++;
                        }
                    }
                    this.chatListView.setPadding(0, measuredHeight, 0, AndroidUtilities.m107dp(3) + this.blurredViewBottomOffset);
                    if (messageObject != null) {
                        this.chatAdapter.updateRowsSafe();
                        int indexOf = this.messages.indexOf(messageObject);
                        if (indexOf >= 0) {
                            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf, i);
                        }
                    }
                    invalidateMessagesVisiblePart();
                }
                this.chatListView.setTopGlowOffset((int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4)));
                if (f2 != this.chatListViewPaddingTop) {
                    int childCount = this.chatListView.getChildCount();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= childCount) {
                            break;
                        }
                        if (this.chatListView.getChildAdapterPosition(this.chatListView.getChildAt(i3)) == this.chatAdapter.getItemCount() - 1) {
                            float f6 = this.chatListViewPaddingTop;
                            if (childAt.getTop() > f6) {
                                this.chatListView.scrollBy(0, (int) (childAt.getTop() - f6));
                            }
                        } else {
                            i3++;
                        }
                    }
                }
                if (!isThreadChat() && !this.wasManualScroll && this.unreadMessageObject != null && this.chatListView != null && ((translateButton = this.translateButton) == null || translateButton.getVisibility() != 0)) {
                    this.chatListView.scrollBy(0, (int) (f2 - this.chatListViewPaddingTop));
                }
            }
            this.invalidateChatListViewTopPadding = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void invalidateChatListViewTopPadding() {
        int i;
        if (!this.invalidateChatListViewTopPadding) {
            this.invalidateChatListViewTopPadding = true;
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.invalidate();
            }
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) {
            i = 0;
        } else {
            i = (this.topChatPanelView.getLayoutParams() == null ? AndroidUtilities.m107dp(50) : this.topChatPanelView.getLayoutParams().height) - AndroidUtilities.m107dp(2);
        }
        float max = this.contentPanTranslation + this.contentPaddingTop + Math.max(0, i + ((int) Math.max(-i, this.topChatPanelViewOffset)));
        float max2 = Math.max((float) BitmapDescriptorFactory.HUE_RED, AndroidUtilities.m107dp(42) + this.multiPanelViewOffset);
        BlurredLinearLayout blurredLinearLayout = this.multiPanelView;
        if (blurredLinearLayout != null) {
            blurredLinearLayout.setTranslationY(this.contentPanTranslation + this.multiPanelViewOffset);
        }
        float f = max + max2;
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            float f2 = f + this.pinnedMessageEnterOffset;
            blurredFrameLayout2.setTranslationY(f2);
            f = f2 + AndroidUtilities.m107dp(48);
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        if (view != null) {
            view.setTranslationY(f + this.pendingRequestsDelegate.getViewEnterOffset());
        }
        if (this.fragmentContextView != null) {
            float f3 = max2 + BitmapDescriptorFactory.HUE_RED;
            FragmentContextView fragmentContextView = this.fragmentLocationContextView;
            if (fragmentContextView != null && fragmentContextView.getVisibility() == 0) {
                f3 += AndroidUtilities.m107dp(36);
            }
            FragmentContextView fragmentContextView2 = this.fragmentContextView;
            fragmentContextView2.setTranslationY(this.contentPanTranslation + f3 + fragmentContextView2.getTopPadding());
        }
        if (this.fragmentLocationContextView != null) {
            float f4 = BitmapDescriptorFactory.HUE_RED + max2;
            FragmentContextView fragmentContextView3 = this.fragmentContextView;
            if (fragmentContextView3 != null && fragmentContextView3.getVisibility() == 0) {
                f4 += AndroidUtilities.m107dp(this.fragmentContextView.getStyleHeight()) + this.fragmentContextView.getTopPadding();
            }
            FragmentContextView fragmentContextView4 = this.fragmentLocationContextView;
            fragmentContextView4.setTranslationY(this.contentPanTranslation + f4 + fragmentContextView4.getTopPadding());
        }
        BlurredFrameLayout blurredFrameLayout3 = this.topChatPanelView;
        if (blurredFrameLayout3 != null) {
            blurredFrameLayout3.setTranslationY(this.contentPanTranslation + this.contentPaddingTop + this.topChatPanelViewOffset + max2);
        }
        FrameLayout frameLayout = this.alertView;
        if (frameLayout != null && frameLayout.getVisibility() == 0) {
            this.alertView.setTranslationY(((this.contentPanTranslation + this.contentPaddingTop) - (AndroidUtilities.m107dp(50) * (1.0f - this.alertViewEnterProgress))) + max2);
        }
        BlurredFrameLayout blurredFrameLayout4 = this.bottomOverlayChat;
        if (blurredFrameLayout4 != null) {
            blurredFrameLayout4.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        BlurredFrameLayout blurredFrameLayout5 = this.bottomMessagesActionContainer;
        if (blurredFrameLayout5 != null) {
            blurredFrameLayout5.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.setAdditionalTranslationY(this.chatActivityEnterView.getHeightWithTopView() - this.chatActivityEnterView.getAnimatedTop());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public TextureView createTextureView(boolean z) {
        if (this.parentLayout == null) {
            return null;
        }
        AndroidUtilities.cancelRunOnUIThread(this.destroyTextureViewRunnable);
        if (this.videoPlayerContainer == null) {
            if (Build.VERSION.SDK_INT >= 21) {
                FrameLayout frameLayout = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.76
                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.videoPlayerContainer = frameLayout;
                frameLayout.setOutlineProvider(new ViewOutlineProvider(this) { // from class: org.telegram.ui.ChatActivity.77
                    @Override // android.view.ViewOutlineProvider
                    public void getOutline(View view, Outline outline) {
                        ImageReceiver imageReceiver = (ImageReceiver) view.getTag(C3632R.C3635id.parent_tag);
                        if (imageReceiver != null) {
                            int[] roundRadius = imageReceiver.getRoundRadius();
                            int i = 0;
                            for (int i2 = 0; i2 < 4; i2++) {
                                i = Math.max(i, roundRadius[i2]);
                            }
                            outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), i);
                            return;
                        }
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        outline.setOval(0, 0, i3, i3);
                    }
                });
                this.videoPlayerContainer.setClipToOutline(true);
            } else {
                this.videoPlayerContainer = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.78
                    RectF rect = new RectF();

                    @Override // android.view.View
                    protected void onSizeChanged(int i, int i2, int i3, int i4) {
                        super.onSizeChanged(i, i2, i3, i4);
                        ChatActivity.this.aspectPath.reset();
                        ImageReceiver imageReceiver = (ImageReceiver) getTag(C3632R.C3635id.parent_tag);
                        if (imageReceiver == null) {
                            float f = i / 2;
                            ChatActivity.this.aspectPath.addCircle(f, i2 / 2, f, Path.Direction.CW);
                        } else {
                            int[] roundRadius = imageReceiver.getRoundRadius();
                            int i5 = 0;
                            for (int i6 = 0; i6 < 4; i6++) {
                                i5 = Math.max(i5, roundRadius[i6]);
                            }
                            this.rect.set(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, i, i2);
                            ChatActivity.this.aspectPath.addRoundRect(this.rect, AndroidUtilities.m107dp(4), AndroidUtilities.m107dp(4), Path.Direction.CW);
                        }
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int i) {
                        super.setVisibility(i);
                        if (i == 0) {
                            setLayerType(2, null);
                        }
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (getTag() == null) {
                            canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                        }
                    }
                };
                this.aspectPath = new Path();
                Paint paint = new Paint(1);
                this.aspectPaint = paint;
                paint.setColor(-16777216);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout = aspectRatioFrameLayout;
            aspectRatioFrameLayout.setBackgroundColor(0);
            if (z) {
                this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }
            TextureView textureView = new TextureView(getParentActivity());
            this.videoTextureView = textureView;
            textureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1));
        }
        ViewGroup viewGroup = (ViewGroup) this.videoPlayerContainer.getParent();
        if (viewGroup != null && viewGroup != this.contentView) {
            viewGroup.removeView(this.videoPlayerContainer);
            viewGroup = null;
        }
        if (viewGroup == null) {
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            FrameLayout frameLayout2 = this.videoPlayerContainer;
            int i = AndroidUtilities.roundPlayingMessageSize;
            chatActivityFragmentView.addView(frameLayout2, 1, new FrameLayout.LayoutParams(i, i));
        }
        this.videoPlayerContainer.setTag(null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: destroyTextureView */
    public void lambda$new$32() {
        FrameLayout frameLayout = this.videoPlayerContainer;
        if (frameLayout == null || frameLayout.getParent() == null) {
            return;
        }
        this.chatListView.invalidateViews();
        this.aspectRatioFrameLayout.setDrawingReady(false);
        this.videoPlayerContainer.setTag(null);
        if (Build.VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, null);
        }
        this.contentView.removeView(this.videoPlayerContainer);
    }

    private boolean hasSelectedNoforwardsMessage() {
        TLRPC$Message tLRPC$Message;
        for (int i = 0; i < this.selectedMessagesIds.length; i++) {
            try {
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    MessageObject valueAt = this.selectedMessagesIds[i].valueAt(i2);
                    if (valueAt != null && (tLRPC$Message = valueAt.messageOwner) != null && tLRPC$Message.noforwards) {
                        return true;
                    }
                }
            } catch (Exception unused) {
            }
        }
        return false;
    }

    private void setPagedownLoading(final boolean z, boolean z2) {
        float f = BitmapDescriptorFactory.HUE_RED;
        if (!z2 || Math.abs(this.pagedownLoadingT - (z ? 1.0f : 0.0f)) <= 0.01f) {
            if (z) {
                this.pagedownButtonArrow.setScaleX(BitmapDescriptorFactory.HUE_RED);
                this.pagedownButtonArrow.setScaleY(BitmapDescriptorFactory.HUE_RED);
                this.pagedownButtonArrow.setVisibility(8);
                this.pagedownButtonLoading.setVisibility(0);
                return;
            }
            this.pagedownButtonArrow.setScaleX(1.0f);
            this.pagedownButtonArrow.setScaleY(1.0f);
            this.pagedownButtonArrow.setVisibility(0);
            this.pagedownButtonLoading.setVisibility(8);
            return;
        }
        ValueAnimator valueAnimator = this.pagedownAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        final boolean[] zArr = new boolean[1];
        this.pagedownButtonArrow.setVisibility(0);
        float[] fArr = new float[2];
        fArr[0] = this.pagedownLoadingT;
        if (z) {
            f = 1.0f;
        }
        fArr[1] = f;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(fArr);
        this.pagedownAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda21
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$setPagedownLoading$127(zArr, z, valueAnimator2);
            }
        });
        this.pagedownAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.79
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (z) {
                    ChatActivity.this.pagedownButtonArrow.setVisibility(8);
                    if (zArr[0]) {
                        return;
                    }
                    ChatActivity.this.pagedownButtonLoadingDrawable.reset();
                    ChatActivity.this.pagedownButtonLoading.setVisibility(0);
                    return;
                }
                ChatActivity.this.pagedownButtonLoading.setVisibility(8);
            }
        });
        this.pagedownAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT);
        this.pagedownAnimator.setDuration(260L);
        this.pagedownAnimator.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setPagedownLoading$127(boolean[] zArr, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.pagedownLoadingT = floatValue;
        if (!zArr[0] && z && floatValue > 0.5f) {
            zArr[0] = true;
            this.pagedownButtonLoadingDrawable.reset();
            this.pagedownButtonLoading.setVisibility(0);
        }
        this.pagedownButtonLoading.setAlpha(Math.max((float) BitmapDescriptorFactory.HUE_RED, (this.pagedownLoadingT - 0.5f) * 2.0f));
        this.pagedownButtonArrow.setScaleX(1.0f - this.pagedownLoadingT);
        this.pagedownButtonArrow.setScaleY(1.0f - this.pagedownLoadingT);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openForward(boolean z, boolean z2) {
        String string;
        if (isForwardingEditor()) {
            moveSelectedMessages(true);
        } else if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
            if (getMessagesController().isChatNoForwards(this.currentChat)) {
                if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                    string = LocaleController.getString("ForwardsRestrictedInfoChannel", C3632R.string.ForwardsRestrictedInfoChannel);
                } else {
                    string = LocaleController.getString("ForwardsRestrictedInfoGroup", C3632R.string.ForwardsRestrictedInfoGroup);
                }
            } else {
                string = LocaleController.getString("ForwardsRestrictedInfoBot", C3632R.string.ForwardsRestrictedInfoBot);
            }
            if (z) {
                if (this.fwdRestrictedTopHint == null) {
                    SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                    int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    HintView hintView = new HintView((Context) getParentActivity(), 7, true);
                    this.fwdRestrictedTopHint = hintView;
                    sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 12, 0, 12, 0));
                    this.fwdRestrictedTopHint.setAlpha(BitmapDescriptorFactory.HUE_RED);
                    this.fwdRestrictedTopHint.setVisibility(4);
                }
                this.fwdRestrictedTopHint.setText(string);
                this.fwdRestrictedTopHint.showForView(this.actionBar.getActionMode().getItem(11), true);
                return;
            }
            if (this.fwdRestrictedBottomHint == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout2 = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild2 = sizeNotifierFrameLayout2.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild2 == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 9);
                this.fwdRestrictedBottomHint = hintView2;
                sizeNotifierFrameLayout2.addView(hintView2, indexOfChild2 + 1, LayoutHelper.createFrame(-2, -2, 51, 12, 0, 12, 0));
                this.fwdRestrictedBottomHint.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.fwdRestrictedBottomHint.setVisibility(4);
            }
            this.fwdRestrictedBottomHint.setText(string);
            this.fwdRestrictedBottomHint.showForView(this.forwardButton, true);
        } else if (z2) {
            forwardCloud();
        } else {
            int i = 0;
            boolean z3 = false;
            for (int i2 = 0; i2 < 2; i2++) {
                for (int i3 = 0; i3 < this.selectedMessagesIds[i2].size(); i3++) {
                    MessageObject valueAt = this.selectedMessagesIds[i2].valueAt(i3);
                    if (valueAt.isPoll()) {
                        i = valueAt.isPublicPoll() ? 2 : 1;
                        if (i == 2) {
                            break;
                        }
                    } else if (valueAt.isInvoice()) {
                        z3 = true;
                    }
                }
                if (i == 2) {
                    break;
                }
            }
            ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
            if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
                this.selectionReactionsOverlay.setHiddenByScroll(true);
            }
            Bundle bundle = new Bundle();
            bundle.putBoolean("onlySelect", true);
            bundle.putInt("dialogsType", 3);
            bundle.putInt("messagesCount", this.canForwardMessagesCount);
            bundle.putInt("hasPoll", i);
            bundle.putBoolean("hasInvoice", z3);
            bundle.putBoolean("canSelectTopics", true);
            DialogsActivity dialogsActivity = new DialogsActivity(bundle);
            dialogsActivity.setDelegate(this);
            presentFragment(dialogsActivity);
        }
    }

    private void showBottomOverlayProgress(final boolean z, boolean z2) {
        if (!z || this.bottomOverlayProgress.getTag() == null) {
            if (z || this.bottomOverlayProgress.getTag() != null) {
                AnimatorSet animatorSet = this.bottomOverlayAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.bottomOverlayAnimation = null;
                }
                this.bottomOverlayProgress.setTag(z ? 1 : null);
                float f = BitmapDescriptorFactory.HUE_RED;
                int i = 4;
                float f2 = 0.1f;
                if (z2) {
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.bottomOverlayAnimation = animatorSet2;
                    if (z) {
                        this.bottomOverlayProgress.setVisibility(0);
                        this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 1.0f));
                        this.bottomOverlayAnimation.setStartDelay(200L);
                    } else {
                        Object obj = this.bottomOverlayLinks ? this.bottomOverlayLinksText : this.bottomOverlayChatText;
                        animatorSet2.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofFloat(obj, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(obj, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(obj, View.ALPHA, 1.0f));
                    }
                    this.bottomOverlayAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.80
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                                return;
                            }
                            if (!z) {
                                ChatActivity.this.bottomOverlayProgress.setVisibility(4);
                            } else {
                                (ChatActivity.this.bottomOverlayLinks ? ChatActivity.this.bottomOverlayLinksText : ChatActivity.this.bottomOverlayChatText).setVisibility(4);
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                                return;
                            }
                            ChatActivity.this.bottomOverlayAnimation = null;
                        }
                    });
                    this.bottomOverlayAnimation.setDuration(150L);
                    this.bottomOverlayAnimation.start();
                    return;
                }
                this.bottomOverlayProgress.setVisibility(z ? 0 : 4);
                this.bottomOverlayProgress.setScaleX(z ? 1.0f : 0.1f);
                this.bottomOverlayProgress.setScaleY(z ? 1.0f : 0.1f);
                this.bottomOverlayProgress.setAlpha(1.0f);
                this.bottomOverlayChatText.setVisibility((z || this.bottomOverlayLinks) ? 4 : 0);
                LinkSpanDrawable.LinksTextView linksTextView = this.bottomOverlayLinksText;
                if (!z && this.bottomOverlayLinks) {
                    i = 0;
                }
                linksTextView.setVisibility(i);
                this.bottomOverlayChatText.setScaleX((z || this.bottomOverlayLinks) ? 0.1f : 1.0f);
                this.bottomOverlayLinksText.setScaleX((z || !this.bottomOverlayLinks) ? 0.1f : 1.0f);
                this.bottomOverlayChatText.setScaleY((z || this.bottomOverlayLinks) ? 0.1f : 1.0f);
                LinkSpanDrawable.LinksTextView linksTextView2 = this.bottomOverlayLinksText;
                if (!z && this.bottomOverlayLinks) {
                    f2 = 1.0f;
                }
                linksTextView2.setScaleY(f2);
                this.bottomOverlayChatText.setAlpha((z || this.bottomOverlayLinks) ? 0.0f : 1.0f);
                LinkSpanDrawable.LinksTextView linksTextView3 = this.bottomOverlayLinksText;
                if (!z && this.bottomOverlayLinks) {
                    f = 1.0f;
                }
                linksTextView3.setAlpha(f);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: sendBotInlineResult */
    public void lambda$createView$66(TLRPC$BotInlineResult tLRPC$BotInlineResult, boolean z, int i, String str) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView == null) {
            return;
        }
        long contextBotId = mentionsContainerView.getAdapter().getContextBotId();
        HashMap hashMap = new HashMap();
        hashMap.put(TtmlNode.ATTR_ID, tLRPC$BotInlineResult.f1600id);
        hashMap.put("query_id", "" + tLRPC$BotInlineResult.query_id);
        hashMap.put("bot", "" + contextBotId);
        hashMap.put("bot_name", this.mentionContainer.getAdapter().getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(this, getAccountInstance(), tLRPC$BotInlineResult, hashMap, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, z, i, str);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
        getMediaDataController().increaseInlineRaiting(contextBotId);
    }

    private void checkBotCommands() {
        TLRPC$Chat tLRPC$Chat;
        r0 = false;
        r0 = false;
        boolean z = false;
        URLSpanBotCommand.enabled = false;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.bot) {
            URLSpanBotCommand.enabled = !UserObject.isReplyUser(tLRPC$User);
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i).user_id));
                if (user != null && user.bot) {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
            if (!tLRPC$ChatFull.bot_info.isEmpty() && (tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.megagroup) {
                z = true;
            }
            URLSpanBotCommand.enabled = z;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public MessageObject.GroupedMessages getValidGroupedMessage(MessageObject messageObject) {
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
            if (groupedMessages == null || (groupedMessages.messages.size() > 1 && groupedMessages.positions.get(messageObject) != null)) {
                return groupedMessages;
            }
            return null;
        }
        return null;
    }

    public void jumpToDate(int i) {
        int i2;
        TLRPC$Message tLRPC$Message;
        if (getParentActivity() == null || this.messages.isEmpty()) {
            return;
        }
        ArrayList<MessageObject> arrayList = this.messages;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        if ((this.messages.get(0).messageOwner.date >= i && messageObject.messageOwner.date <= i) || (messageObject.messageOwner.date >= i && this.endReached[0])) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if (messageObject2.messageOwner.date >= i && messageObject2.getId() != 0) {
                    scrollToMessageId(messageObject2.getId(), 0, false, messageObject2.getDialogId() != this.mergeDialogId ? 0 : 1, true, 0);
                    return;
                }
            }
        } else if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
            int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
            while (true) {
                if (findFirstVisibleItemPosition > findLastVisibleItemPosition) {
                    i2 = -1;
                    break;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (findFirstVisibleItemPosition < chatActivityAdapter.messagesStartRow || findFirstVisibleItemPosition >= chatActivityAdapter.messagesEndRow || (tLRPC$Message = this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow).messageOwner) == null) {
                    findFirstVisibleItemPosition++;
                } else {
                    int i3 = tLRPC$Message.date < i ? 1 : 0;
                    if (isSecretChat()) {
                        i3 ^= 1;
                    }
                    i2 = i3 ^ 1;
                }
            }
            this.chatScrollHelper.setScrollDirection(i2);
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            int i4 = this.lastLoadIndex;
            this.postponedScrollToLastMessageQueryIndex = i4;
            this.waitingForLoad.add(Integer.valueOf(i4));
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i5 = this.classGuid;
            int i6 = this.chatMode;
            long j3 = this.threadMessageId;
            int i7 = this.replyMaxReadId;
            int i8 = this.lastLoadIndex;
            this.lastLoadIndex = i8 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, i, true, 0, i5, 4, 0, i6, j3, i7, i8, this.isTopic);
            this.floatingDateView.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.floatingDateView.setTag(null);
        }
    }

    public void processInlineBotWebView(final TLRPC$TL_inlineBotWebView tLRPC$TL_inlineBotWebView) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda279
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processInlineBotWebView$128(tLRPC$TL_inlineBotWebView);
            }
        };
        if (this.approved) {
            runnable.run();
        } else {
            WebAppDisclaimerAlert.show(getContext(), new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda140
                @Override // com.google.android.exoplayer2.util.Consumer
                public final void accept(Object obj) {
                    ChatActivity.this.lambda$processInlineBotWebView$129(runnable, (Boolean) obj);
                }
            }, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processInlineBotWebView$128(TLRPC$TL_inlineBotWebView tLRPC$TL_inlineBotWebView) {
        BotWebViewSheet botWebViewSheet = new BotWebViewSheet(getContext(), getResourceProvider());
        botWebViewSheet.setParentActivity(getParentActivity());
        int i = this.currentAccount;
        TLRPC$User tLRPC$User = this.currentUser;
        botWebViewSheet.requestWebView(i, tLRPC$User != null ? tLRPC$User.f1751id : this.currentChat.f1602id, this.mentionContainer.getAdapter().getFoundContextBot().f1751id, tLRPC$TL_inlineBotWebView.text, tLRPC$TL_inlineBotWebView.url, 1, 0, false, 1);
        showDialog(botWebViewSheet);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processInlineBotWebView$129(Runnable runnable, Boolean bool) {
        this.approved = true;
        runnable.run();
    }

    public void processInlineBotContextPM(TLRPC$TL_inlineBotSwitchPM tLRPC$TL_inlineBotSwitchPM) {
        MentionsContainerView mentionsContainerView;
        TLRPC$User contextBotUser;
        if (tLRPC$TL_inlineBotSwitchPM == null || (mentionsContainerView = this.mentionContainer) == null || (contextBotUser = mentionsContainerView.getAdapter().getContextBotUser()) == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        long j = this.dialog_id;
        if (j == contextBotUser.f1751id) {
            this.inlineReturn = j;
            getMessagesController().sendBotStart(this.currentUser, tLRPC$TL_inlineBotSwitchPM.start_param);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", contextBotUser.f1751id);
        bundle.putString("inline_query", tLRPC$TL_inlineBotSwitchPM.start_param);
        bundle.putLong("inline_return", this.dialog_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    private void createChatAttachView() {
        if (getParentActivity() == null || getContext() == null || this.chatAttachAlert != null) {
            return;
        }
        ChatAttachAlert chatAttachAlert = new ChatAttachAlert(getParentActivity(), this, false, false, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.81
            @Override // org.telegram.p043ui.Components.ChatAttachAlert, org.telegram.p043ui.ActionBar.BottomSheet
            public void dismissInternal() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null && chatAttachAlert2.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                super.dismissInternal();
                ChatActivity.this.onEditTextDialogClose(false, true);
            }

            @Override // org.telegram.p043ui.ActionBar.BottomSheet
            public void onDismissAnimationStart() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.setFocusable(false);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.getEditField() != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().requestFocus();
                }
                ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert3 != null && chatAttachAlert3.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                ChatActivity.this.onEditTextDialogClose(false, false);
            }
        };
        this.chatAttachAlert = chatAttachAlert;
        chatAttachAlert.setDelegate(new ChatAttachAlert.ChatAttachViewDelegate() { // from class: org.telegram.ui.ChatActivity.82
            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void onWallpaperSelected(Object obj) {
                ChatAttachAlert.ChatAttachViewDelegate.CC.$default$onWallpaperSelected(this, obj);
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void openAvatarsSearch() {
                ChatAttachAlert.ChatAttachViewDelegate.CC.$default$openAvatarsSearch(this);
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ boolean selectItemOnClicking() {
                return ChatAttachAlert.ChatAttachViewDelegate.CC.$default$selectItemOnClicking(this);
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void sendAudio(ArrayList arrayList, CharSequence charSequence, boolean z, int i) {
                ChatAttachAlert.ChatAttachViewDelegate.CC.$default$sendAudio(this, arrayList, charSequence, z, i);
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didPressedButton(int i, boolean z, boolean z2, int i2, boolean z3, String str, boolean z4) {
                ChatActivity chatActivity;
                ChatAttachAlert chatAttachAlert2;
                boolean z5;
                String str2;
                if (ChatActivity.this.getParentActivity() == null || (chatAttachAlert2 = (chatActivity = ChatActivity.this).chatAttachAlert) == null) {
                    return;
                }
                chatActivity.editingMessageObject = chatAttachAlert2.getEditingMessageObject();
                if (i == 8 || i == 7 || (i == 4 && !ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos().isEmpty())) {
                    if (i != 8) {
                        ChatActivity.this.chatAttachAlert.dismiss(true);
                    }
                    HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos();
                    ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotosOrder();
                    if (ChatActivity.this.isForwardingEditor() && (ChatActivity.this.chatAttachAlert.getCurrentAttachLayout() instanceof ChatAttachAlertPhotoLayoutPreview)) {
                        ArrayList<MessageObject> arrayList = ChatActivity.this.editingGroupedMessages.messages;
                        ArrayList arrayList2 = new ArrayList();
                        MessageObject messageObject = null;
                        MediaController.PhotoEntry photoEntry = null;
                        for (int i3 = 0; i3 < selectedPhotosOrder.size(); i3++) {
                            MediaController.PhotoEntry photoEntry2 = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(i3));
                            MessageObject messageObject2 = (MessageObject) ChatActivity.this.messagesDict[0].get(photoEntry2.imageId);
                            arrayList2.add(messageObject2);
                            if (i3 == 0 || !TextUtils.isEmpty(messageObject2.caption)) {
                                if (i3 == 0) {
                                    photoEntry = photoEntry2;
                                }
                                messageObject = messageObject2;
                            }
                        }
                        messageObject.caption = null;
                        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                        CharSequence charSequence = photoEntry.caption;
                        tLRPC$Message.message = charSequence != null ? charSequence.toString() : "";
                        messageObject.messageOwner.entities = photoEntry.entities;
                        messageObject.generateCaption();
                        int indexOf = ChatActivity.this.messages.indexOf(arrayList.get(arrayList.size() - 1));
                        ChatActivity.this.messages.removeAll(arrayList);
                        for (int i4 = 0; i4 < arrayList2.size(); i4++) {
                            ChatActivity.this.messages.add(indexOf, (MessageObject) arrayList2.get(i4));
                        }
                        Iterator<MessageObject> it = arrayList.iterator();
                        while (it.hasNext()) {
                            ChatActivity.this.messagesDict[0].remove(it.next().getId());
                        }
                        Iterator it2 = arrayList2.iterator();
                        while (it2.hasNext()) {
                            MessageObject messageObject3 = (MessageObject) it2.next();
                            ChatActivity.this.messagesDict[0].put(messageObject3.getId(), messageObject3);
                        }
                        ChatActivity.this.editingGroupedMessages.messages.clear();
                        ChatActivity.this.editingGroupedMessages.messages.addAll(arrayList2);
                        ChatActivity.this.editingGroupedMessages.calculate();
                        int indexOf2 = ChatActivity.this.messages.indexOf((MessageObject) arrayList2.get(arrayList2.size() - 1));
                        if (indexOf2 < 0 || ChatActivity.this.chatAdapter == null || ChatActivity.this.chatListItemAnimator == null) {
                            return;
                        }
                        if (arrayList2.size() == 1) {
                            ChatActivity.this.chatListItemAnimator.groupWillTransformToSingleMessage(ChatActivity.this.editingGroupedMessages);
                        } else {
                            ChatActivity.this.chatListItemAnimator.groupWillChanged(ChatActivity.this.editingGroupedMessages);
                        }
                        ChatActivity.this.chatAdapter.notifyItemRangeChanged(indexOf2 + ChatActivity.this.chatAdapter.messagesStartRow, arrayList2.size());
                        return;
                    }
                    if (!selectedPhotos.isEmpty()) {
                        for (int i5 = 0; i5 < Math.ceil(selectedPhotos.size() / 10.0f); i5++) {
                            int i6 = i5 * 10;
                            int min = Math.min(10, selectedPhotos.size() - i6);
                            ArrayList arrayList3 = new ArrayList();
                            for (int i7 = 0; i7 < min; i7++) {
                                int i8 = i6 + i7;
                                if (i8 < selectedPhotosOrder.size()) {
                                    MediaController.PhotoEntry photoEntry3 = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(i8));
                                    SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                                    boolean z6 = photoEntry3.isVideo;
                                    if (!z6 && (str2 = photoEntry3.imagePath) != null) {
                                        sendingMediaInfo.path = str2;
                                    } else {
                                        String str3 = photoEntry3.path;
                                        if (str3 != null) {
                                            sendingMediaInfo.path = str3;
                                        }
                                    }
                                    sendingMediaInfo.thumbPath = photoEntry3.thumbPath;
                                    sendingMediaInfo.isVideo = z6;
                                    CharSequence charSequence2 = photoEntry3.caption;
                                    sendingMediaInfo.caption = charSequence2 != null ? charSequence2.toString() : null;
                                    sendingMediaInfo.entities = photoEntry3.entities;
                                    sendingMediaInfo.masks = photoEntry3.stickers;
                                    sendingMediaInfo.ttl = photoEntry3.ttl;
                                    sendingMediaInfo.videoEditedInfo = photoEntry3.editedInfo;
                                    sendingMediaInfo.canDeleteAfter = photoEntry3.canDeleteAfter;
                                    sendingMediaInfo.updateStickersOrder = SendMessagesHelper.checkUpdateStickersOrder(photoEntry3.caption);
                                    sendingMediaInfo.hasMediaSpoilers = photoEntry3.hasSpoiler;
                                    arrayList3.add(sendingMediaInfo);
                                    photoEntry3.reset();
                                }
                            }
                            if (i5 == 0) {
                                ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList3.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList3.get(0)).entities);
                                z5 = ((SendMessagesHelper.SendingMediaInfo) arrayList3.get(0)).updateStickersOrder;
                            } else {
                                z5 = false;
                            }
                            if (!z4) {
                                SendMessagesHelper.prepareSendingMedia(ChatActivity.this.getAccountInstance(), arrayList3, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, ChatActivity.this.replyingQuote, i == 4 || z3, z, ChatActivity.this.editingMessageObject, z2, i2, z5, null, str);
                            } else {
                                ChatActivity chatActivity2 = ChatActivity.this;
                                chatActivity2.presenter.checkAndSendReaction(arrayList3, "", chatActivity2.replyingMessageObject);
                                return;
                            }
                        }
                        ChatActivity.this.afterMessageSend();
                        ChatActivity.this.chatActivityEnterView.setFieldText("");
                    }
                    if (i2 != 0) {
                        if (ChatActivity.this.scheduledMessagesCount == -1) {
                            ChatActivity.this.scheduledMessagesCount = 0;
                        }
                        ChatActivity.access$5312(ChatActivity.this, selectedPhotos.size());
                        ChatActivity.this.updateScheduledInterface(true);
                        return;
                    }
                    return;
                }
                ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert3 != null) {
                    chatAttachAlert3.dismissWithButtonClick(i);
                }
                ChatActivity.this.processSelectedAttach(i);
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didSelectBot(TLRPC$User tLRPC$User) {
                String publicUsername = UserObject.getPublicUsername(tLRPC$User);
                if (ChatActivity.this.chatActivityEnterView == null || tLRPC$User == null || TextUtils.isEmpty(publicUsername)) {
                    return;
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                chatActivityEnterView.setFieldText("@" + publicUsername + " ");
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void onCameraOpened() {
                ChatActivity.this.chatActivityEnterView.closeKeyboard();
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public boolean needEnterComment() {
                return ChatActivity.this.needEnterText();
            }

            @Override // org.telegram.p043ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void doOnIdle(Runnable runnable) {
                ChatActivity.this.lambda$openDiscussionMessageChat$329(runnable);
            }
        });
        this.chatAttachAlert.setTemplatesDelegate(this.templatesDelegate);
    }

    public boolean needEnterText() {
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        View view = this.fragmentView;
        if (view != null) {
            view.requestLayout();
        }
        return isKeyboardVisible;
    }

    public void onEditTextDialogClose(boolean z, boolean z2) {
        if (this.openKeyboardOnAttachMenuClose) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda219
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onEditTextDialogClose$130();
                }
            }, 50L);
            if (z2) {
                this.openKeyboardOnAttachMenuClose = false;
            }
        }
        if (z) {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onEditTextDialogClose$130() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* renamed from: doOnIdle */
    public void lambda$openDiscussionMessageChat$329(Runnable runnable) {
        NotificationCenter.getInstance(this.currentAccount).doOnIdle(runnable);
    }

    public void performHistoryClear(final boolean z, boolean z2) {
        this.clearingHistory = true;
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda286
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$131(z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$132();
            }
        });
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$131(boolean z) {
        if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            this.pinnedMessageIds.clear();
            this.pinnedMessageObjects.clear();
            this.currentPinnedMessageId = 0;
            this.loadedPinnedMessagesCount = 0;
            this.totalPinnedMessagesCount = 0;
            updatePinnedMessageView(true);
        }
        getMessagesController().deleteDialog(this.dialog_id, 1, z);
        this.clearingHistory = false;
        clearHistory(false, null);
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$132() {
        this.clearingHistory = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface, org.telegram.p043ui.Components.InstantCameraView.Delegate
    public long getDialogId() {
        return this.dialog_id;
    }

    public int getDialogFolderId() {
        return this.dialogFolderId;
    }

    public int getDialogFilterId() {
        return this.dialogFilterId;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public boolean openedWithLivestream() {
        return this.livestream;
    }

    public UndoView getUndoView() {
        createUndoView();
        return this.undoView;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public long getMergeDialogId() {
        return this.mergeDialogId;
    }

    public boolean hasReportSpam() {
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        return (blurredFrameLayout == null || blurredFrameLayout.getTag() != null || this.reportSpamButton.getVisibility() == 8) ? false : true;
    }

    public boolean isReport() {
        return this.reportType >= 0;
    }

    public void setChatInvite(TLRPC$ChatInvite tLRPC$ChatInvite) {
        this.chatInvite = tLRPC$ChatInvite;
    }

    public void setBotUser(String str) {
        if (this.inlineReturn != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
            return;
        }
        this.botUser = str;
        lambda$didReceivedNotification$183();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void afterMessageSend() {
        if (this.threadMessageId == 0 || this.isTopic) {
            if (this.isTopic) {
                this.replyingMessageObject = this.threadMessageObject;
            } else {
                this.replyingMessageObject = null;
            }
            this.replyingQuote = null;
            this.chatActivityEnterView.setReplyingMessageObject(null, null);
        }
        hideFieldPanel(false);
        if (this.chatMode == 0) {
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, true);
        }
    }

    private void toggleMesagesSearchListView() {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            showMessagesSearchListView(recyclerListView.getTag() == null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMessagesSearchListView(final boolean z) {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            if (!z || recyclerListView.getTag() == null) {
                if (z || this.messagesSearchListView.getTag() != null) {
                    AnimatorSet animatorSet = this.messagesSearchListViewAnimation;
                    if (animatorSet != null) {
                        animatorSet.cancel();
                        this.messagesSearchListViewAnimation = null;
                    }
                    if (z) {
                        this.messagesSearchListView.setVisibility(0);
                    }
                    this.messagesSearchListView.setTag(z ? 1 : null);
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.messagesSearchListViewAnimation = animatorSet2;
                    Animator[] animatorArr = new Animator[1];
                    RecyclerListView recyclerListView2 = this.messagesSearchListView;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z ? 1.0f : BitmapDescriptorFactory.HUE_RED;
                    animatorArr[0] = ObjectAnimator.ofFloat(recyclerListView2, property, fArr);
                    animatorSet2.playTogether(animatorArr);
                    this.messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
                    this.messagesSearchListViewAnimation.setDuration(180L);
                    this.messagesSearchListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.83
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                                if (z) {
                                    return;
                                }
                                ChatActivity.this.messagesSearchListView.setVisibility(8);
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                            }
                        }
                    });
                    this.messagesSearchListViewAnimation.start();
                }
            }
        }
    }

    public boolean playFirstUnreadVoiceMessage() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordingAudioVideo()) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject = this.messages.get(size);
                if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                    MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                    return true;
                }
            }
            if (Build.VERSION.SDK_INT < 23 || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
                return false;
            }
            getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
            return true;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openScheduledMessages() {
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null || iNavigationLayout.getLastFragment() != this) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat != null) {
            bundle.putInt("enc_id", tLRPC$EncryptedChat.f1614id);
        } else {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null) {
                bundle.putLong("chat_id", tLRPC$Chat.f1602id);
            } else {
                bundle.putLong("user_id", this.currentUser.f1751id);
            }
        }
        bundle.putInt("chatMode", 1);
        ChatActivity chatActivity = new ChatActivity(bundle);
        if (this.isTopic) {
            ForumUtilities.applyTopic(chatActivity, MessagesStorage.TopicKey.m98of(getDialogId(), getTopicId()));
        }
        chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.84
            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onForwardingMessagesChanged(ArrayList arrayList) {
                ChatActivityDelegate.CC.$default$onForwardingMessagesChanged(this, arrayList);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onReport() {
                ChatActivityDelegate.CC.$default$onReport(this);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2, boolean z3, ChatActivity chatActivity2, ArrayList arrayList, HashMap hashMap) {
                ChatActivityDelegate.CC.$default$onUnpin(this, z, z2, z3, chatActivity2, arrayList, hashMap);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void setFieldText(CharSequence charSequence) {
                ChatActivityDelegate.CC.$default$setFieldText(this, charSequence);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public void openReplyMessage(int i) {
                ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public void openSearch(String str) {
                ChatActivity.this.openSearchWithText(str);
            }
        };
        presentFragment(chatActivity, false);
    }

    public void shareMyContact(final int i, final MessageObject messageObject) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", C3632R.string.ShareYouPhoneNumberTitle));
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            if (tLRPC$User.bot) {
                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", C3632R.string.AreYouSureShareMyContactInfoBot));
            } else {
                int i2 = C3632R.string.AreYouSureShareMyContactInfoUser;
                C3544PhoneFormat c3544PhoneFormat = C3544PhoneFormat.getInstance();
                TLRPC$User tLRPC$User2 = this.currentUser;
                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", i2, c3544PhoneFormat.format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(tLRPC$User2.first_name, tLRPC$User2.last_name))));
            }
        } else {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", C3632R.string.AreYouSureShareMyContactInfo));
        }
        builder.setPositiveButton(LocaleController.getString("ShareContact", C3632R.string.ShareContact), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda41
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i3) {
                ChatActivity.this.lambda$shareMyContact$134(i, messageObject, dialogInterface, i3);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$134(int i, MessageObject messageObject, DialogInterface dialogInterface, int i2) {
        if (i == 1) {
            TLRPC$TL_contacts_acceptContact tLRPC$TL_contacts_acceptContact = new TLRPC$TL_contacts_acceptContact();
            tLRPC$TL_contacts_acceptContact.f1648id = getMessagesController().getInputUser(this.currentUser);
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_acceptContact, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda321
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$shareMyContact$133(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.m82of(getUserConfig().getCurrentUser(), this.dialog_id, messageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0, (String) null));
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$133(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showVoiceHint(boolean z, boolean z2) {
        ChatActivityEnterView chatActivityEnterView;
        int i;
        String str;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if ((z && this.voiceHintTextView == null) || this.chatMode != 0 || (chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getAudioVideoButtonContainer() == null || this.chatActivityEnterView.getAudioVideoButtonContainer().getVisibility() != 0 || isInPreviewMode()) {
            return;
        }
        if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.voiceHintTextView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 10, 0));
        }
        if (z) {
            this.voiceHintTextView.hide();
            return;
        }
        if (this.chatActivityEnterView.hasRecordVideo()) {
            HintView hintView2 = this.voiceHintTextView;
            if (z2) {
                i = C3632R.string.HoldToVideo;
                str = "HoldToVideo";
            } else {
                i = C3632R.string.HoldToAudio;
                str = "HoldToAudio";
            }
            hintView2.setText(LocaleController.getString(str, i));
        } else {
            this.voiceHintTextView.setText(LocaleController.getString("HoldToAudioOnly", C3632R.string.HoldToAudioOnly));
        }
        this.voiceHintTextView.showForView(this.chatActivityEnterView.getAudioVideoButtonContainer(), true);
    }

    public boolean checkSlowMode(View view) {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            showSlowModeHint(view, true, slowModeTimer);
            return true;
        }
        return false;
    }

    public boolean checkSlowModeAlert() {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString("Slowmode", C3632R.string.Slowmode)).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", C3632R.string.SlowModeHint, slowModeTimer))).setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), null).show();
            return false;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideHints(boolean z) {
        if (!z) {
            HintView hintView = this.slowModeHint;
            if (hintView != null) {
                hintView.hide();
            }
            HintView hintView2 = this.searchAsListHint;
            if (hintView2 != null) {
                hintView2.hide();
            }
            HintView hintView3 = this.scheduledOrNoSoundHint;
            if (hintView3 != null) {
                hintView3.hide();
            }
            HintView hintView4 = this.scheduledHint;
            if (hintView4 != null) {
                hintView4.hide();
            }
        }
        HintView hintView5 = this.fwdRestrictedBottomHint;
        if (hintView5 != null) {
            hintView5.hide();
        }
        HintView hintView6 = this.fwdRestrictedTopHint;
        if (hintView6 != null) {
            hintView6.hide();
        }
        HintView hintView7 = this.noSoundHintView;
        if (hintView7 != null) {
            hintView7.hide();
        }
        HintView hintView8 = this.forwardHintView;
        if (hintView8 != null) {
            hintView8.hide();
        }
        HintView hintView9 = this.pollHintView;
        if (hintView9 != null) {
            hintView9.hide();
        }
        HintView hintView10 = this.timerHintView;
        if (hintView10 != null) {
            hintView10.hide();
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null) {
            checksHintView.hide();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideSendButtonHints() {
        HintView hintView = this.scheduledOrNoSoundHint;
        if (hintView != null) {
            hintView.hide();
        }
        HintView hintView2 = this.scheduledHint;
        if (hintView2 != null) {
            hintView2.hide();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showSlowModeHint(View view, boolean z, CharSequence charSequence) {
        HintView hintView;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (z || ((hintView = this.slowModeHint) != null && hintView.getVisibility() == 0)) {
            this.slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", C3632R.string.SlowModeHint, charSequence)));
            if (z) {
                this.slowModeHint.showForView(view, true);
            }
        }
    }

    public void showTimerHint() {
        String formatPluralString;
        if (getParentActivity() == null || this.fragmentView == null || this.chatInfo == null) {
            return;
        }
        if (this.timerHintView == null) {
            HintView hintView = new HintView(getParentActivity(), 7, true, this.themeDelegate);
            this.timerHintView = hintView;
            hintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.timerHintView.setVisibility(4);
            this.timerHintView.setShowingDuration(4000L);
            this.contentView.addView(this.timerHintView, LayoutHelper.createFrame(-2, -2, 51, 19, 0, 19, 0));
        }
        int i = this.chatInfo.ttl_period;
        if (i > 86400) {
            formatPluralString = LocaleController.formatPluralString("Days", i / 86400, new Object[0]);
        } else if (i >= 3600) {
            formatPluralString = LocaleController.formatPluralString("Hours", i / 3600, new Object[0]);
        } else if (i >= 60) {
            formatPluralString = LocaleController.formatPluralString("Minutes", i / 60, new Object[0]);
        } else {
            formatPluralString = LocaleController.formatPluralString("Seconds", i, new Object[0]);
        }
        this.timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", C3632R.string.AutoDeleteSetInfo, formatPluralString));
        this.timerHintView.showForView(this.avatarContainer.getTimeItem(), true);
    }

    private void showSearchAsListHint() {
        if (getParentActivity() == null || this.fragmentView == null || this.searchCountText == null) {
            return;
        }
        if (this.searchAsListHint == null) {
            HintView hintView = new HintView(getParentActivity(), 3, this.themeDelegate);
            this.searchAsListHint = hintView;
            hintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.searchAsListHint.setVisibility(4);
            this.searchAsListHint.setText(LocaleController.getString("TapToViewAsList", C3632R.string.TapToViewAsList));
            this.contentView.addView(this.searchAsListHint, LayoutHelper.createFrame(-2, -2, 51, 19, 0, 19, 0));
        }
        this.searchAsListHint.showForView(this.searchCountText, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showScheduledHint() {
        TLRPC$ChatFull tLRPC$ChatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        if (this.scheduledHintShown || this.scheduledOrNoSoundHintShown || z || SharedConfig.scheduledHintShows >= 3 || this.chatActivityEnterView.isEditingMessage()) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledHintRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledHintRunnable, 4000L);
    }

    private void showScheduledOrNoSoundHint() {
        TLRPC$ChatFull tLRPC$ChatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        long currentTimeMillis = System.currentTimeMillis() - SharedConfig.scheduledOrNoSoundHintSeenAt;
        long currentTimeMillis2 = System.currentTimeMillis() - SharedConfig.scheduledHintSeenAt;
        if (z || SharedConfig.scheduledOrNoSoundHintShows >= 3 || currentTimeMillis < 86400000 || currentTimeMillis2 < 86400000 || this.chatActivityEnterView.isEditingMessage()) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledOrNoSoundRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledOrNoSoundRunnable, 200L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMediaBannedHint() {
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        int indexOfChild;
        if (getParentActivity() != null) {
            if ((this.currentChat == null && this.userInfo == null) || this.fragmentView == null) {
                return;
            }
            HintView hintView = this.mediaBanTooltip;
            if ((hintView == null || hintView.getVisibility() != 0) && (indexOfChild = (sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView).indexOfChild(this.chatActivityEnterView)) != -1) {
                try {
                    this.fragmentView.performHapticFeedback(3, 2);
                } catch (Exception e) {
                    FileLog.m102e(e);
                }
                if (this.mediaBanTooltip == null) {
                    HintView hintView2 = new HintView(getParentActivity(), 9, this.themeDelegate);
                    this.mediaBanTooltip = hintView2;
                    hintView2.setVisibility(8);
                    sizeNotifierFrameLayout.addView(this.mediaBanTooltip, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 10, 0));
                }
                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                if (tLRPC$UserFull != null && tLRPC$UserFull.voice_messages_forbidden) {
                    this.mediaBanTooltip.setText(AndroidUtilities.replaceTags(LocaleController.formatString(this.chatActivityEnterView.isInVideoMode() ? C3632R.string.VideoMessagesRestrictedByPrivacy : C3632R.string.VoiceMessagesRestrictedByPrivacy, this.currentUser.first_name)));
                } else if (!ChatObject.canSendVoice(this.currentChat) && !ChatObject.canSendRoundVideo(this.currentChat)) {
                    if (this.chatActivityEnterView.isInVideoMode()) {
                        this.mediaBanTooltip.setText(ChatObject.getRestrictedErrorText(this.currentChat, 21));
                    } else {
                        this.mediaBanTooltip.setText(ChatObject.getRestrictedErrorText(this.currentChat, 20));
                    }
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 20)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachVoiceRestricted", C3632R.string.GlobalAttachVoiceRestricted));
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 21)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachRoundRestricted", C3632R.string.GlobalAttachRoundRestricted));
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", C3632R.string.GlobalAttachMediaRestricted));
                } else {
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = this.currentChat.banned_rights;
                    if (tLRPC$TL_chatBannedRights == null) {
                        return;
                    }
                    if (AndroidUtilities.isBannedForever(tLRPC$TL_chatBannedRights)) {
                        this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", C3632R.string.AttachMediaRestrictedForever));
                    } else {
                        this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", C3632R.string.AttachMediaRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                    }
                }
                View sendButton = this.chatActivityEnterView.getSendButton();
                View audioVideoButtonContainer = this.chatActivityEnterView.getAudioVideoButtonContainer();
                if (sendButton.getAlpha() < audioVideoButtonContainer.getAlpha()) {
                    sendButton = audioVideoButtonContainer;
                }
                this.mediaBanTooltip.showForView(sendButton, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showNoSoundHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        AnimatedFileDrawable animation;
        if (this.scrollingChatListView || SharedConfig.noSoundHintShowed || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.noSoundHintView;
        if ((hintView == null || hintView.getTag() == null) && !this.inPreviewMode) {
            if (this.noSoundHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 0, this.themeDelegate);
                this.noSoundHintView = hintView2;
                hintView2.setShowingDuration(10000L);
                sizeNotifierFrameLayout.addView(this.noSoundHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 19, 0, 19, 0));
                this.noSoundHintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.noSoundHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isVideo() && (animation = chatMessageCell.getPhotoImage().getAnimation()) != null && animation.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(chatMessageCell, true)) {
                    SharedConfig.setNoSoundHintShowed(true);
                    return;
                }
            }
        }
    }

    private void checkChecksHint() {
        if (getMessagesController().pendingSuggestions.contains("NEWCOMER_TICKS")) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda187
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.showChecksHint();
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChecksHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView == null || checksHintView.getTag() == null) {
            if (this.checksHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                ChecksHintView checksHintView2 = new ChecksHintView(getParentActivity(), this.themeDelegate);
                this.checksHintView = checksHintView2;
                sizeNotifierFrameLayout.addView(checksHintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 10, 0, 10, 0));
                this.checksHintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.checksHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isOutOwner() && messageObject.isSent() && this.checksHintView.showForMessageCell(chatMessageCell, true)) {
                    getMessagesController().removeSuggestion(0L, "NEWCOMER_TICKS");
                    return;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showForwardHint(ChatMessageCell chatMessageCell) {
        View view;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || (view = this.fragmentView) == null) {
            return;
        }
        if (this.forwardHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 1, this.themeDelegate);
            this.forwardHintView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 19, 0, 19, 0));
            this.forwardHintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
            this.forwardHintView.setVisibility(4);
        }
        this.forwardHintView.showForMessageCell(chatMessageCell, true);
    }

    private void showTextSelectionHint(MessageObject messageObject) {
        CharSequence charSequence;
        if (getParentActivity() == null || getMessagesController().isChatNoForwards(messageObject.getChatId())) {
            return;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message == null || !tLRPC$Message.noforwards) {
            boolean z = false;
            ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
            if (arrayList != null && !arrayList.isEmpty()) {
                charSequence = messageObject.messageText;
                if (messageObject.textLayoutBlocks.size() > 1) {
                    z = true;
                }
            } else {
                charSequence = messageObject.caption;
            }
            if (!z && charSequence != null) {
                z = true;
            }
            if (!z || SharedConfig.textSelectionHintShows > 2 || this.textSelectionHintWasShowed || this.lastTouchY > this.chatActivityEnterView.getTop() - AndroidUtilities.m107dp(60)) {
                return;
            }
            this.textSelectionHintWasShowed = true;
            SharedConfig.increaseTextSelectionHintShowed();
            if (this.textSelectionHint == null) {
                TextSelectionHint textSelectionHint = new TextSelectionHint(getParentActivity(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.85
                    @Override // org.telegram.p043ui.Components.TextSelectionHint, android.view.View
                    protected void onMeasure(int i, int i2) {
                        super.onMeasure(i, i2);
                        updatePosition();
                    }

                    @Override // org.telegram.p043ui.Components.TextSelectionHint, android.view.View
                    protected void onDraw(Canvas canvas) {
                        super.onDraw(canvas);
                        updatePosition();
                    }

                    public void updatePosition() {
                        int top = ChatActivity.this.chatActivityEnterView.getTop() - ChatActivity.this.contentView.getMeasuredHeight();
                        setTranslationY(top - ((top + (-(getMeasuredHeight() + AndroidUtilities.m107dp(16)))) * (1.0f - getPrepareProgress())));
                    }
                };
                this.textSelectionHint = textSelectionHint;
                this.contentView.addView(textSelectionHint, LayoutHelper.createFrame(-2, 56, 83, 8, 0, 8, 8));
            }
            this.textSelectionHint.show();
        }
    }

    private boolean showGifHint() {
        View view;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
            if (globalMainSettings.getBoolean("gifhint", false)) {
                return false;
            }
            globalMainSettings.edit().putBoolean("gifhint", true).commit();
            if (getParentActivity() != null && (view = this.fragmentView) != null && this.gifHintTextView == null) {
                if (!this.allowContextBotPanelSecond) {
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setOpenGifsTabFirst();
                    }
                    return false;
                }
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return false;
                }
                this.chatActivityEnterView.setOpenGifsTabFirst();
                View view2 = new View(getParentActivity());
                this.emojiButtonRed = view2;
                view2.setBackgroundResource(C3632R.C3634drawable.redcircle);
                int i = indexOfChild + 1;
                sizeNotifierFrameLayout.addView(this.emojiButtonRed, i, LayoutHelper.createFrame(10, 10, 83, 30, 0, 0, 27));
                HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
                this.gifHintTextView = hintView;
                hintView.setText(LocaleController.getString("TapHereGifs", C3632R.string.TapHereGifs));
                sizeNotifierFrameLayout.addView(this.gifHintTextView, i, LayoutHelper.createFrame(-2, -2, 83, 5, 0, 5, 3));
                AnimatorSet animatorSet = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(this.gifHintTextView, View.ALPHA, BitmapDescriptorFactory.HUE_RED, 1.0f), ObjectAnimator.ofFloat(this.emojiButtonRed, View.ALPHA, BitmapDescriptorFactory.HUE_RED, 1.0f));
                animatorSet.addListener(new C428587());
                animatorSet.setDuration(300L);
                animatorSet.start();
                View emojiButton = this.chatActivityEnterView.getEmojiButton();
                if (emojiButton != null) {
                    this.gifHintTextView.showForView(emojiButton, true);
                }
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$87 */
    /* loaded from: classes5.dex */
    public class C428587 extends AnimatorListenerAdapter {
        C428587() {
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$87$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.C428587.this.lambda$onAnimationEnd$0();
                }
            }, ExoPlayer.DEFAULT_DETACH_SURFACE_TIMEOUT_MS);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (ChatActivity.this.gifHintTextView == null) {
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, BitmapDescriptorFactory.HUE_RED));
            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.87.1
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.gifHintTextView != null) {
                        ChatActivity.this.gifHintTextView.setVisibility(8);
                    }
                }
            });
            animatorSet.setDuration(300L);
            animatorSet.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openAttachMenu(int i, MessageObject.GroupedMessages groupedMessages) {
        if (getParentActivity() != null) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView == null || TextUtils.isEmpty(chatActivityEnterView.getSlowModeTimer())) {
                createChatAttachView();
                this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
                int i2 = Build.VERSION.SDK_INT;
                if (i2 == 21 || i2 == 22) {
                    this.chatActivityEnterView.closeKeyboard();
                }
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                    this.chatAttachAlert.setMaxSelectedPhotos(10, true);
                } else {
                    this.chatAttachAlert.setMaxSelectedPhotos(-1, true);
                }
                this.chatAttachAlert.init();
                this.chatAttachAlert.getCommentTextView().setText(this.chatActivityEnterView.getFieldText());
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                chatAttachAlert.parentThemeDelegate = this.themeDelegate;
                if (i != 0) {
                    chatAttachAlert.openLayoutById(i);
                }
                if (groupedMessages != null && !this.chatAttachAlert.startEditingGroupedMessages(groupedMessages)) {
                    getUndoView().showInfo(LocaleController.getString("PleaseDownload", C3632R.string.PleaseDownload));
                } else {
                    showDialog(this.chatAttachAlert);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showFloatingDateView(boolean z) {
        ChatActionCell chatActionCell = this.floatingDateView;
        if (chatActionCell == null) {
            return;
        }
        if (chatActionCell.getTag() == null) {
            AnimatorSet animatorSet = this.floatingDateAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            this.floatingDateView.setTag(1);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.floatingDateAnimation = animatorSet2;
            animatorSet2.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 1.0f));
            this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.88
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                        ChatActivity.this.floatingDateAnimation = null;
                    }
                }
            });
            this.floatingDateAnimation.start();
        }
        if (z) {
            return;
        }
        invalidateMessagesVisiblePart();
        this.hideDateDelay = 1000;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideFloatingDateView(boolean z) {
        if (this.floatingDateView.getTag() == null || this.currentFloatingDateOnScreen) {
            return;
        }
        if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
            this.floatingDateView.setTag(null);
            if (z) {
                AnimatorSet animatorSet = new AnimatorSet();
                this.floatingDateAnimation = animatorSet;
                animatorSet.setDuration(150L);
                this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, BitmapDescriptorFactory.HUE_RED));
                this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.89
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                            ChatActivity.this.floatingDateAnimation = null;
                        }
                    }
                });
                this.floatingDateAnimation.setStartDelay(this.hideDateDelay);
                this.floatingDateAnimation.start();
            } else {
                AnimatorSet animatorSet2 = this.floatingDateAnimation;
                if (animatorSet2 != null) {
                    animatorSet2.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(BitmapDescriptorFactory.HUE_RED);
            }
            this.hideDateDelay = 500;
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onRemoveFromParent() {
        this.removingFromParent = true;
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && playingMessageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void setIgnoreAttachOnPause(boolean z) {
        this.ignoreAttachOnPause = z;
    }

    public ChatActivityEnterView getChatActivityEnterViewForStickers() {
        TLRPC$Chat tLRPC$Chat;
        if (this.bottomOverlayChat.getVisibility() == 0 || !((tLRPC$Chat = this.currentChat) == null || ChatObject.canSendStickers(tLRPC$Chat))) {
            return null;
        }
        return this.chatActivityEnterView;
    }

    public ChatActivityEnterView getChatActivityEnterView() {
        return this.chatActivityEnterView;
    }

    public boolean isKeyboardVisible() {
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        return chatActivityFragmentView != null && chatActivityFragmentView.getKeyboardHeight() > AndroidUtilities.m107dp(20);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkScrollForLoad(boolean z) {
        if (this.chatLayoutManager == null || this.paused) {
            return;
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter.isFrozen || this.waitingForGetDifference) {
            return;
        }
        if (chatActivityAdapter.isFiltered) {
            getMediaDataController().loadMoreSearchMessages();
            return;
        }
        final int i = 0;
        final int i2 = -1;
        for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
            RecyclerListView recyclerListView = this.chatListView;
            int childAdapterPosition = recyclerListView.getChildAdapterPosition(recyclerListView.getChildAt(i3));
            if (childAdapterPosition != -1) {
                if (i2 == -1 || childAdapterPosition < i2) {
                    i2 = childAdapterPosition;
                }
                i++;
            }
        }
        final int itemCount = this.chatAdapter.getItemCount();
        final int i4 = z ? 25 : 5;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda238
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkScrollForLoad$135(itemCount, i2, i, i4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkScrollForLoad$135(int i, int i2, int i3, int i4) {
        if ((i - i2) - i3 <= i4 && !this.loading) {
            boolean[] zArr = this.endReached;
            if (!zArr[0]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.messagesByDays.size() != 0) {
                    MessagesController messagesController = getMessagesController();
                    long j = this.dialog_id;
                    long j2 = this.mergeDialogId;
                    int i5 = this.maxMessageId[0];
                    boolean z = !this.cacheEndReached[0];
                    int i6 = this.minDate[0];
                    int i7 = this.classGuid;
                    int i8 = this.chatMode;
                    long j3 = this.threadMessageId;
                    int i9 = this.replyMaxReadId;
                    int i10 = this.lastLoadIndex;
                    this.lastLoadIndex = i10 + 1;
                    messagesController.loadMessages(j, j2, false, 50, i5, 0, z, i6, i7, 0, 0, i8, j3, i9, i10, this.isTopic);
                } else {
                    MessagesController messagesController2 = getMessagesController();
                    long j4 = this.dialog_id;
                    long j5 = this.mergeDialogId;
                    boolean z2 = !this.cacheEndReached[0];
                    int i11 = this.minDate[0];
                    int i12 = this.classGuid;
                    int i13 = this.chatMode;
                    long j6 = this.threadMessageId;
                    int i14 = this.replyMaxReadId;
                    int i15 = this.lastLoadIndex;
                    this.lastLoadIndex = i15 + 1;
                    messagesController2.loadMessages(j4, j5, false, 50, 0, 0, z2, i11, i12, 0, 0, i13, j6, i14, i15, this.isTopic);
                }
            } else if (this.mergeDialogId != 0 && !zArr[1]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController3 = getMessagesController();
                long j7 = this.mergeDialogId;
                int i16 = this.maxMessageId[1];
                boolean z3 = !this.cacheEndReached[1];
                int i17 = this.minDate[1];
                int i18 = this.classGuid;
                int i19 = this.chatMode;
                long j8 = this.threadMessageId;
                int i20 = this.replyMaxReadId;
                int i21 = this.lastLoadIndex;
                this.lastLoadIndex = i21 + 1;
                messagesController3.loadMessages(j7, 0L, false, 50, i16, 0, z3, i17, i18, 0, 0, i19, j8, i20, i21, this.isTopic);
            }
        }
        if (i3 <= 0 || this.loadingForward || i2 > 10) {
            return;
        }
        if (this.mergeDialogId != 0 && !this.forwardEndReached[1]) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController4 = getMessagesController();
            long j9 = this.mergeDialogId;
            int i22 = this.minMessageId[1];
            int i23 = this.maxDate[1];
            int i24 = this.classGuid;
            int i25 = this.chatMode;
            long j10 = this.threadMessageId;
            int i26 = this.replyMaxReadId;
            int i27 = this.lastLoadIndex;
            this.lastLoadIndex = i27 + 1;
            messagesController4.loadMessages(j9, 0L, false, 50, i22, 0, true, i23, i24, 1, 0, i25, j10, i26, i27, this.isTopic);
            this.loadingForward = true;
        } else if (this.forwardEndReached[0]) {
        } else {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController5 = getMessagesController();
            long j11 = this.dialog_id;
            long j12 = this.mergeDialogId;
            int i28 = this.minMessageId[0];
            int i29 = this.maxDate[0];
            int i30 = this.classGuid;
            int i31 = this.chatMode;
            long j13 = this.threadMessageId;
            int i32 = this.replyMaxReadId;
            int i33 = this.lastLoadIndex;
            this.lastLoadIndex = i33 + 1;
            messagesController5.loadMessages(j11, j12, false, 50, i28, 0, true, i29, i30, 1, 0, i31, j13, i32, i33, this.isTopic);
            this.loadingForward = true;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processSelectedAttach(int i) {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        if (i == 0) {
            int i2 = Build.VERSION.SDK_INT;
            if (i2 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
                return;
            }
            try {
                Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
                File generatePicturePath = AndroidUtilities.generatePicturePath();
                if (generatePicturePath != null) {
                    if (i2 >= 24) {
                        Activity parentActivity = getParentActivity();
                        intent.putExtra("output", FileProvider.getUriForFile(parentActivity, ApplicationLoader.getApplicationId() + ".provider", generatePicturePath));
                        intent.addFlags(2);
                        intent.addFlags(1);
                    } else {
                        intent.putExtra("output", Uri.fromFile(generatePicturePath));
                    }
                    this.currentPicturePath = generatePicturePath.getAbsolutePath();
                }
                startActivityForResult(intent, 0);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        } else if (i == 1) {
            Activity parentActivity2 = getParentActivity();
            int i3 = Build.VERSION.SDK_INT;
            if (i3 >= 33) {
                if (parentActivity2.checkSelfPermission("android.permission.READ_MEDIA_IMAGES") != 0) {
                    try {
                        getParentActivity().requestPermissions(new String[]{"android.permission.READ_MEDIA_IMAGES", "android.permission.READ_MEDIA_VIDEO"}, 4);
                        return;
                    } catch (Throwable unused) {
                        return;
                    }
                }
            } else if (i3 >= 23 && parentActivity2.checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
                    return;
                } catch (Throwable unused2) {
                    return;
                }
            }
            PhotoAlbumPickerActivity photoAlbumPickerActivity = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_ALL, (ChatObject.isChannel(this.currentChat) && (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) != null && tLRPC$TL_chatBannedRights.send_gifs) ? false : true, true, this);
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                photoAlbumPickerActivity.setMaxSelectedPhotos(10, true);
            } else {
                MessageObject messageObject = this.editingMessageObject;
                photoAlbumPickerActivity.setMaxSelectedPhotos(messageObject != null ? 1 : 0, messageObject == null);
            }
            photoAlbumPickerActivity.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() { // from class: org.telegram.ui.ChatActivity.90
                @Override // org.telegram.p043ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i4, String str) {
                }

                @Override // org.telegram.p043ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void startPhotoSelectActivity() {
                    try {
                        Intent intent2 = new Intent();
                        intent2.setType("video/*");
                        intent2.setAction("android.intent.action.GET_CONTENT");
                        intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                        Intent intent3 = new Intent("android.intent.action.PICK");
                        intent3.setType("image/*");
                        Intent createChooser = Intent.createChooser(intent3, null);
                        createChooser.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{intent2});
                        ChatActivity.this.startActivityForResult(createChooser, 1);
                    } catch (Exception e2) {
                        FileLog.m102e(e2);
                    }
                }
            });
            presentFragment(photoAlbumPickerActivity);
        } else if (i == 2) {
            int i4 = Build.VERSION.SDK_INT;
            if (i4 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
                    return;
                } catch (Throwable unused3) {
                    return;
                }
            }
            try {
                Intent intent2 = new Intent("android.media.action.VIDEO_CAPTURE");
                File generateVideoPath = AndroidUtilities.generateVideoPath();
                if (generateVideoPath != null) {
                    if (i4 >= 24) {
                        Activity parentActivity3 = getParentActivity();
                        intent2.putExtra("output", FileProvider.getUriForFile(parentActivity3, ApplicationLoader.getApplicationId() + ".provider", generateVideoPath));
                        intent2.addFlags(2);
                        intent2.addFlags(1);
                    } else if (i4 >= 18) {
                        intent2.putExtra("output", Uri.fromFile(generateVideoPath));
                    }
                    intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                    this.currentPicturePath = generateVideoPath.getAbsolutePath();
                }
                startActivityForResult(intent2, 2);
            } catch (Exception e2) {
                FileLog.m102e(e2);
            }
        }
    }

    public boolean allowSendGifs() {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        return (ChatObject.isChannel(this.currentChat) && (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) != null && tLRPC$TL_chatBannedRights.send_gifs) ? false : true;
    }

    public void openPollCreate(Boolean bool) {
        PollCreateActivity pollCreateActivity = new PollCreateActivity(this, bool);
        pollCreateActivity.setDelegate(new PollCreateActivity.PollCreateActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda363
            @Override // org.telegram.p043ui.PollCreateActivity.PollCreateActivityDelegate
            public final void sendPoll(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap hashMap, boolean z, int i, String str) {
                ChatActivity.this.lambda$openPollCreate$136(tLRPC$TL_messageMediaPoll, hashMap, z, i, str);
            }
        });
        presentFragment(pollCreateActivity);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openPollCreate$136(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap hashMap, boolean z, int i, String str) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m85of(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) hashMap, z, i, str));
            afterMessageSend();
        }
    }

    @Override // org.telegram.p043ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectFiles(ArrayList<String> arrayList, String str, ArrayList<MessageObject> arrayList2, boolean z, int i, String str2, boolean z2, boolean z3) {
        String str3;
        fillEditingMediaWithCaption(str, null);
        if (checkSlowModeAlert()) {
            if (z2) {
                this.presenter.checkAndSendReaction(arrayList, str, this.replyingMessageObject);
                return;
            }
            if (arrayList2.isEmpty() || TextUtils.isEmpty(str)) {
                str3 = str;
            } else {
                SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.m94of(str, this.dialog_id, null, null, null, true, null, null, null, true, 0, null, false, str2));
                str3 = null;
            }
            getSendMessagesHelper().sendMessage(arrayList2, this.dialog_id, false, false, true, 0);
            SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), arrayList, arrayList, null, str3, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, this.editingMessageObject, z, i, null, str2, z3);
            afterMessageSend();
        }
    }

    @Override // org.telegram.p043ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i, String str, boolean z2) {
        fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
        if (z2) {
            this.presenter.checkAndSendReaction(arrayList, "", this.replyingMessageObject);
            return;
        }
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, true, false, this.editingMessageObject, z, i, arrayList.get(0).updateStickersOrder, null, str);
        afterMessageSend();
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r13v3 */
    /* JADX WARN: Type inference failed for: r13v4, types: [int] */
    /* JADX WARN: Type inference failed for: r13v6 */
    public void didSelectSearchPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i, String str) {
        boolean z2;
        boolean z3;
        ?? r13;
        int i2;
        ChatActivity chatActivity = this;
        if (!arrayList.isEmpty() && checkSlowModeAlert()) {
            int i3 = 0;
            while (true) {
                z2 = true;
                if (i3 >= arrayList.size()) {
                    z3 = false;
                    break;
                }
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i3);
                if (sendingMediaInfo.inlineResult == null && sendingMediaInfo.videoEditedInfo == null) {
                    z3 = true;
                    break;
                }
                i3++;
            }
            if (!z3 && !TextUtils.isEmpty(arrayList.get(0).caption)) {
                SendMessagesHelper.getInstance(chatActivity.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.m94of(arrayList.get(0).caption, chatActivity.dialog_id, chatActivity.replyingMessageObject, getThreadMessage(), null, false, arrayList.get(0).entities, null, null, z, i, null, false, str));
            }
            int i4 = 0;
            while (i4 < arrayList.size()) {
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo2 = arrayList.get(i4);
                if (sendingMediaInfo2.inlineResult == null || sendingMediaInfo2.videoEditedInfo != null) {
                    r13 = z2;
                    i2 = i4;
                } else {
                    AccountInstance accountInstance = getAccountInstance();
                    TLRPC$BotInlineResult tLRPC$BotInlineResult = sendingMediaInfo2.inlineResult;
                    HashMap<String, String> hashMap = sendingMediaInfo2.params;
                    long j = chatActivity.dialog_id;
                    MessageObject messageObject = chatActivity.replyingMessageObject;
                    MessageObject threadMessage = getThreadMessage();
                    ReplyQuote replyQuote = chatActivity.replyingQuote;
                    int i5 = i4;
                    r13 = z2;
                    SendMessagesHelper.prepareSendingBotContextResult(this, accountInstance, tLRPC$BotInlineResult, hashMap, j, messageObject, threadMessage, null, replyQuote, z, i, str);
                    arrayList.remove(i5);
                    i2 = i5 - 1;
                }
                i4 = i2 + r13;
                z2 = r13;
                chatActivity = this;
            }
            boolean z4 = z2;
            if (arrayList.isEmpty()) {
                return;
            }
            fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, false, true, this.editingMessageObject, z, i, arrayList.get(0).updateStickersOrder, null, str);
            afterMessageSend();
            if (i != 0) {
                if (this.scheduledMessagesCount == -1) {
                    this.scheduledMessagesCount = 0;
                }
                this.scheduledMessagesCount += arrayList.size();
                updateScheduledInterface(z4);
            }
        }
    }

    @Override // org.telegram.p043ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void startDocumentSelectActivity() {
        try {
            Intent intent = new Intent("android.intent.action.GET_CONTENT");
            if (Build.VERSION.SDK_INT >= 18) {
                intent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
            }
            intent.setType("*/*");
            startActivityForResult(intent, 21);
        } catch (Exception e) {
            FileLog.m102e(e);
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean dismissDialogOnPause(Dialog dialog) {
        return (dialog == this.chatAttachAlert || dialog == this.chatThemeBottomSheet || (dialog instanceof BotWebViewSheet) || !super.dismissDialogOnPause(dialog)) ? false : true;
    }

    private void cancelSearchLinks() {
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
        }
    }

    private void editResetMediaManual() {
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null) {
            return;
        }
        tLRPC$MessageMedia.manual = false;
    }

    public void checkEditLinkRemoved(CharSequence charSequence) {
        TLRPC$WebPage tLRPC$WebPage;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$WebPage tLRPC$WebPage2;
        MessageObject messageObject = this.editingMessageObject;
        boolean z = (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null || (tLRPC$WebPage2 = tLRPC$MessageMedia.webpage) == null || (tLRPC$WebPage2 instanceof TLRPC$TL_webPageEmpty) || !tLRPC$MessageMedia.manual) ? false : true;
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messageObject == null) {
            return;
        }
        int i = messageObject.type;
        if ((i == 0 || i == 19) && (tLRPC$WebPage = this.foundWebPage) != null && !messagePreviewParams.hasLink(charSequence, tLRPC$WebPage.url) && z) {
            this.foundWebPage = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setWebPage(null, true);
            }
            MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
            if (messagePreviewParams2 != null) {
                int i2 = this.currentAccount;
                CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                MessageObject messageObject2 = this.replyingMessageObject;
                messagePreviewParams2.updateLink(i2, null, fieldText, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
            }
            editResetMediaManual();
            fallbackFieldPanel();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:65:0x00d2  */
    /* JADX WARN: Removed duplicated region for block: B:80:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void searchLinks(final java.lang.CharSequence r18, final boolean r19) {
        /*
            Method dump skipped, instructions count: 271
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.searchLinks(java.lang.CharSequence, boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$143(final CharSequence charSequence, final MessagesController messagesController, final boolean z) {
        boolean z2;
        CharSequence charSequence2;
        URLSpanReplacement[] uRLSpanReplacementArr;
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
            this.linkSearchRequestId = 0;
            z2 = true;
        } else {
            z2 = false;
        }
        ArrayList<CharSequence> arrayList = null;
        try {
            Matcher matcher = AndroidUtilities.WEB_URL.matcher(charSequence);
            while (matcher.find()) {
                if (matcher.start() <= 0 || charSequence.charAt(matcher.start() - 1) != '@') {
                    if (arrayList == null) {
                        arrayList = new ArrayList<>();
                    }
                    arrayList.add(charSequence.subSequence(matcher.start(), matcher.end()));
                }
            }
            if ((charSequence instanceof Spannable) && (uRLSpanReplacementArr = (URLSpanReplacement[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class)) != null && uRLSpanReplacementArr.length > 0) {
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                }
                for (URLSpanReplacement uRLSpanReplacement : uRLSpanReplacementArr) {
                    arrayList.add(uRLSpanReplacement.getURL());
                }
            }
            if (arrayList != null && this.foundUrls != null && arrayList.size() == this.foundUrls.size()) {
                boolean z3 = true;
                for (int i = 0; i < arrayList.size(); i++) {
                    if (!TextUtils.equals(arrayList.get(i), this.foundUrls.get(i))) {
                        z3 = false;
                    }
                }
                if (z3 && !z2) {
                    return;
                }
            }
            this.foundUrls = arrayList;
        } catch (Exception e) {
            FileLog.m102e(e);
            String lowerCase = charSequence.toString().toLowerCase();
            if (charSequence.length() < 13 || !(lowerCase.contains("http://") || lowerCase.contains("https://"))) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda218
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$searchLinks$138();
                    }
                });
                return;
            }
            charSequence2 = charSequence;
        }
        if (arrayList == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda221
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$137();
                }
            });
            return;
        }
        charSequence2 = TextUtils.join(" ", arrayList);
        if (arrayList != null && !arrayList.isEmpty()) {
            arrayList.get(0).toString();
        }
        if (this.currentEncryptedChat != null && messagesController.secretWebpagePreview == 2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda263
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$140(messagesController, charSequence, z);
                }
            });
            return;
        }
        final TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
        if (charSequence2 instanceof String) {
            tLRPC$TL_messages_getWebPagePreview.message = (String) charSequence2;
        } else {
            tLRPC$TL_messages_getWebPagePreview.message = charSequence2.toString();
        }
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage == null || !tLRPC$TL_messages_getWebPagePreview.message.equals(tLRPC$WebPage.displayedText)) {
            final int i2 = this.waitingForWebpageId + 1;
            this.waitingForWebpageId = i2;
            requestLinkPreviewCached(tLRPC$TL_messages_getWebPagePreview, new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda315
                @Override // org.telegram.messenger.Utilities.Callback2
                public final void run(Object obj, Object obj2) {
                    ChatActivity.this.lambda$searchLinks$142(i2, tLRPC$TL_messages_getWebPagePreview, (Boolean) obj, (TLRPC$WebPage) obj2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$137() {
        this.foundWebPage = null;
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$138() {
        this.foundWebPage = null;
        fallbackFieldPanel();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$140(final MessagesController messagesController, final CharSequence charSequence, final boolean z) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$searchLinks$139(messagesController, charSequence, z, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
        builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", C3632R.string.SecretLinkPreviewAlert));
        showDialog(builder.create());
        messagesController.secretWebpagePreview = 0;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$139(MessagesController messagesController, CharSequence charSequence, boolean z, DialogInterface dialogInterface, int i) {
        messagesController.secretWebpagePreview = 1;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
        this.foundUrls = null;
        searchLinks(charSequence, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$142(final int i, final TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, final Boolean bool, final TLRPC$WebPage tLRPC$WebPage) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda243
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$searchLinks$141(i, bool, tLRPC$WebPage, tLRPC$TL_messages_getWebPagePreview);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$141(int i, Boolean bool, TLRPC$WebPage tLRPC$WebPage, TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview) {
        if (this.waitingForWebpageId != i) {
            return;
        }
        if (bool.booleanValue()) {
            this.foundWebPage = tLRPC$WebPage;
            String str = tLRPC$TL_messages_getWebPagePreview.message;
            tLRPC$WebPage.display_url = str;
            if (this.isMultiReplyMessage) {
                this.isMultiReplyMessage = false;
                showFieldPanel(false, null, null, null, tLRPC$WebPage, true, 0, null, true, true);
                return;
            } else if (!(tLRPC$WebPage instanceof TLRPC$TL_webPage) && !(tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                if (tLRPC$WebPage != null) {
                    this.foundWebPage = null;
                    MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                    if (messagePreviewParams != null) {
                        int i2 = this.currentAccount;
                        CharSequence fieldText = this.chatActivityEnterView.getFieldText();
                        MessageObject messageObject = this.replyingMessageObject;
                        messagePreviewParams.updateLink(i2, null, fieldText, messageObject == this.threadMessageObject ? null : messageObject, this.replyingQuote, this.editingMessageObject);
                    }
                    fallbackFieldPanel();
                    return;
                }
                return;
            } else {
                if (tLRPC$WebPage instanceof TLRPC$TL_webPagePending) {
                    this.pendingLinkSearchString = str;
                }
                if (this.currentEncryptedChat != null && (tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                    tLRPC$WebPage.url = str;
                }
                MessagePreviewParams messagePreviewParams2 = this.messagePreviewParams;
                if (messagePreviewParams2 != null) {
                    int i3 = this.currentAccount;
                    CharSequence fieldText2 = this.chatActivityEnterView.getFieldText();
                    MessageObject messageObject2 = this.replyingMessageObject;
                    messagePreviewParams2.updateLink(i3, null, fieldText2, messageObject2 == this.threadMessageObject ? null : messageObject2, this.replyingQuote, this.editingMessageObject);
                }
                showFieldPanelForWebPage(true, this.foundWebPage, false);
                return;
            }
        }
        this.foundWebPage = null;
        fallbackFieldPanel();
    }

    private void requestLinkPreviewCached(final TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, final Utilities.Callback2<Boolean, TLRPC$WebPage> callback2) {
        if (this.lastLinkPreviewResults == null) {
            this.lastLinkPreviewResults = new HashMap<>();
        }
        TLRPC$WebPage tLRPC$WebPage = this.lastLinkPreviewResults.get(tLRPC$TL_messages_getWebPagePreview.message);
        if (tLRPC$WebPage != null) {
            callback2.run(Boolean.TRUE, tLRPC$WebPage);
        } else {
            requestLinkPreview(tLRPC$TL_messages_getWebPagePreview, new Utilities.Callback2() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda316
                @Override // org.telegram.messenger.Utilities.Callback2
                public final void run(Object obj, Object obj2) {
                    ChatActivity.this.lambda$requestLinkPreviewCached$144(tLRPC$TL_messages_getWebPagePreview, callback2, (Boolean) obj, (TLRPC$WebPage) obj2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreviewCached$144(TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, Utilities.Callback2 callback2, Boolean bool, TLRPC$WebPage tLRPC$WebPage) {
        if (bool.booleanValue() && !(tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
            Iterator<String> it = this.lastLinkPreviewResults.keySet().iterator();
            while (it.hasNext() && this.lastLinkPreviewResults.size() > 5) {
                it.next();
                it.remove();
            }
            this.lastLinkPreviewResults.put(tLRPC$TL_messages_getWebPagePreview.message, tLRPC$WebPage);
        }
        callback2.run(bool, tLRPC$WebPage);
    }

    private void requestLinkPreview(TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, final Utilities.Callback2<Boolean, TLRPC$WebPage> callback2) {
        cancelSearchLinks();
        this.linkSearchRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda328
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$requestLinkPreview$150(callback2, tLObject, tLRPC$TL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.linkSearchRequestId, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$150(final Utilities.Callback2 callback2, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda273
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$requestLinkPreview$149(tLObject, callback2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$149(TLObject tLObject, final Utilities.Callback2 callback2) {
        final TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory;
        this.linkSearchRequestId = 0;
        if (tLObject instanceof TLRPC$TL_messageMediaWebPage) {
            final TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject;
            TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
            if (tLRPC$WebPage == null || !"telegram_story".equals(tLRPC$WebPage.type)) {
                callback2.run(Boolean.valueOf(tLRPC$TL_messageMediaWebPage.webpage != null), tLRPC$TL_messageMediaWebPage.webpage);
                return;
            }
            if (tLRPC$TL_messageMediaWebPage.webpage.attributes != null) {
                for (int i = 0; i < tLRPC$TL_messageMediaWebPage.webpage.attributes.size(); i++) {
                    if (tLRPC$TL_messageMediaWebPage.webpage.attributes.get(i) instanceof TLRPC$TL_webPageAttributeStory) {
                        tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$TL_messageMediaWebPage.webpage.attributes.get(i);
                        break;
                    }
                }
            }
            tLRPC$TL_webPageAttributeStory = null;
            if (tLRPC$TL_webPageAttributeStory == null) {
                callback2.run(Boolean.FALSE, null);
                return;
            } else if (tLRPC$TL_webPageAttributeStory.storyItem != null) {
                callback2.run(Boolean.TRUE, tLRPC$TL_messageMediaWebPage.webpage);
                return;
            } else {
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda280
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$requestLinkPreview$148(tLRPC$TL_messageMediaWebPage, tLRPC$TL_webPageAttributeStory, callback2);
                    }
                });
                return;
            }
        }
        callback2.run(Boolean.FALSE, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestLinkPreview$148(TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage, TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory, final Utilities.Callback2 callback2) {
        try {
            final LongSparseArray<ArrayList<MessageObject>> longSparseArray = new LongSparseArray<>();
            TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
            tLRPC$TL_message.message = "";
            tLRPC$TL_message.f1626id = 0;
            tLRPC$TL_message.media = tLRPC$TL_messageMediaWebPage;
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_message, false, false));
            longSparseArray.put(DialogObject.getPeerDialogId(tLRPC$TL_webPageAttributeStory.peer), arrayList);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(longSparseArray, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda167
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.lambda$requestLinkPreview$147(LongSparseArray.this, callback2);
                }
            }, this.classGuid, false);
        } catch (Exception unused) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$147(LongSparseArray longSparseArray, final Utilities.Callback2 callback2) {
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$WebPage tLRPC$WebPage;
        MessageObject messageObject = (longSparseArray.size() == 1 && longSparseArray.valueAt(0) != null && ((ArrayList) longSparseArray.valueAt(0)).size() == 1) ? (MessageObject) ((ArrayList) longSparseArray.valueAt(0)).get(0) : null;
        if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && (tLRPC$MessageMedia = tLRPC$Message.media) != null && (tLRPC$WebPage = tLRPC$MessageMedia.webpage) != null && tLRPC$WebPage.attributes != null) {
            for (int i = 0; i < messageObject.messageOwner.media.webpage.attributes.size(); i++) {
                TLRPC$WebPageAttribute tLRPC$WebPageAttribute = messageObject.messageOwner.media.webpage.attributes.get(i);
                if ((tLRPC$WebPageAttribute instanceof TLRPC$TL_webPageAttributeStory) && ((TLRPC$TL_webPageAttributeStory) tLRPC$WebPageAttribute).storyItem != null) {
                    final TLRPC$WebPage tLRPC$WebPage2 = messageObject.messageOwner.media.webpage;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda169
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.lambda$requestLinkPreview$145(Utilities.Callback2.this, tLRPC$WebPage2);
                        }
                    });
                    return;
                }
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda168
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$requestLinkPreview$146(Utilities.Callback2.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$145(Utilities.Callback2 callback2, TLRPC$WebPage tLRPC$WebPage) {
        callback2.run(Boolean.TRUE, tLRPC$WebPage);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestLinkPreview$146(Utilities.Callback2 callback2) {
        callback2.run(Boolean.FALSE, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void forwardMessages(ArrayList<MessageObject> arrayList, boolean z, boolean z2, boolean z3, int i, MessagePreviewParams messagePreviewParams, MessageObject messageObject) {
        if (arrayList == null || arrayList.isEmpty() || !checkSlowModeAlert()) {
            return;
        }
        if ((i != 0) == (this.chatMode == 1)) {
            this.waitingForSendingMessageLoad = true;
        }
        int sendMessage = getSendMessagesHelper().sendMessage(arrayList, this.dialog_id, z, z2, z3, i, getThreadMessage(), messagePreviewParams, true, messageObject);
        AlertsCreator.showSendMediaAlert(sendMessage, this, this.themeDelegate);
        if (sendMessage != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda184
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$forwardMessages$151();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$forwardMessages$151() {
        this.waitingForSendingMessageLoad = false;
        hideFieldPanel(true);
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public boolean shouldShowImport() {
        return this.openImport;
    }

    public void setOpenImport() {
        this.openImport = true;
    }

    private void checkBotKeyboard() {
        MessageObject messageObject;
        StringBuilder sb;
        long j;
        if (this.chatActivityEnterView == null || (messageObject = this.botButtons) == null || this.userBlocked) {
            return;
        }
        if (messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyKeyboardForceReply) {
            SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
            if (this.isTopic) {
                sb = new StringBuilder();
                sb.append(this.dialog_id);
                sb.append("_");
                j = getTopicId();
            } else {
                sb = new StringBuilder();
                sb.append("");
                j = this.dialog_id;
            }
            sb.append(j);
            String sb2 = sb.toString();
            if (mainSettings.getInt("answered_" + sb2, 0) != this.botButtons.getId()) {
                if (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null) {
                    MessageObject messageObject2 = this.botButtons;
                    this.botReplyButtons = messageObject2;
                    this.chatActivityEnterView.setButtons(messageObject2);
                    showFieldPanelForReply(this.botButtons);
                    return;
                }
                return;
            }
            return;
        }
        MessageObject messageObject3 = this.replyingMessageObject;
        if (messageObject3 != null && this.botReplyButtons == messageObject3) {
            this.botReplyButtons = null;
            hideFieldPanel(true);
        }
        this.chatActivityEnterView.setButtons(this.botButtons);
    }

    /* renamed from: org.telegram.ui.ChatActivity$ReplyQuote */
    /* loaded from: classes5.dex */
    public static class ReplyQuote {
        public int end;
        public ArrayList<TLRPC$MessageEntity> entities;
        public MessageObject message;
        public boolean outdated;
        public int start;
        public String text;

        private ReplyQuote(long j, MessageObject messageObject, int i, int i2) {
            this.message = messageObject;
            this.start = i;
            this.end = i2;
            update();
        }

        public static ReplyQuote from(MessageObject messageObject, String str, int i) {
            TLRPC$Message tLRPC$Message;
            String str2;
            int findQuoteStart;
            if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (str2 = tLRPC$Message.message) == null || str == null || (findQuoteStart = MessageObject.findQuoteStart(str2, str, i)) < 0) {
                return null;
            }
            return new ReplyQuote(messageObject.getDialogId(), messageObject, findQuoteStart, findQuoteStart + str.length());
        }

        public static ReplyQuote from(MessageObject messageObject) {
            TLRPC$Message tLRPC$Message;
            if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || tLRPC$Message.message == null) {
                return null;
            }
            return from(messageObject, 0, Math.min(MessagesController.getInstance(messageObject.currentAccount).quoteLengthMax, messageObject.messageOwner.message.length()));
        }

        public static ReplyQuote from(MessageObject messageObject, int i, int i2) {
            if (messageObject == null) {
                return null;
            }
            return new ReplyQuote(messageObject.getDialogId(), messageObject, i, i2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public boolean update() {
            TLRPC$Message tLRPC$Message;
            String str;
            int i;
            TLRPC$MessageEntity tLRPC$MessageEntity;
            MessageObject messageObject = this.message;
            if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (str = tLRPC$Message.message) == null) {
                FileLog.m104e("ReplyQuote: message is null");
                return false;
            }
            int i2 = this.end;
            if (i2 < this.start || i2 > str.length() || this.start > this.message.messageOwner.message.length() || (i = this.start) < 0 || this.end < 0) {
                FileLog.m104e("ReplyQuote: start/end are invalid (" + this.start + ", " + this.end + ", len=" + this.message.messageOwner.message.length() + ")");
                return false;
            }
            String str2 = this.message.messageOwner.message;
            int max = Math.max(0, i);
            while (max < this.end && Character.isWhitespace(str2.charAt(max))) {
                max++;
            }
            int min = Math.min(this.end, str2.length());
            while (min > max && Character.isWhitespace(str2.charAt(min - 1))) {
                min--;
            }
            if (max == min) {
                FileLog.m104e("ReplyQuote: message is full of whitespace");
                return false;
            }
            this.text = this.message.messageOwner.message.substring(max, min);
            ArrayList<TLRPC$MessageEntity> arrayList = this.entities;
            if (arrayList != null) {
                arrayList.clear();
            }
            ArrayList<TLRPC$MessageEntity> arrayList2 = this.message.messageOwner.entities;
            if (arrayList2 == null || arrayList2.isEmpty()) {
                return true;
            }
            for (int i3 = 0; i3 < this.message.messageOwner.entities.size(); i3++) {
                TLRPC$MessageEntity tLRPC$MessageEntity2 = this.message.messageOwner.entities.get(i3);
                int i4 = tLRPC$MessageEntity2.offset;
                if (AndroidUtilities.intersect1dInclusive(max, min, i4, tLRPC$MessageEntity2.length + i4)) {
                    if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityBold) {
                        tLRPC$MessageEntity = new TLRPC$TL_messageEntityBold();
                    } else if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityItalic) {
                        tLRPC$MessageEntity = new TLRPC$TL_messageEntityItalic();
                    } else if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityUnderline) {
                        tLRPC$MessageEntity = new TLRPC$TL_messageEntityUnderline();
                    } else if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityStrike) {
                        tLRPC$MessageEntity = new TLRPC$TL_messageEntityStrike();
                    } else if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntitySpoiler) {
                        tLRPC$MessageEntity = new TLRPC$TL_messageEntitySpoiler();
                    } else if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityCustomEmoji) {
                        TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji = new TLRPC$TL_messageEntityCustomEmoji();
                        TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji2 = (TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity2;
                        tLRPC$TL_messageEntityCustomEmoji.document_id = tLRPC$TL_messageEntityCustomEmoji2.document_id;
                        tLRPC$TL_messageEntityCustomEmoji.document = tLRPC$TL_messageEntityCustomEmoji2.document;
                        tLRPC$MessageEntity = tLRPC$TL_messageEntityCustomEmoji;
                    }
                    int i5 = tLRPC$MessageEntity2.offset;
                    int i6 = i5 - max;
                    int i7 = (i5 + tLRPC$MessageEntity2.length) - max;
                    if ((i6 >= 0 || i7 >= 0) && (i6 <= min || i7 <= min)) {
                        tLRPC$MessageEntity.offset = Math.max(0, i6);
                        tLRPC$MessageEntity.length = Math.min(i7, min - max) - tLRPC$MessageEntity.offset;
                        if (this.entities == null) {
                            this.entities = new ArrayList<>();
                        }
                        this.entities.add(tLRPC$MessageEntity);
                    }
                }
            }
            return true;
        }

        public boolean checkEdit(MessageObject messageObject) {
            TLRPC$Message tLRPC$Message;
            String str;
            int i;
            int i2;
            if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (str = tLRPC$Message.message) == null) {
                FileLog.m104e("ReplyQuote.checkEdit: message is null");
                this.outdated = false;
                return false;
            }
            int i3 = this.end;
            if (i3 < this.start || i3 > str.length() || this.start > messageObject.messageOwner.message.length() || (i = this.start) < 0 || (i2 = this.end) < 0) {
                FileLog.m104e("ReplyQuote.checkEdit: start/end are invalid (" + this.start + ", " + this.end + ", len=" + messageObject.messageOwner.message.length() + ")");
                this.outdated = false;
                return false;
            } else if (TextUtils.equals(this.text, messageObject.messageOwner.message.substring(i, i2))) {
                this.message = messageObject;
                update();
                this.outdated = false;
                return false;
            } else {
                int indexOf = messageObject.messageOwner.message.indexOf(this.text);
                if (indexOf >= 0) {
                    this.message = messageObject;
                    this.end = (this.end - this.start) + indexOf;
                    this.start = indexOf;
                    update();
                    this.outdated = false;
                    return false;
                }
                this.message = messageObject;
                this.start = 0;
                this.end = messageObject.messageOwner.message.length();
                update();
                this.outdated = true;
                return true;
            }
        }

        public String getText() {
            return this.text;
        }

        public ArrayList<TLRPC$MessageEntity> getEntities() {
            return this.entities;
        }
    }

    public void hideFieldPanel(boolean z) {
        showFieldPanel(false, null, null, null, null, true, 0, null, false, z);
    }

    public void hideFieldPanel(boolean z, int i, boolean z2) {
        showFieldPanel(false, null, null, null, null, z, i, null, false, z2);
    }

    public void showFieldPanelForWebPage(boolean z, TLRPC$WebPage tLRPC$WebPage, boolean z2) {
        showFieldPanel(z, null, null, null, tLRPC$WebPage, true, 0, null, z2, true);
    }

    public void showFieldPanelForForward(boolean z, ArrayList<MessageObject> arrayList) {
        showFieldPanel(z, null, null, arrayList, null, true, 0, null, false, true);
    }

    public void showFieldPanelForReply(MessageObject messageObject) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, null, false, true);
    }

    public void showFieldPanelForReplyQuote(MessageObject messageObject, ReplyQuote replyQuote) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, replyQuote, false, true);
    }

    public void showFieldPanelForEdit(boolean z, MessageObject messageObject) {
        showFieldPanel(z, null, messageObject, null, null, true, 0, null, false, true);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02bd  */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02e3  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x033e  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x035a  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x041e  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0434  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x049a  */
    /* JADX WARN: Removed duplicated region for block: B:222:0x049d  */
    /* JADX WARN: Removed duplicated region for block: B:225:0x04a2  */
    /* JADX WARN: Removed duplicated region for block: B:233:0x0500  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x05b3  */
    /* JADX WARN: Removed duplicated region for block: B:553:0x0b3c  */
    /* JADX WARN: Removed duplicated region for block: B:575:0x0bb9  */
    /* JADX WARN: Removed duplicated region for block: B:606:0x0c84  */
    /* JADX WARN: Type inference failed for: r2v73, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v74, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v75, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v77, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v85, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v87, types: [android.text.SpannableStringBuilder, java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r4v53, types: [java.lang.CharSequence] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void showFieldPanel(boolean r31, org.telegram.messenger.MessageObject r32, org.telegram.messenger.MessageObject r33, java.util.ArrayList<org.telegram.messenger.MessageObject> r34, org.telegram.tgnet.TLRPC$WebPage r35, boolean r36, int r37, org.telegram.p043ui.ChatActivity.ReplyQuote r38, boolean r39, boolean r40) {
        /*
            Method dump skipped, instructions count: 3462
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.showFieldPanel(boolean, org.telegram.messenger.MessageObject, org.telegram.messenger.MessageObject, java.util.ArrayList, org.telegram.tgnet.TLRPC$WebPage, boolean, int, org.telegram.ui.ChatActivity$ReplyQuote, boolean, boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showFieldPanel$152() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    private void moveScrollToLastMessage(boolean z) {
        PinchToZoomHelper pinchToZoomHelper;
        if (this.chatListView == null || this.messages.isEmpty() || (pinchToZoomHelper = this.pinchToZoomHelper) == null || pinchToZoomHelper.isInOverlayMode()) {
            return;
        }
        this.chatLayoutManager.scrollToPositionWithOffset(z ? getSponsoredMessagesCount() + 0 : 0, 0);
        this.chatListView.stopScroll();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Runnable sendSecretMessageRead(final MessageObject messageObject, boolean z) {
        int i;
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia()) {
            return null;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message.destroyTime != 0 || (i = tLRPC$Message.ttl) <= 0) {
            return null;
        }
        if (z) {
            boolean z2 = i != Integer.MAX_VALUE;
            if (i == Integer.MAX_VALUE) {
                i = 0;
            }
            tLRPC$Message.destroyTime = getConnectionsManager().getCurrentTime() + i;
            if (this.currentEncryptedChat != null) {
                getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, i);
            } else {
                getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, i, 0L, z2);
            }
            return null;
        }
        return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda259
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$sendSecretMessageRead$154(messageObject);
            }
        };
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSecretMessageRead$154(MessageObject messageObject) {
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        int i = tLRPC$Message.ttl;
        boolean z = i != Integer.MAX_VALUE;
        if (i == Integer.MAX_VALUE) {
            i = 0;
        }
        tLRPC$Message.destroyTime = getConnectionsManager().getCurrentTime() + i;
        messageObject.messageOwner.destroyTimeMillis = (i * 1000) + getConnectionsManager().getCurrentTimeMillis();
        if (this.currentEncryptedChat != null) {
            getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, i);
        } else {
            getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, i, 0L, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Runnable sendSecretMediaDelete(final MessageObject messageObject) {
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.ttl != Integer.MAX_VALUE) {
            return null;
        }
        final long createDeleteShowOnceTask = getMessagesController().createDeleteShowOnceTask(this.dialog_id, messageObject.getId());
        messageObject.forceExpired = true;
        if (messageObject.isOutOwner() || (!messageObject.isRoundOnce() && !messageObject.isVoiceOnce())) {
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            arrayList.add(messageObject);
            updateMessages(arrayList, true);
        }
        return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda249
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$sendSecretMediaDelete$155(createDeleteShowOnceTask, messageObject);
            }
        };
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSecretMediaDelete$155(long j, MessageObject messageObject) {
        getMessagesController().lambda$checkDeletingTask$76(j, this.dialog_id, messageObject.getId());
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            showProgressView(chatActivityAdapter.botInfoRow < 0);
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        for (int i = 0; i < 2; i++) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.endReached[i] = false;
            this.cacheEndReached[i] = false;
            this.forwardEndReached[i] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.showScrollToMessageError = false;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
    }

    public void scrollToLastMessage(boolean z, boolean z2) {
        scrollToLastMessage(z, z2, null);
    }

    public void scrollToLastMessage(boolean z, final boolean z2, Runnable runnable) {
        ArrayList<MessageObject> arrayList;
        int i;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null || recyclerListView.isFastScrollAnimationRunning()) {
            return;
        }
        final int i2 = 0;
        this.forceNextPinnedMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceScrollToFirst = false;
        this.chatScrollHelper.setScrollDirection(0);
        if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
            setPagedownLoading(false, true);
            if (this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
                this.canShowPagedownButton = false;
                updatePagedownButtonVisibility(true);
                removeSelectedMessageHighlight();
                updateVisibleRows();
                return;
            }
            this.chatAdapter.updateRowsSafe();
            this.chatScrollHelperCallback.scrollTo = null;
            if (z) {
                while (i2 < this.messages.size() && this.messages.get(i2).isSponsored()) {
                    i2++;
                }
            }
            if (z2 && (arrayList = this.messages) != null && arrayList.size() > 0 && this.messages.get(i2) != null) {
                long groupId = this.messages.get(i2).getGroupId();
                while (groupId != 0 && (i = i2 + 1) < this.messages.size() && groupId == this.messages.get(i).getGroupId()) {
                    i2 = i;
                }
            }
            ArrayList<MessageObject> arrayList2 = this.messages;
            if (arrayList2 != null && arrayList2.size() > 0) {
                i2 = Math.min(i2, this.messages.size() - 1);
            }
            new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda246
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$scrollToLastMessage$156(i2, z2);
                }
            }.run();
            return;
        }
        AlertDialog alertDialog = this.progressDialog;
        if (alertDialog != null) {
            alertDialog.dismiss();
        }
        updatePinnedListButton(false);
        if (runnable != null) {
            runnable.run();
        } else {
            resetProgressDialogLoading();
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
        }
        this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
        this.postponedScrollMessageId = 0;
        this.postponedScrollIsCanceled = false;
        this.waitingForLoad.clear();
        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda176
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$scrollToLastMessage$158();
            }
        }, 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$156(int i, boolean z) {
        this.chatScrollHelper.scrollToPosition(this.chatScrollHelperCallback.position = i, this.chatScrollHelperCallback.offset = 0, this.chatScrollHelperCallback.bottom = !z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$158() {
        MessagesController messagesController = getMessagesController();
        long j = this.dialog_id;
        long j2 = this.mergeDialogId;
        int i = this.classGuid;
        int i2 = this.chatMode;
        long j3 = this.threadMessageId;
        int i3 = this.replyMaxReadId;
        int i4 = this.lastLoadIndex;
        this.lastLoadIndex = i4 + 1;
        messagesController.loadMessages(j, j2, false, 30, 0, 0, true, 0, i, 0, 0, i2, j3, i3, i4, this.isTopic);
    }

    public void updateTextureViewPosition(boolean z, boolean z2) {
        boolean z3;
        MessageObject playingMessageObject;
        if (this.fragmentView == null || this.paused) {
            return;
        }
        int childCount = this.chatListView.getChildCount();
        int i = 0;
        while (true) {
            if (i >= childCount) {
                z3 = false;
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && !messageObject.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject))) {
                    ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.videoPlayerContainer.getLayoutParams();
                    if (messageObject.isRoundVideo()) {
                        this.videoPlayerContainer.setTag(C3632R.C3635id.parent_tag, null);
                        int i2 = layoutParams.width;
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        if (i2 != i3 || layoutParams.height != i3) {
                            layoutParams.height = i3;
                            layoutParams.width = i3;
                            this.aspectRatioFrameLayout.setResizeMode(0);
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        float f = (AndroidUtilities.roundPlayingMessageSize + (AndroidUtilities.roundMessageInset * 2)) / AndroidUtilities.roundPlayingMessageSize;
                        float imageWidth = chatMessageCell.getPhotoImage().getImageWidth() / AndroidUtilities.roundPlayingMessageSize;
                        if (this.videoPlayerContainer.getScaleX() != imageWidth) {
                            this.videoPlayerContainer.invalidate();
                            this.fragmentView.invalidate();
                        }
                        this.videoPlayerContainer.setPivotX(BitmapDescriptorFactory.HUE_RED);
                        this.videoPlayerContainer.setPivotY(BitmapDescriptorFactory.HUE_RED);
                        this.videoPlayerContainer.setScaleX(imageWidth);
                        this.videoPlayerContainer.setScaleY(imageWidth);
                        this.videoTextureView.setScaleX(f);
                        this.videoTextureView.setScaleY(f);
                    } else {
                        this.videoPlayerContainer.setTag(C3632R.C3635id.parent_tag, photoImage);
                        if (layoutParams.width != photoImage.getImageWidth() || layoutParams.height != photoImage.getImageHeight()) {
                            this.aspectRatioFrameLayout.setResizeMode(3);
                            layoutParams.width = (int) photoImage.getImageWidth();
                            layoutParams.height = (int) photoImage.getImageHeight();
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        this.videoTextureView.setScaleX(1.0f);
                        this.videoTextureView.setScaleY(1.0f);
                    }
                    this.fragmentView.invalidate();
                    this.videoPlayerContainer.invalidate();
                    z3 = true;
                }
            }
            i++;
        }
        if (!z || this.videoPlayerContainer == null || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || playingMessageObject.eventId != 0) {
            return;
        }
        if (!z3) {
            if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                MediaController.getInstance().cleanupPlayer(true, true);
                return;
            }
            this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
            this.fragmentView.invalidate();
            if (playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) {
                if (this.checkTextureViewPosition || PipRoundVideoView.getInstance() != null) {
                    MediaController.getInstance().setCurrentVideoVisible(false);
                    return;
                } else if (z2) {
                    scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true, 0);
                    return;
                } else {
                    return;
                }
            }
            return;
        }
        MediaController.getInstance().setCurrentVideoVisible(true);
        if (playingMessageObject.isRoundVideo() || this.scrollToVideo) {
            return;
        }
        this.chatListView.invalidate();
    }

    public void invalidateMessagesVisiblePart() {
        this.invalidateMessagesVisiblePart = true;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    private Integer findClosest(ArrayList<Integer> arrayList, int i, int[] iArr) {
        if (arrayList.isEmpty() || this.lastMultiPanelButtons.contains(MultiPanelButton.PINS)) {
            return 0;
        }
        Integer num = arrayList.get(0);
        if (i >= num.intValue()) {
            iArr[0] = 0;
            return num;
        }
        int size = arrayList.size();
        int i2 = size - 1;
        Integer num2 = arrayList.get(i2);
        if (i <= num2.intValue()) {
            iArr[0] = i2;
            return num2;
        }
        int i3 = 0;
        int i4 = 0;
        while (i3 < size) {
            i4 = (i3 + size) / 2;
            Integer num3 = arrayList.get(i4);
            if (num3.intValue() == i) {
                iArr[0] = i4;
                return num3;
            } else if (i < num3.intValue()) {
                if (i4 > 0) {
                    int i5 = i4 - 1;
                    Integer num4 = arrayList.get(i5);
                    if (i > num4.intValue()) {
                        iArr[0] = i5;
                        return num4;
                    }
                }
                i3 = i4 + 1;
            } else if (i4 > 0 && i < arrayList.get(i4 - 1).intValue()) {
                iArr[0] = i4;
                return num3;
            } else {
                size = i4;
            }
        }
        iArr[0] = i4;
        return arrayList.get(i4);
    }

    /* JADX WARN: Removed duplicated region for block: B:310:0x05f4  */
    /* JADX WARN: Removed duplicated region for block: B:313:0x0600  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00fa  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00ff  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x0b2a  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x012b  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0132  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void updateMessagesVisiblePart(boolean r58) {
        /*
            Method dump skipped, instructions count: 2905
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.updateMessagesVisiblePart(boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$159(MessageObject messageObject) {
        if (messageObject.isVideo()) {
            openPhotoViewerForMessage(null, messageObject);
        } else {
            MediaController.getInstance().playMessage(messageObject);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$160() {
        updatePinnedMessageView(this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public float getServiceTop(View view) {
        return ((view.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY()) - ((1.0f - this.contentPanTranslationT) * this.chatListViewPaddingTop);
    }

    public int getServiceHeight(View view) {
        return this.contentView.getBackgroundSizeY();
    }

    private boolean pinnedOnlyStarterMessage() {
        return this.pinnedMessageIds.size() == 1 && this.topicStarterMessageObject != null && this.pinnedMessageIds.get(0).intValue() == this.topicStarterMessageObject.getId();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate1() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, this.openAnimationEnded);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate2() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void toggleMute(boolean z) {
        if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), false);
            if (z) {
                return;
            }
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        } else if (z) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), true);
        } else {
            BottomSheet createMuteAlert = AlertsCreator.createMuteAlert(this, this.dialog_id, getTopicId(), this.themeDelegate);
            createMuteAlert.setCalcMandatoryInsets(isKeyboardVisible());
            closeKeyboard();
            showDialog(createMuteAlert);
        }
    }

    private int getScrollOffsetForMessage(MessageObject messageObject) {
        return getScrollOffsetForMessage(getHeightForMessage(messageObject, !TextUtils.isEmpty(this.highlightMessageQuote))) - scrollOffsetForQuote(messageObject);
    }

    private int getScrollOffsetForMessage(int i) {
        return (int) Math.max(-AndroidUtilities.m107dp(2), (((this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) - this.chatListViewPaddingTop) - i) / 2.0f);
    }

    private int scrollOffsetForQuote(MessageObject messageObject) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        CharSequence charSequence;
        int i;
        ChatMessageCell chatMessageCell;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        int findQuoteStart;
        StaticLayout staticLayout;
        float lineTop;
        MessageObject.TextLayoutBlocks textLayoutBlocks2;
        MessageObject messageObject2;
        if (TextUtils.isEmpty(this.highlightMessageQuote) || messageObject == null) {
            ChatMessageCell chatMessageCell2 = this.dummyMessageCell;
            if (chatMessageCell2 != null) {
                chatMessageCell2.computedGroupCaptionY = 0;
                chatMessageCell2.computedCaptionLayout = null;
            }
            return 0;
        }
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages group = getGroup(messageObject.getGroupId());
            ChatMessageCell chatMessageCell3 = this.dummyMessageCell;
            if (chatMessageCell3 == null || (textLayoutBlocks2 = chatMessageCell3.computedCaptionLayout) == null || group == null || (messageObject2 = group.captionMessage) == null) {
                if (chatMessageCell3 != null) {
                    chatMessageCell3.computedGroupCaptionY = 0;
                    chatMessageCell3.computedCaptionLayout = null;
                }
                return 0;
            }
            i = chatMessageCell3.computedGroupCaptionY;
            charSequence = messageObject2.caption;
            arrayList = textLayoutBlocks2.textLayoutBlocks;
        } else if (!TextUtils.isEmpty(messageObject.caption) && (chatMessageCell = this.dummyMessageCell) != null && (textLayoutBlocks = chatMessageCell.captionLayout) != null) {
            i = (int) chatMessageCell.captionY;
            charSequence = messageObject.caption;
            arrayList = textLayoutBlocks.textLayoutBlocks;
        } else {
            CharSequence charSequence2 = messageObject.messageText;
            arrayList = messageObject.textLayoutBlocks;
            ChatMessageCell chatMessageCell4 = this.dummyMessageCell;
            if (chatMessageCell4 == null || !chatMessageCell4.linkPreviewAbove) {
                charSequence = charSequence2;
                i = 0;
            } else {
                i = chatMessageCell4.linkPreviewHeight + AndroidUtilities.m107dp(10) + 0;
                charSequence = charSequence2;
            }
        }
        ChatMessageCell chatMessageCell5 = this.dummyMessageCell;
        if (chatMessageCell5 != null) {
            chatMessageCell5.computedGroupCaptionY = 0;
            chatMessageCell5.computedCaptionLayout = null;
        }
        if (arrayList == null || charSequence == null || (findQuoteStart = MessageObject.findQuoteStart(charSequence.toString(), this.highlightMessageQuote, this.highlightMessageQuoteOffset)) < 0) {
            return 0;
        }
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i2);
            String charSequence3 = textLayoutBlock.textLayout.getText().toString();
            int i3 = textLayoutBlock.charactersOffset;
            if (findQuoteStart > i3) {
                if (findQuoteStart - i3 > charSequence3.length() - 1) {
                    lineTop = i + ((int) (textLayoutBlock.textYOffset + textLayoutBlock.padTop + textLayoutBlock.height));
                } else {
                    lineTop = staticLayout.getLineTop(staticLayout.getLineForOffset(findQuoteStart - textLayoutBlock.charactersOffset)) + i + textLayoutBlock.textYOffset + textLayoutBlock.padTop;
                }
                if (lineTop > AndroidUtilities.displaySize.y * (isKeyboardVisible() ? 0.7f : 0.5f)) {
                    return (int) (lineTop - (AndroidUtilities.displaySize.y * (isKeyboardVisible() ? 0.7f : 0.5f)));
                }
                return 0;
            }
        }
        return 0;
    }

    private int getHeightForMessage(MessageObject messageObject, boolean z) {
        boolean z2 = false;
        if (getParentActivity() == null) {
            return 0;
        }
        if (this.dummyMessageCell == null) {
            this.dummyMessageCell = new ChatMessageCell(getParentActivity(), true, this.sharedResources, this.themeDelegate, this.currentAccount);
        }
        this.dummyMessageCell.isChat = this.currentChat != null || UserObject.isUserSelf(this.currentUser);
        ChatMessageCell chatMessageCell = this.dummyMessageCell;
        int i = this.chatMode;
        chatMessageCell.isSavedChat = i == 3;
        chatMessageCell.isSavedPreviewChat = i == 3 && this.isInsideContainer;
        TLRPC$User tLRPC$User = this.currentUser;
        chatMessageCell.isBot = tLRPC$User != null && tLRPC$User.bot;
        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) {
            z2 = true;
        }
        chatMessageCell.isMegagroup = z2;
        return this.dummyMessageCell.computeHeight(messageObject, this.groupedMessagesMap.get(messageObject.getGroupId()), z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMessageUnselect(ChatMessageCell chatMessageCell) {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        if (this.needEditHighlightMessage && chatMessageCell != null && chatMessageCell.getCurrentMessagesGroup() == null) {
            this.needEditHighlightMessage = false;
            final MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject != null && messageObject.canEditMessage(this.currentChat)) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda256
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$startMessageUnselect$162(messageObject);
                    }
                }, 300L);
            }
        }
        Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startMessageUnselect$163();
            }
        };
        this.unselectRunnable = runnable2;
        AndroidUtilities.runOnUIThread(runnable2, this.highlightMessageQuote != null ? 2500L : 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startMessageUnselect$163() {
        this.highlightMessageId = Integer.MAX_VALUE;
        this.highlightMessageQuote = null;
        this.highlightMessageQuoteOffset = -1;
        this.showNoQuoteAlert = false;
        updateVisibleRows();
        this.unselectRunnable = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeSelectedMessageHighlight() {
        if (this.highlightMessageQuote != null) {
            return;
        }
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = Integer.MAX_VALUE;
        this.highlightMessageQuote = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void resetProgressDialogLoading() {
        this.progressDialogLinkSpan = null;
        this.progressDialogAtMessageId = 0;
        this.progressDialogAtMessageType = -1;
        this.progressDialogBotButtonUrl = null;
        this.progressDialogCurrent = null;
        setPagedownLoading(false, true);
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public void scrollToMessageId(int i, int i2, boolean z, int i3, boolean z2, int i4) {
        scrollToMessageId(i, i2, z, i3, z2, i4, null);
    }

    /* JADX WARN: Removed duplicated region for block: B:103:0x01f9  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0286  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x016b A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00c8  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01ab A[LOOP:0: B:72:0x011c->B:97:0x01ab, LOOP_END] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void scrollToMessageId(int r20, int r21, boolean r22, final int r23, boolean r24, int r25, java.lang.Runnable r26) {
        /*
            Method dump skipped, instructions count: 710
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.scrollToMessageId(int, int, boolean, int, boolean, int, java.lang.Runnable):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$164() {
        int i = this.nextScrollToMessageId;
        if (i != 0) {
            scrollToMessageId(i, this.nextScrollFromMessageId, this.nextScrollSelect, this.nextScrollLoadIndex, this.nextScrollForce, this.nextScrollForcePinnedMessageId);
            this.nextScrollToMessageId = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$165(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$166(int i) {
        MessagesController messagesController = getMessagesController();
        long j = i == 0 ? this.dialog_id : this.mergeDialogId;
        int i2 = ((!isThreadChat() || this.isTopic) && !AndroidUtilities.isTablet()) ? 20 : 30;
        int i3 = this.startLoadFromMessageId;
        int i4 = this.classGuid;
        int i5 = this.chatMode;
        long j2 = this.threadMessageId;
        int i6 = this.replyMaxReadId;
        int i7 = this.lastLoadIndex;
        this.lastLoadIndex = i7 + 1;
        messagesController.loadMessages(j, 0L, false, i2, i3, 0, true, 0, i4, 3, 0, i5, j2, i6, i7, this.isTopic);
    }

    private void showPinnedProgress(boolean z) {
        if (z) {
            if (this.updatePinnedProgressRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda186
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showPinnedProgress$167();
                    }
                };
                this.updatePinnedProgressRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 100L);
                return;
            }
            return;
        }
        Runnable runnable2 = this.updatePinnedProgressRunnable;
        if (runnable2 != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable2);
        }
        this.updatePinnedProgressRunnable = null;
        this.pinnedProgressIsShowing = false;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showPinnedProgress$167() {
        this.pinnedProgressIsShowing = true;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonVisibility(boolean z) {
        if (this.pagedownButton == null) {
            return;
        }
        if ((!this.canShowPagedownButton || this.textSelectionHelper.isInSelectionMode() || this.chatActivityEnterView.isRecordingAudioVideo() || this.isInsideContainer) ? false : true) {
            if (z && (this.openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < this.openAnimationStartTime + 150)) {
                z = false;
            }
            this.pagedownButtonShowedByScroll = false;
            if (this.pagedownButton.getTag() == null) {
                ValueAnimator valueAnimator = this.pagedownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.pagedownButtonAnimation.cancel();
                    this.pagedownButtonAnimation = null;
                }
                this.pagedownButton.setTag(1);
                if (z) {
                    this.pagedownButton.setVisibility(0);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 1.0f);
                    this.pagedownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda10
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.lambda$updatePagedownButtonVisibility$168(valueAnimator2);
                        }
                    });
                    this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.91
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.pagedownButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.pagedownButtonAnimation.setDuration(200L);
                    this.pagedownButtonAnimation.start();
                    return;
                }
                this.pagedownButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                this.pagedownButton.setVisibility(0);
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        this.newUnreadMessageCount = 0;
        if (this.pagedownButton.getTag() != null) {
            this.pagedownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.pagedownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            if (z) {
                this.pagedownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, BitmapDescriptorFactory.HUE_RED);
                this.pagedownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda12
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$updatePagedownButtonVisibility$169(valueAnimator3);
                    }
                });
                this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.92
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.pagedownButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
                        ChatActivity.this.pagedownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.pagedownButtonAnimation.setDuration(200L);
                this.pagedownButtonAnimation.start();
                return;
            }
            this.pagedownButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
            this.pagedownButton.setVisibility(4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$168(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$169(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMentionDownButton(boolean z, boolean z2) {
        FrameLayout frameLayout = this.mentiondownButton;
        if (frameLayout == null) {
            return;
        }
        if (z) {
            if (frameLayout.getTag() == null) {
                ValueAnimator valueAnimator = this.mentiondownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (z2) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag(1);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 1.0f);
                    this.mentiondownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda17
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.lambda$showMentionDownButton$170(valueAnimator2);
                        }
                    });
                    this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.93
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.mentionsButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.mentiondownButtonAnimation.setDuration(200L);
                    this.mentiondownButtonAnimation.start();
                    return;
                }
                this.mentionsButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        if (frameLayout.getTag() != null) {
            this.mentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.mentiondownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (z2) {
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, BitmapDescriptorFactory.HUE_RED);
                this.mentiondownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda16
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$showMentionDownButton$171(valueAnimator3);
                    }
                });
                this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.94
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.mentionsButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
                        ChatActivity.this.mentiondownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.mentiondownButtonAnimation.setDuration(200L);
                this.mentiondownButtonAnimation.start();
                return;
            }
            this.mentionsButtonEnterProgress = BitmapDescriptorFactory.HUE_RED;
            this.mentiondownButton.setVisibility(4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$170(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$171(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$ChatActivityFragmentView */
    /* loaded from: classes5.dex */
    public class ChatActivityFragmentView extends SizeNotifierFrameLayout {
        int backgroundColor;
        Paint backgroundPaint;
        ArrayList<ChatMessageCell> drawCaptionAfter;
        ArrayList<ChatMessageCell> drawNamesAfter;
        ArrayList<ChatMessageCell> drawTimeAfter;
        int inputFieldHeight;
        int lastHeight;
        int lastWidth;
        private long pressTime;

        /* renamed from: x */
        private float f1811x;

        /* renamed from: y */
        private float f1812y;

        public ChatActivity getChatActivity() {
            return ChatActivity.this;
        }

        public ChatActivityFragmentView(Context context, INavigationLayout iNavigationLayout) {
            super(context, iNavigationLayout);
            this.inputFieldHeight = 0;
            this.drawTimeAfter = new ArrayList<>();
            this.drawNamesAfter = new ArrayList<>();
            this.drawCaptionAfter = new ArrayList<>();
            this.adjustPanLayoutHelper = new AdjustPanLayoutHelper(this, ChatActivity.this) { // from class: org.telegram.ui.ChatActivity.ChatActivityFragmentView.1
                @Override // org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionStart(boolean z, int i) {
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionStart(z, i);
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionStart();
                    }
                    if (ChatActivity.this.mediaBanTooltip != null) {
                        ChatActivity.this.mediaBanTooltip.hide(false);
                    }
                }

                @Override // org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionEnd() {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionEnd();
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionEnd();
                    }
                    if (ChatActivity.this.voiceHintTextView == null || ChatActivity.this.voiceHintTextView.getVisibility() != 0) {
                        return;
                    }
                    ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                }

                @Override // org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper
                protected void onPanTranslationUpdate(float f, float f2, boolean z) {
                    if (ChatActivity.this.getParentLayout() == null || !ChatActivity.this.getParentLayout().isPreviewOpenAnimationInProgress()) {
                        ChatActivity.this.contentPanTranslation = f;
                        ChatActivity.this.contentPanTranslationT = f2;
                        ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
                        if (chatAttachAlert == null || !chatAttachAlert.isShowing()) {
                            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(f);
                            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
                            if (searchTagsList != null) {
                                searchTagsList.setTranslationY(f);
                            }
                            if (ChatActivity.this.emptyViewContainer != null) {
                                ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                            }
                            ChatActivity.this.progressView.setTranslationY(f / 2.0f);
                            int i = (int) f;
                            ChatActivity.this.contentView.setBackgroundTranslation(i);
                            if (ChatActivity.this.instantCameraView != null) {
                                ChatActivity.this.instantCameraView.onPanTranslationUpdate(f);
                            }
                            if (ChatActivity.this.blurredView != null) {
                                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(f);
                            }
                            ChatActivity.this.setFragmentPanTranslationOffset(i);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                        } else {
                            ChatActivityFragmentView.this.setNonNoveTranslation(f);
                        }
                        ChatActivity.this.chatListView.invalidate();
                        ChatActivity.this.updateBulletinLayout();
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.onAdjustPanTransitionUpdate(f, f2, z);
                        }
                        MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                        if (mentionsContainerView != null) {
                            mentionsContainerView.onPanTransitionUpdate(f);
                        }
                        if (AndroidUtilities.isTablet() && (ChatActivity.this.getParentActivity() instanceof LaunchActivity)) {
                            BaseFragment lastFragment = ((LaunchActivity) ChatActivity.this.getParentActivity()).getActionBarLayout().getLastFragment();
                            if (lastFragment instanceof DialogsActivity) {
                                ((DialogsActivity) lastFragment).setPanTranslationOffset(f);
                            }
                        }
                        if (ChatActivity.this.voiceHintTextView != null && ChatActivity.this.voiceHintTextView.getVisibility() == 0) {
                            ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                        }
                        if (ChatActivity.this.fragmentContextView != null) {
                            ChatActivity.this.fragmentContextView.onPanTranslationUpdate(f);
                        }
                    }
                }

                @Override // org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper
                protected boolean heightAnimationEnabled() {
                    ChatAttachAlert chatAttachAlert;
                    INavigationLayout parentLayout = ChatActivity.this.getParentLayout();
                    if (((BaseFragment) ChatActivity.this).inPreviewMode || ((BaseFragment) ChatActivity.this).inBubbleMode || AndroidUtilities.isInMultiwindow || parentLayout == null || ChatActivity.this.fixedKeyboardHeight > 0 || ((ChatActivity.this.isAllowPinnedPlayer() && parentLayout.isPinnedPlayerVisible()) || System.currentTimeMillis() - ChatActivity.this.activityResumeTime < 250)) {
                        return false;
                    }
                    if ((ChatActivity.this != parentLayout.getLastFragment() || !parentLayout.isTransitionAnimationInProgress()) && !parentLayout.isPreviewOpenAnimationInProgress() && !((BaseFragment) ChatActivity.this).isPaused) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.openAnimationEnded && ((chatAttachAlert = chatActivity.chatAttachAlert) == null || !chatAttachAlert.isShowing())) {
                            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            return chatActivityEnterView == null || chatActivityEnterView.getTrendingStickersAlert() == null || !ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert().isShowing();
                        }
                    }
                    return false;
                }

                @Override // org.telegram.p043ui.ActionBar.AdjustPanLayoutHelper
                protected int startOffset() {
                    if (ChatActivityFragmentView.this.getKeyboardHeight() > AndroidUtilities.m107dp(20) || !ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                        return 0;
                    }
                    return ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                }
            };
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        public void drawList(Canvas canvas, boolean z) {
            ChatActivity chatActivity;
            float m107dp = (ChatActivity.this.chatListViewPaddingTop - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4);
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if ((!z || childAt.getY() <= AndroidUtilities.m107dp(40) + m107dp) && (z || childAt.getY() + childAt.getMeasuredHeight() >= AndroidUtilities.m107dp(203))) {
                    canvas.save();
                    if (z) {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), (ChatActivity.this.chatListView.getY() + childAt.getY()) - ChatActivity.this.contentPanTranslation);
                    } else {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), ChatActivity.this.chatListView.getTop() + childAt.getY());
                    }
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.drawForBlur = true;
                        if (chatMessageCell.drawBackgroundInParent()) {
                            chatMessageCell.drawBackgroundInternal(canvas, true);
                        }
                        childAt.draw(canvas);
                        if (chatMessageCell.hasOutboundsContent()) {
                            ((ChatMessageCell) childAt).drawOutboundsContent(canvas);
                        }
                        chatMessageCell.drawForBlur = false;
                    } else if (childAt instanceof ChatActionCell) {
                        childAt.draw(canvas);
                        ((ChatActionCell) childAt).drawOutboundsContent(canvas);
                    } else {
                        childAt.draw(canvas);
                    }
                    canvas.restore();
                }
            }
        }

        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        protected int getScrollOffset() {
            return ChatActivity.this.chatListView.computeVerticalScrollOffset();
        }

        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        protected float getBottomOffset() {
            return ChatActivity.this.chatListView.getBottom();
        }

        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        protected float getListTranslationY() {
            return ChatActivity.this.chatListView.getTranslationY();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            if (((BaseFragment) ChatActivity.this).parentLayout != null && ((BaseFragment) ChatActivity.this).parentLayout.isSheet()) {
                this.adjustPanLayoutHelper.setResizableView((FrameLayout) ((BaseFragment) ChatActivity.this).parentLayout.getView().getParent().getParent().getParent().getParent());
            }
            this.adjustPanLayoutHelper.onAttach();
            ChatActivity.this.chatActivityEnterView.setAdjustPanLayoutHelper(this.adjustPanLayoutHelper);
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject != null && ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && playingMessageObject.getDialogId() == ChatActivity.this.dialog_id)) {
                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.emojiAnimationsOverlay.onAttachedToWindow();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.adjustPanLayoutHelper.onDetach();
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onDetach();
                ChatActivity.this.pullingDownDrawable = null;
            }
            ChatActivity.this.emojiAnimationsOverlay.onDetachedFromWindow();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityFragmentView$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ReactionsEffectOverlay.removeCurrent(true);
                }
            });
        }

        /* JADX WARN: Removed duplicated region for block: B:71:0x0210  */
        /* JADX WARN: Removed duplicated region for block: B:74:0x0215  */
        /* JADX WARN: Removed duplicated region for block: B:78:0x0265  */
        /* JADX WARN: Removed duplicated region for block: B:80:0x0268 A[ADDED_TO_REGION] */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean dispatchTouchEvent(android.view.MotionEvent r15) {
            /*
                Method dump skipped, instructions count: 723
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityFragmentView.dispatchTouchEvent(android.view.MotionEvent):boolean");
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (getTag(67108867) != null) {
                return;
            }
            if (getTag(67108867) == null) {
                if (ChatActivity.this.instantCameraView != null && ChatActivity.this.instantCameraView.blurFullyDrawing()) {
                    return;
                }
                if (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null) {
                    return;
                }
            }
            super.onDraw(canvas);
        }

        /* JADX WARN: Removed duplicated region for block: B:117:0x019a  */
        /* JADX WARN: Removed duplicated region for block: B:136:0x0268  */
        /* JADX WARN: Removed duplicated region for block: B:167:0x0368  */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        protected boolean drawChild(android.graphics.Canvas r9, android.view.View r10, long r11) {
            /*
                Method dump skipped, instructions count: 929
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityFragmentView.drawChild(android.graphics.Canvas, android.view.View, long):boolean");
        }

        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        protected boolean isActionBarVisible() {
            return ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0;
        }

        private void drawChildElement(Canvas canvas, float f, ChatMessageCell chatMessageCell, int i) {
            canvas.save();
            float left = ChatActivity.this.chatListView.getLeft() + chatMessageCell.getLeft();
            float y = ChatActivity.this.chatListView.getY() + chatMessageCell.getY();
            float alpha = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
            canvas.clipRect(ChatActivity.this.chatListView.getLeft(), f, ChatActivity.this.chatListView.getRight(), (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset);
            canvas.translate(left, y);
            boolean z = true;
            chatMessageCell.setInvalidatesParent(true);
            if (i == 0) {
                chatMessageCell.drawTime(canvas, alpha, true);
            } else if (i == 1) {
                chatMessageCell.drawNamesLayout(canvas, alpha);
            } else {
                if (chatMessageCell.getCurrentPosition() == null || (chatMessageCell.getCurrentPosition().flags & 1) != 0) {
                    z = false;
                }
                chatMessageCell.drawCaptionLayout(canvas, z, alpha);
            }
            chatMessageCell.setInvalidatesParent(false);
            canvas.restore();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            float f;
            int i;
            int top;
            int bottom;
            ChatActivity chatActivity;
            int i2;
            ChatActionCell chatActionCell;
            ChatMessageCell chatMessageCell;
            MessageObject.GroupedMessages groupedMessages;
            MessageObject.GroupedMessagePosition groupedMessagePosition;
            View view;
            int i3;
            int i4;
            MessageObject.GroupedMessages groupedMessages2;
            float f2;
            boolean z;
            float f3;
            int i5;
            ChatMessageCell chatMessageCell2;
            boolean z2;
            ChatActivity chatActivity2;
            float f4;
            View view2;
            float f5;
            float f6;
            float f7;
            float f8;
            float f9;
            ChatMessageCell chatMessageCell3;
            ChatActivity chatActivity3;
            View view3;
            boolean z3;
            ChatActivity chatActivity4;
            ChatActivity chatActivity5;
            ChatActivity.this.chatActivityEnterView.checkAnimation();
            ChatActivity.this.updateChatListViewTopPadding();
            if (ChatActivity.this.invalidateMessagesVisiblePart || (ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListItemAnimator.isRunning())) {
                ChatActivity.this.invalidateMessagesVisiblePart = false;
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.updatePagedownButtonsPosition();
            if (ChatActivity.this.scheduledOrNoSoundHint != null && ChatActivity.this.scheduledOrNoSoundHint.isShowing()) {
                ChatActivity.this.scheduledOrNoSoundHint.updatePosition();
            }
            if (ChatActivity.this.scheduledHint != null && ChatActivity.this.scheduledHint.isShowing()) {
                ChatActivity.this.scheduledHint.updatePosition();
            }
            int i6 = -1;
            if (ChatActivity.this.switchingFromTopics) {
                i6 = canvas.saveLayerAlpha(BitmapDescriptorFactory.HUE_RED, ((BaseFragment) ChatActivity.this).actionBar.getBottom(), getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                float f10 = (ChatActivity.this.switchingFromTopicsProgress * 0.2f) + 0.8f;
                canvas.scale(f10, f10, getMeasuredWidth() / 2.0f, getMeasuredHeight() / 2.0f);
            }
            int i7 = i6;
            super.dispatchDraw(canvas);
            FragmentContextView fragmentContextView = ChatActivity.this.fragmentContextView;
            float f11 = BitmapDescriptorFactory.HUE_RED;
            boolean z4 = true;
            if (fragmentContextView != null && ChatActivity.this.fragmentContextView.isCallStyle()) {
                float alpha = (ChatActivity.this.blurredView == null || ChatActivity.this.blurredView.getVisibility() != 0) ? 1.0f : 1.0f - ChatActivity.this.blurredView.getAlpha();
                if (alpha > BitmapDescriptorFactory.HUE_RED) {
                    if (alpha != 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY() - AndroidUtilities.m107dp(30), ChatActivity.this.fragmentContextView.getX() + ChatActivity.this.fragmentContextView.getMeasuredWidth(), ChatActivity.this.fragmentContextView.getY() + ChatActivity.this.fragmentContextView.getMeasuredHeight(), (int) (alpha * 255.0f), 31);
                    } else {
                        canvas.save();
                    }
                    canvas.translate(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY());
                    ChatActivity.this.fragmentContextView.setDrawOverlay(true);
                    ChatActivity.this.fragmentContextView.draw(canvas);
                    ChatActivity.this.fragmentContextView.setDrawOverlay(false);
                    canvas.restore();
                }
                ChatActivity.this.fragmentView.invalidate();
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.panelAnimationInProgress() && ChatActivity.this.chatActivityEnterView.getEmojiPadding() < ChatActivity.this.bottomPanelTranslationY) {
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_chat_emojiPanelBackground);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor) {
                    Paint paint = this.backgroundPaint;
                    this.backgroundColor = themedColor;
                    paint.setColor(themedColor);
                }
                canvas.drawRect(BitmapDescriptorFactory.HUE_RED, getMeasuredHeight() - (((int) (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding())) + 3), getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
                ChatActivity chatActivity6 = ChatActivity.this;
                chatActivity6.setFragmentPanTranslationOffset(chatActivity6.chatActivityEnterView.getEmojiPadding());
            }
            int size = ChatActivity.this.animateSendingViews.size();
            for (int i8 = 0; i8 < size; i8++) {
                ChatMessageCell chatMessageCell4 = (ChatMessageCell) ChatActivity.this.animateSendingViews.get(i8);
                MessageObject.SendAnimationData sendAnimationData = chatMessageCell4.getMessageObject().sendAnimationData;
                if (sendAnimationData != null) {
                    canvas.save();
                    ImageReceiver photoImage = chatMessageCell4.getPhotoImage();
                    canvas.translate(sendAnimationData.currentX, sendAnimationData.currentY);
                    float f12 = sendAnimationData.currentScale;
                    canvas.scale(f12, f12);
                    canvas.translate(-photoImage.getCenterX(), -photoImage.getCenterY());
                    chatMessageCell4.setTimeAlpha(sendAnimationData.timeAlpha);
                    ((ChatMessageCell) ChatActivity.this.animateSendingViews.get(i8)).draw(canvas);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.scrimViewReaction == null || ChatActivity.this.scrimView == null) {
                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (ChatActivity.this.scrimView != null ? ChatActivity.this.scrimViewAlpha : 1.0f)));
                canvas.drawRect(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
            }
            if (ChatActivity.this.scrimView != null) {
                if (ChatActivity.this.scrimView == ChatActivity.this.reactionsMentiondownButton || ChatActivity.this.scrimView == ChatActivity.this.mentiondownButton) {
                    f = 0.0f;
                    i = i7;
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                } else if (!(ChatActivity.this.scrimView instanceof ImageView)) {
                    float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - chatActivity.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4);
                    MessageObject.GroupedMessages currentMessagesGroup = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
                    int childCount = ChatActivity.this.chatListView.getChildCount();
                    boolean z5 = false;
                    int i9 = 0;
                    while (i9 < childCount) {
                        View childAt = ChatActivity.this.chatListView.getChildAt(i9);
                        if (childAt instanceof ChatMessageCell) {
                            chatMessageCell = (ChatMessageCell) childAt;
                            groupedMessages = chatMessageCell.getCurrentMessagesGroup();
                            groupedMessagePosition = chatMessageCell.getCurrentPosition();
                            chatActionCell = null;
                        } else {
                            chatActionCell = childAt instanceof ChatActionCell ? (ChatActionCell) childAt : null;
                            chatMessageCell = null;
                            groupedMessages = null;
                            groupedMessagePosition = null;
                        }
                        if ((childAt == ChatActivity.this.scrimView || (currentMessagesGroup != null && currentMessagesGroup == groupedMessages)) && childAt.getAlpha() != f11) {
                            if (z5 || chatMessageCell == null || currentMessagesGroup == null || (chatMessageCell3 = currentMessagesGroup.transitionParams.cell) == null) {
                                view = childAt;
                                i3 = i9;
                                i4 = childCount;
                                groupedMessages2 = currentMessagesGroup;
                                f2 = y;
                                z = z4;
                                f3 = f11;
                                i5 = i7;
                                chatMessageCell2 = chatMessageCell;
                                z2 = z5;
                            } else {
                                float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(z4);
                                MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                float f13 = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                                float f14 = transitionParams.top + transitionParams.offsetTop;
                                float f15 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                                float f16 = transitionParams.bottom + transitionParams.offsetBottom;
                                if (!transitionParams.backgroundChangeBounds) {
                                    f14 += transitionParams.cell.getTranslationY();
                                    f16 += currentMessagesGroup.transitionParams.cell.getTranslationY();
                                }
                                if (f14 < (ChatActivity.this.chatListViewPaddingTop - chatActivity3.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(20)) {
                                    f14 = (ChatActivity.this.chatListViewPaddingTop - chatActivity5.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(20);
                                }
                                if (f16 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.m107dp(20)) {
                                    f16 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.m107dp(20);
                                }
                                int size2 = currentMessagesGroup.messages.size();
                                int i10 = 0;
                                while (true) {
                                    view3 = childAt;
                                    if (i10 >= size2) {
                                        i3 = i9;
                                        i4 = childCount;
                                        z3 = true;
                                        break;
                                    }
                                    MessageObject messageObject = currentMessagesGroup.messages.get(i10);
                                    i3 = i9;
                                    i4 = childCount;
                                    if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                        z3 = false;
                                        break;
                                    }
                                    i10++;
                                    childAt = view3;
                                    childCount = i4;
                                    i9 = i3;
                                }
                                canvas.save();
                                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                                float clipTop = (mentionsContainerView != null ? mentionsContainerView.clipTop() : BitmapDescriptorFactory.HUE_RED) + y;
                                float measuredWidth = getMeasuredWidth();
                                float y2 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                                ChatMessageCell chatMessageCell5 = chatMessageCell;
                                float f17 = y2 - chatActivity4.blurredViewBottomOffset;
                                MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                                canvas.clipRect(BitmapDescriptorFactory.HUE_RED, clipTop, measuredWidth, f17 - (mentionsContainerView2 != null ? mentionsContainerView2.clipBottom() : BitmapDescriptorFactory.HUE_RED));
                                canvas.translate(BitmapDescriptorFactory.HUE_RED, ChatActivity.this.chatListView.getY());
                                MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                view = view3;
                                groupedMessages2 = currentMessagesGroup;
                                i5 = i7;
                                f2 = y;
                                f3 = 0.0f;
                                chatMessageCell2 = chatMessageCell5;
                                z = true;
                                transitionParams2.cell.drawBackground(canvas, (int) f13, (int) f14, (int) f15, (int) f16, transitionParams2.pinnedTop, transitionParams2.pinnedBotton, z3, ChatActivity.this.contentView.getKeyboardHeight());
                                canvas.restore();
                                z2 = true;
                            }
                            if (chatMessageCell2 != null && chatMessageCell2.getPhotoImage().isAnimationRunning()) {
                                invalidate();
                            }
                            float left = ChatActivity.this.chatListView.getLeft();
                            float right = ChatActivity.this.chatListView.getRight();
                            float y3 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                            float f18 = y3 - chatActivity2.blurredViewBottomOffset;
                            MentionsContainerView mentionsContainerView3 = ChatActivity.this.mentionContainer;
                            if (mentionsContainerView3 != null) {
                                f4 = f2 + mentionsContainerView3.clipTop();
                                f18 -= ChatActivity.this.mentionContainer.clipBottom();
                            } else {
                                f4 = f2;
                            }
                            if (chatMessageCell2 == null || !chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner) {
                                left = Math.max(left, ChatActivity.this.chatListView.getLeft() + view.getX());
                                f4 = Math.max(f4, ChatActivity.this.chatListView.getY() + view.getY());
                                right = Math.min(right, ChatActivity.this.chatListView.getLeft() + view.getX() + view.getMeasuredWidth());
                                f18 = Math.min(f18, ChatActivity.this.chatListView.getY() + view.getY() + view.getMeasuredHeight());
                            }
                            float f19 = left;
                            float f20 = right;
                            float f21 = f4;
                            float f22 = f18;
                            int i11 = (f21 > f22 ? 1 : (f21 == f22 ? 0 : -1));
                            if (i11 < 0) {
                                if (view.getAlpha() != 1.0f) {
                                    f8 = f21;
                                    f9 = f22;
                                    canvas.saveLayerAlpha(f19, f21, f20, f22, (int) (view.getAlpha() * 255.0f), 31);
                                } else {
                                    f8 = f21;
                                    f9 = f22;
                                    canvas.save();
                                }
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(z);
                                    chatMessageCell2.setScrimReaction(ChatActivity.this.scrimViewReaction);
                                }
                                f5 = f8;
                                f6 = f9;
                                canvas.clipRect(f19, f5, f20, f6);
                                canvas.translate(ChatActivity.this.chatListView.getLeft() + view.getX(), ChatActivity.this.chatListView.getY() + view.getY());
                                canvas.scale(view.getScaleX(), view.getScaleY(), view.getMeasuredWidth() / 2.0f, view.getMeasuredHeight() / 2.0f);
                                if (chatMessageCell2 != null && groupedMessages2 == null && chatMessageCell2.drawBackgroundInParent()) {
                                    chatMessageCell2.drawBackgroundInternal(canvas, z);
                                }
                                view2 = view;
                                view2.draw(canvas);
                                if (chatMessageCell2 != null && chatMessageCell2.hasOutboundsContent()) {
                                    chatMessageCell2.drawOutboundsContent(canvas);
                                }
                                if (chatActionCell != null) {
                                    chatActionCell.drawOutboundsContent(canvas);
                                }
                                canvas.restore();
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(false);
                                    chatMessageCell2.setScrimReaction(null);
                                }
                            } else {
                                view2 = view;
                                f5 = f21;
                                f6 = f22;
                            }
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = groupedMessagePosition;
                            if (groupedMessagePosition2 != null || (chatMessageCell2 != null && chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner)) {
                                if (groupedMessagePosition2 == null || groupedMessagePosition2.last || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0)) {
                                    if (groupedMessagePosition2 == null || groupedMessagePosition2.last) {
                                        this.drawTimeAfter.add(chatMessageCell2);
                                    }
                                    if (groupedMessagePosition2 == null || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0 && chatMessageCell2.hasNameLayout())) {
                                        this.drawNamesAfter.add(chatMessageCell2);
                                    }
                                }
                                if (groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 8) != 0) {
                                    this.drawCaptionAfter.add(chatMessageCell2);
                                }
                            }
                            if (ChatActivity.this.scrimViewReaction != null && chatMessageCell2 != null) {
                                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                View view4 = view2;
                                float f23 = f6;
                                canvas.drawRect(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                                if (i11 < 0) {
                                    float alpha2 = view4.getAlpha() * ChatActivity.this.scrimViewAlpha;
                                    if (alpha2 < 1.0f) {
                                        f7 = f5;
                                        canvas.saveLayerAlpha(f19, f5, f20, f23, (int) (alpha2 * 255.0f), 31);
                                    } else {
                                        f7 = f5;
                                        canvas.save();
                                    }
                                    canvas.clipRect(f19, f7, f20, f23);
                                    canvas.translate(ChatActivity.this.chatListView.getLeft() + view4.getX(), ChatActivity.this.chatListView.getY() + view4.getY());
                                    chatMessageCell2.drawScrimReaction(canvas, ChatActivity.this.scrimViewReaction);
                                    canvas.restore();
                                }
                            }
                            z5 = z2;
                        } else {
                            i3 = i9;
                            i4 = childCount;
                            groupedMessages2 = currentMessagesGroup;
                            f2 = y;
                            f3 = f11;
                            i5 = i7;
                        }
                        i9 = i3 + 1;
                        y = f2;
                        i7 = i5;
                        f11 = f3;
                        childCount = i4;
                        currentMessagesGroup = groupedMessages2;
                        z4 = true;
                    }
                    float f24 = y;
                    f = f11;
                    i = i7;
                    int size3 = this.drawTimeAfter.size();
                    if (size3 > 0) {
                        for (int i12 = 0; i12 < size3; i12++) {
                            drawChildElement(canvas, f24, this.drawTimeAfter.get(i12), 0);
                        }
                        i2 = 0;
                        this.drawTimeAfter.clear();
                    } else {
                        i2 = 0;
                    }
                    int size4 = this.drawNamesAfter.size();
                    if (size4 > 0) {
                        for (int i13 = i2; i13 < size4; i13++) {
                            drawChildElement(canvas, f24, this.drawNamesAfter.get(i13), 1);
                        }
                        this.drawNamesAfter.clear();
                    }
                    int size5 = this.drawCaptionAfter.size();
                    if (size5 > 0) {
                        for (int i14 = i2; i14 < size5; i14++) {
                            ChatMessageCell chatMessageCell6 = this.drawCaptionAfter.get(i14);
                            if (chatMessageCell6.getCurrentPosition() != null || chatMessageCell6.getTransitionParams().animateBackgroundBoundsInner) {
                                drawChildElement(canvas, f24, chatMessageCell6, 2);
                            }
                        }
                        this.drawCaptionAfter.clear();
                    }
                } else {
                    int save = canvas.save();
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop(), ChatActivity.this.scrimView.getRight(), ChatActivity.this.scrimView.getBottom(), (int) (ChatActivity.this.scrimViewAlpha * 255.0f), 31);
                    }
                    canvas.translate(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop());
                    if (ChatActivity.this.scrimView == ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) {
                        float max = Math.max(ChatActivity.this.scrimView.getMeasuredWidth(), ChatActivity.this.scrimView.getMeasuredHeight()) / 2;
                        canvas.drawCircle(max, max, 0.7f * max, ChatActivity.this.actionBarBackgroundPaint);
                    }
                    ChatActivity.this.scrimView.draw(canvas);
                    canvas.restoreToCount(save);
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                    f = 0.0f;
                    i = i7;
                }
                if (ChatActivity.this.scrimViewReaction == null && ChatActivity.this.scrimViewAlpha < 1.0f) {
                    ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                    canvas.drawRect(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                }
            } else {
                f = 0.0f;
                i = i7;
            }
            if (ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) {
                MentionsContainerView mentionsContainerView4 = ChatActivity.this.mentionContainer;
                if (mentionsContainerView4 == null || mentionsContainerView4.getVisibility() != 0) {
                    if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.reactionsMentiondownButton != null && ChatActivity.this.reactionsMentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.reactionsMentiondownButton, SystemClock.uptimeMillis());
                    }
                }
                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                    super.drawChild(canvas, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.fireworksOverlay != null) {
                    super.drawChild(canvas, ChatActivity.this.fireworksOverlay, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.gifHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.gifHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.emojiHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.emojiHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.undoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.undoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.topUndoView != null && ChatActivity.this.topUndoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.topUndoView, SystemClock.uptimeMillis());
                }
            }
            if (ChatActivity.this.fixedKeyboardHeight > 0 && this.keyboardHeight < AndroidUtilities.m107dp(20)) {
                int themedColor2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhite);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor2) {
                    Paint paint2 = this.backgroundPaint;
                    this.backgroundColor = themedColor2;
                    paint2.setColor(themedColor2);
                }
                canvas.drawRect(BitmapDescriptorFactory.HUE_RED, getMeasuredHeight() - ChatActivity.this.fixedKeyboardHeight, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
            }
            if (ChatActivity.this.pullingDownDrawable != null && ChatActivity.this.pullingDownDrawable.needDrawBottomPanel()) {
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 == null || chatActivityEnterView2.getVisibility() != 0) {
                    top = ChatActivity.this.bottomOverlayChat.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.bottomOverlayChat.getBottom();
                } else {
                    top = ChatActivity.this.chatActivityEnterView.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.chatActivityEnterView.getBottom();
                }
                ChatActivity.this.pullingDownDrawable.drawBottomPanel(canvas, top - ((int) ((ChatActivity.this.pullingDownAnimateToActivity == null ? f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset) * ChatActivity.this.pullingDownAnimateProgress)), bottom, getMeasuredWidth());
            }
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                ChatActivity.this.pullingDownAnimateToActivity.fragmentView.draw(canvas);
                canvas.restore();
            }
            ChatActivity.this.emojiAnimationsOverlay.draw(canvas);
            if (i >= 0) {
                canvas.restore();
            }
            if (ChatActivity.this.switchingFromTopics) {
                canvas.save();
                canvas.translate(((BaseFragment) ChatActivity.this).actionBar.getX(), ((BaseFragment) ChatActivity.this).actionBar.getY());
                canvas.saveLayerAlpha(BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, ((BaseFragment) ChatActivity.this).actionBar.getWidth(), ((BaseFragment) ChatActivity.this).actionBar.getHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                ((BaseFragment) ChatActivity.this).actionBar.draw(canvas);
                canvas.restore();
                canvas.restore();
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:143:0x0372  */
        /* JADX WARN: Removed duplicated region for block: B:146:0x0397  */
        /* JADX WARN: Removed duplicated region for block: B:167:0x040a  */
        /* JADX WARN: Removed duplicated region for block: B:173:0x041f  */
        /* JADX WARN: Removed duplicated region for block: B:323:0x07fb  */
        /* JADX WARN: Removed duplicated region for block: B:326:0x0847  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        protected void onMeasure(int r24, int r25) {
            /*
                Method dump skipped, instructions count: 2146
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityFragmentView.onMeasure(int, int):void");
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMeasure$1(int i) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, ChatActivity.this.scrollToOffsetOnRecreate);
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (ChatActivity.this.globalIgnoreLayout) {
                return;
            }
            super.requestLayout();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Removed duplicated region for block: B:35:0x008c  */
        /* JADX WARN: Removed duplicated region for block: B:49:0x00d3  */
        /* JADX WARN: Removed duplicated region for block: B:53:0x00e8  */
        /* JADX WARN: Removed duplicated region for block: B:63:0x00fe  */
        /* JADX WARN: Removed duplicated region for block: B:65:0x011c  */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void onLayout(boolean r17, int r18, int r19, int r20, int r21) {
            /*
                Method dump skipped, instructions count: 766
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityFragmentView.onLayout(boolean, int, int, int, int):void");
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void setNonNoveTranslation(float f) {
            ChatActivity.this.contentView.setTranslationY(f);
            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            }
            ChatActivity.this.emptyViewContainer.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            ChatActivity.this.progressView.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            ChatActivity.this.contentPanTranslation = BitmapDescriptorFactory.HUE_RED;
            ChatActivity.this.contentPanTranslationT = BitmapDescriptorFactory.HUE_RED;
            ChatActivity.this.contentView.setBackgroundTranslation(0);
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.onPanTranslationUpdate(BitmapDescriptorFactory.HUE_RED);
            }
            if (ChatActivity.this.blurredView != null) {
                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(BitmapDescriptorFactory.HUE_RED);
            }
            ChatActivity.this.setFragmentPanTranslationOffset(0);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        @Override // android.view.View
        public void setPadding(int i, int i2, int i3, int i4) {
            ChatActivity.this.contentPaddingTop = i2;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            MessagePreviewView messagePreviewView;
            if (keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1 && (messagePreviewView = ChatActivity.this.forwardingPreviewView) != null && messagePreviewView.isShowing()) {
                ChatActivity.this.forwardingPreviewView.dismiss(true);
                return true;
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        public Drawable getNewDrawable() {
            Drawable wallpaperDrawable = ChatActivity.this.themeDelegate.getWallpaperDrawable();
            return wallpaperDrawable != null ? wallpaperDrawable : super.getNewDrawable();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.Components.SizeNotifierFrameLayout
        public boolean getNewDrawableMotion() {
            if (ChatActivity.this.themeDelegate.wallpaper == null) {
                return super.getNewDrawableMotion();
            }
            return ChatActivity.this.themeDelegate.wallpaper.settings != null && ChatActivity.this.themeDelegate.wallpaper.settings.motion;
        }
    }

    private void updateSecretStatus() {
        ChatActivityEnterView chatActivityEnterView;
        if (this.bottomOverlay == null) {
            return;
        }
        boolean z = true;
        if (this.chatMode == 3 && getSavedDialogId() == UserObject.ANONYMOUS) {
            this.bottomOverlayText.setText(LocaleController.getString(C3632R.string.AuthorHiddenDescription));
            this.bottomOverlay.setVisibility(0);
            AnimatorSet animatorSet = this.mentionListAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.mentionListAnimation = null;
            }
            this.mentionContainer.setVisibility(8);
            this.mentionContainer.setTag(null);
            updateMessageListAccessibilityVisibility();
            SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
            if (suggestEmojiView != null) {
                suggestEmojiView.forceClose();
            }
        } else {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null && !ChatObject.canSendMessages(tLRPC$Chat) && !ChatObject.canSendAnyMedia(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                if (!tLRPC$Chat2.gigagroup && (!ChatObject.isChannel(tLRPC$Chat2) || this.currentChat.megagroup)) {
                    TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat3.default_banned_rights;
                    if (tLRPC$TL_chatBannedRights != null && tLRPC$TL_chatBannedRights.send_messages) {
                        this.bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", C3632R.string.GlobalSendMessageRestricted));
                    } else if (AndroidUtilities.isBannedForever(tLRPC$Chat3.banned_rights)) {
                        this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", C3632R.string.SendMessageRestrictedForever));
                    } else {
                        this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", C3632R.string.SendMessageRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                    }
                    this.bottomOverlay.setVisibility(0);
                    AnimatorSet animatorSet2 = this.mentionListAnimation;
                    if (animatorSet2 != null) {
                        animatorSet2.cancel();
                        this.mentionListAnimation = null;
                    }
                    this.mentionContainer.setVisibility(8);
                    this.mentionContainer.setTag(null);
                    updateMessageListAccessibilityVisibility();
                    SuggestEmojiView suggestEmojiView2 = this.suggestEmojiPanel;
                    if (suggestEmojiView2 != null) {
                        suggestEmojiView2.forceClose();
                    }
                }
            }
            createEmptyView();
            TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
            if (tLRPC$EncryptedChat == null || this.bigEmptyView == null) {
                this.bottomOverlay.setVisibility(4);
                if (this.suggestEmojiPanel == null || (chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.hasText()) {
                    return;
                }
                this.suggestEmojiPanel.fireUpdate();
                return;
            }
            if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested) {
                this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", C3632R.string.EncryptionProcessing));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) {
                this.bottomOverlayText.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", C3632R.string.AwaitingEncryption, "<b>" + this.currentUser.first_name + "</b>")));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatDiscarded) {
                this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", C3632R.string.EncryptionRejected));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
                this.chatActivityEnterView.setFieldText("");
                getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, false);
            } else {
                if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) {
                    this.bottomOverlay.setVisibility(4);
                    if (!this.inPreviewMode && !this.isInsideContainer && this.chatMode != 3) {
                        this.chatActivityEnterView.setVisibility(0);
                    }
                }
                z = false;
            }
            checkRaiseSensors();
            checkActionBarMenu(false);
        }
        if (this.inPreviewMode) {
            this.bottomOverlay.setVisibility(4);
        }
        if (z) {
            this.chatActivityEnterView.hidePopup(false);
            if (getParentActivity() != null) {
                AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
            }
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onRequestPermissionsResultFragment(int i, String[] strArr, int[] iArr) {
        ChatAttachAlert chatAttachAlert;
        ChatAttachAlert chatAttachAlert2;
        boolean z;
        ChatAttachAlert chatAttachAlert3;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        boolean z2 = false;
        if (i == IdFabric$RequestCode.FILE_SAVING_WRITE_STORAGE_PERMISSION) {
            if (iArr.length > 0 && iArr[0] == 0) {
                openSaveDirectoryChooser();
                return;
            }
            showToast(LocaleController.getInternalString(C3632R.string.PermissionStorageWithHint));
            this.savingFileCustomName = "";
            this.savingDocument = null;
            this.savingMessageObject = null;
        } else if (i == 4) {
            ChatAttachAlert chatAttachAlert4 = this.chatAttachAlert;
            if (chatAttachAlert4 != null) {
                chatAttachAlert4.getPhotoLayout().checkStorage();
            }
            ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
            if (chatThemeBottomSheet == null || (chatAttachAlert3 = chatThemeBottomSheet.chatAttachAlert) == null) {
                return;
            }
            chatAttachAlert3.getPhotoLayout().checkStorage();
        } else if ((i == 5 || i == 30) && (chatAttachAlert = this.chatAttachAlert) != null) {
            chatAttachAlert.onRequestPermissionsResultFragment(i, strArr, iArr);
        } else if ((i == 17 || i == 18) && (chatAttachAlert2 = this.chatAttachAlert) != null) {
            ChatAttachAlertPhotoLayout photoLayout = chatAttachAlert2.getPhotoLayout();
            if (iArr.length > 0 && iArr[0] == 0) {
                z2 = true;
            }
            photoLayout.checkCamera(z2);
            this.chatAttachAlert.getPhotoLayout().checkStorage();
        } else if (i == 21) {
            if (getParentActivity() == null || iArr == null || iArr.length == 0 || iArr[0] == 0) {
                return;
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
            builder.setMessage(LocaleController.getString("PermissionNoAudioVideoWithHint", C3632R.string.PermissionNoAudioVideoWithHint));
            builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", C3632R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda38
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i2) {
                    ChatActivity.this.lambda$onRequestPermissionsResultFragment$172(dialogInterface, i2);
                }
            });
            builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), null);
            builder.show();
        } else if (i == 19 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
            processSelectedAttach(0);
        } else if (i == 20 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
            processSelectedAttach(2);
        } else if (((i == 101 || i == 102) && this.currentUser != null) || (i == 103 && this.currentChat != null)) {
            int i2 = 0;
            while (true) {
                if (i2 >= iArr.length) {
                    z = true;
                    break;
                } else if (iArr[i2] != 0) {
                    z = false;
                    break;
                } else {
                    i2++;
                }
            }
            if (iArr.length <= 0 || !z) {
                VoIPHelper.permissionDenied(getParentActivity(), null, i);
            } else if (i == 103) {
                VoIPHelper.startCall(this.currentChat, null, null, this.createGroupCall, getParentActivity(), this, getAccountInstance());
            } else {
                TLRPC$User tLRPC$User = this.currentUser;
                boolean z3 = i == 102;
                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                VoIPHelper.startCall(tLRPC$User, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.f1751id), getAccountInstance());
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onRequestPermissionsResultFragment$172(DialogInterface dialogInterface, int i) {
        try {
            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.setData(Uri.parse("package:" + ApplicationLoader.applicationContext.getPackageName()));
            getParentActivity().startActivity(intent);
        } catch (Exception e) {
            FileLog.m102e(e);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:75:0x00b1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void checkActionBarMenu(boolean r8) {
        /*
            r7 = this;
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r7.currentEncryptedChat
            r1 = 8
            r2 = 0
            if (r0 == 0) goto Lb
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r0 == 0) goto L39
        Lb:
            org.telegram.tgnet.TLRPC$Chat r0 = r7.currentChat
            if (r0 == 0) goto L23
            int r0 = r7.chatMode
            if (r0 != 0) goto L39
            long r3 = r7.threadMessageId
            r5 = 0
            int r0 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r0 != 0) goto L39
            org.telegram.tgnet.TLRPC$ChatFull r0 = r7.chatInfo
            if (r0 == 0) goto L39
            int r0 = r0.ttl_period
            if (r0 == 0) goto L39
        L23:
            org.telegram.tgnet.TLRPC$User r0 = r7.currentUser
            if (r0 == 0) goto L48
            boolean r0 = org.telegram.messenger.UserObject.isDeleted(r0)
            if (r0 != 0) goto L39
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r7.currentEncryptedChat
            if (r0 != 0) goto L48
            org.telegram.tgnet.TLRPC$UserFull r0 = r7.userInfo
            if (r0 == 0) goto L39
            int r0 = r0.ttl_period
            if (r0 != 0) goto L48
        L39:
            org.telegram.ui.ActionBar.ActionBarMenuItem$Item r0 = r7.timeItem2
            if (r0 == 0) goto L40
            r0.setVisibility(r1)
        L40:
            org.telegram.ui.Components.ChatAvatarContainer r0 = r7.avatarContainer
            if (r0 == 0) goto L56
            r0.hideTimeItem(r8)
            goto L56
        L48:
            org.telegram.ui.ActionBar.ActionBarMenuItem$Item r0 = r7.timeItem2
            if (r0 == 0) goto L4f
            r0.setVisibility(r2)
        L4f:
            org.telegram.ui.Components.ChatAvatarContainer r0 = r7.avatarContainer
            if (r0 == 0) goto L56
            r0.showTimeItem(r8)
        L56:
            org.telegram.ui.ActionBar.ActionBarMenuItem$Item r0 = r7.viewAsTopics
            if (r0 == 0) goto L68
            org.telegram.tgnet.TLRPC$Chat r3 = r7.currentChat
            if (r3 == 0) goto L64
            boolean r3 = r3.forum
            if (r3 == 0) goto L64
            r3 = r2
            goto L65
        L64:
            r3 = r1
        L65:
            r0.setVisibility(r3)
        L68:
            org.telegram.ui.Components.ChatAvatarContainer r0 = r7.avatarContainer
            if (r0 == 0) goto L89
            org.telegram.tgnet.TLRPC$EncryptedChat r3 = r7.currentEncryptedChat
            if (r3 == 0) goto L76
            int r3 = r3.ttl
            r0.setTime(r3, r8)
            goto L89
        L76:
            org.telegram.tgnet.TLRPC$UserFull r3 = r7.userInfo
            if (r3 == 0) goto L80
            int r3 = r3.ttl_period
            r0.setTime(r3, r8)
            goto L89
        L80:
            org.telegram.tgnet.TLRPC$ChatFull r3 = r7.chatInfo
            if (r3 == 0) goto L89
            int r3 = r3.ttl_period
            r0.setTime(r3, r8)
        L89:
            org.telegram.ui.ActionBar.ActionBarMenuItem$Item r8 = r7.clearHistoryItem
            if (r8 == 0) goto Lb5
            org.telegram.tgnet.TLRPC$ChatFull r8 = r7.chatInfo
            if (r8 == 0) goto Lb5
            boolean r8 = r8.can_delete_channel
            if (r8 != 0) goto Lac
            org.telegram.tgnet.TLRPC$Chat r8 = r7.currentChat
            boolean r8 = org.telegram.messenger.ChatObject.isChannel(r8)
            if (r8 == 0) goto Lac
            org.telegram.tgnet.TLRPC$Chat r8 = r7.currentChat
            boolean r0 = r8.megagroup
            if (r0 == 0) goto Laa
            boolean r8 = org.telegram.messenger.ChatObject.isPublic(r8)
            if (r8 != 0) goto Laa
            goto Lac
        Laa:
            r8 = r2
            goto Lad
        Lac:
            r8 = 1
        Lad:
            org.telegram.ui.ActionBar.ActionBarMenuItem$Item r0 = r7.clearHistoryItem
            if (r8 == 0) goto Lb2
            r1 = r2
        Lb2:
            r0.setVisibility(r1)
        Lb5:
            r7.checkAndUpdateAvatar()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.checkActionBarMenu(boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMessageType(MessageObject messageObject) {
        String str;
        String str2;
        if (messageObject == null) {
            return -1;
        }
        boolean z = false;
        boolean z2 = true;
        if (this.currentEncryptedChat == null) {
            if (messageObject.isEditing()) {
                return -1;
            }
            if (messageObject.getId() <= 0 && messageObject.isOut()) {
                if (messageObject.isSendError()) {
                    return !messageObject.isMediaEmpty() ? 0 : 20;
                }
                return -1;
            } else if (messageObject.isAnimatedEmoji()) {
                return 2;
            } else {
                int i = messageObject.type;
                if (i == 6) {
                    return -1;
                }
                if (i == 10 || i == 11 || i == 21 || messageObject.isWallpaperAction()) {
                    return messageObject.getId() == 0 ? -1 : 1;
                } else if (messageObject.isVoice()) {
                    return 2;
                } else {
                    if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                        TLRPC$InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        return inputStickerSet instanceof TLRPC$TL_inputStickerSetID ? !getMediaDataController().isStickerPackInstalled(inputStickerSet.f1625id) ? 7 : 9 : (!(inputStickerSet instanceof TLRPC$TL_inputStickerSetShortName) || getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) ? 9 : 7;
                    }
                    if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                            z = true;
                        }
                        if (z || !messageObject.mediaExists) {
                            z2 = z;
                        }
                        if (z2) {
                            if (messageObject.getDocument() != null && !messageObject.isMusic() && (str2 = messageObject.getDocument().mime_type) != null) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                }
                                if (str2.endsWith("/xml")) {
                                    return 5;
                                }
                                if ((!messageObject.isNewGif() && str2.endsWith("/mp4")) || str2.endsWith("/png") || str2.endsWith("/jpg") || str2.endsWith("/jpeg")) {
                                    return 6;
                                }
                            }
                            return 4;
                        }
                    } else if (messageObject.type == 12) {
                        return 8;
                    } else {
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
            }
        } else if (messageObject.isSending()) {
            return -1;
        } else {
            if (messageObject.isAnimatedEmoji()) {
                return 2;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            }
            int i2 = messageObject.type;
            if (i2 == 10 || i2 == 11) {
                return (messageObject.getId() == 0 || messageObject.isSending()) ? -1 : 1;
            } else if (messageObject.isVoice()) {
                return 2;
            } else {
                if (!messageObject.isAnimatedEmoji() && (messageObject.isSticker() || messageObject.isAnimatedSticker())) {
                    TLRPC$InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                    if ((inputStickerSet2 instanceof TLRPC$TL_inputStickerSetShortName) && !getMediaDataController().isStickerPackInstalled(inputStickerSet2.short_name)) {
                        return 7;
                    }
                } else if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                    if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                        z = true;
                    }
                    if (z || !FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).exists()) {
                        z2 = z;
                    }
                    if (z2) {
                        if (messageObject.getDocument() != null && (str = messageObject.getDocument().mime_type) != null && str.endsWith("text/xml")) {
                            return 5;
                        }
                        if (messageObject.messageOwner.ttl <= 0) {
                            return 4;
                        }
                    }
                } else if (messageObject.type == 12) {
                    return 8;
                } else {
                    if (messageObject.isMediaEmpty()) {
                        return 3;
                    }
                }
                return 2;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void addToSelectedMessages(MessageObject messageObject, boolean z) {
        addToSelectedMessages(messageObject, z, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:522:0x0806  */
    /* JADX WARN: Removed duplicated region for block: B:529:0x0826  */
    /* JADX WARN: Removed duplicated region for block: B:530:0x0828  */
    /* JADX WARN: Removed duplicated region for block: B:542:0x0859  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x0869  */
    /* JADX WARN: Removed duplicated region for block: B:550:0x088c  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x08e9  */
    /* JADX WARN: Removed duplicated region for block: B:556:0x08f1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void addToSelectedMessages(org.telegram.messenger.MessageObject r24, boolean r25, boolean r26) {
        /*
            Method dump skipped, instructions count: 2484
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.addToSelectedMessages(org.telegram.messenger.MessageObject, boolean, boolean):void");
    }

    private void updateSelectedMessageReactions() {
        ArrayList arrayList = new ArrayList();
        SparseArray<MessageObject> sparseArray = this.selectedMessagesIds[0];
        for (int i = 0; i < sparseArray.size(); i++) {
            arrayList.add(sparseArray.valueAt(i));
        }
        SparseArray<MessageObject> sparseArray2 = this.selectedMessagesIds[1];
        for (int i2 = 0; i2 < sparseArray2.size(); i2++) {
            arrayList.add(sparseArray2.valueAt(i2));
        }
        this.selectionReactionsOverlay.setSelectedMessages(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processRowSelect(View view, boolean z, float f, float f2) {
        MessageObject messageObject;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            messageObject = chatMessageCell.getMessageObject();
            chatMessageCell.setLastTouchCoords(f, f2);
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
        }
        int messageType = getMessageType(messageObject);
        if ((messageObject == null || !messageObject.isAnyGift()) && messageType >= 2 && messageType != 20 && messageType != 21) {
            if (messageObject == null || messageObject.type != 27) {
                if (messageObject == null || !messageObject.isWallpaperAction()) {
                    addToSelectedMessages(messageObject, z);
                    updateActionModeTitle();
                    updateVisibleRows();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateActionModeTitle() {
        if (this.reportType < 0) {
            if (this.actionBar.isActionModeShowed() && this.selectedMessagesCountTextView != null) {
                if (this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
                    return;
                }
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
                return;
            }
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            this.bottomOverlayChatText.setText(LocaleController.getString("ReportMessages", C3632R.string.ReportMessages));
            this.bottomOverlayChatText.setAlpha(0.5f);
            this.bottomOverlayChatText.setEnabled(false);
            return;
        }
        this.bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", C3632R.string.ReportMessagesCount, LocaleController.formatPluralString("messages", size, new Object[0])).toUpperCase());
        this.bottomOverlayChatText.setAlpha(1.0f);
        this.bottomOverlayChatText.setEnabled(true);
    }

    public void updateTitle(boolean z) {
        TLRPC$Chat chat;
        if (this.avatarContainer == null) {
            return;
        }
        if (this.chatMode == 3) {
            long j = this.threadMessageId;
            TLRPC$User tLRPC$User = null;
            if (j > 0) {
                tLRPC$User = getMessagesController().getUser(Long.valueOf(j));
                chat = null;
            } else {
                chat = getMessagesController().getChat(Long.valueOf(-j));
            }
            if (UserObject.isReplyUser(tLRPC$User)) {
                this.avatarContainer.setTitle(LocaleController.getString("RepliesTitle", C3632R.string.RepliesTitle));
            } else if (UserObject.isAnonymous(tLRPC$User)) {
                this.avatarContainer.setTitle(LocaleController.getString(C3632R.string.AnonymousForward));
            } else if (UserObject.isUserSelf(tLRPC$User)) {
                this.avatarContainer.setTitle(LocaleController.getString(C3632R.string.MyNotes));
            } else if (tLRPC$User != null) {
                this.avatarContainer.setTitle(UserObject.getUserName(tLRPC$User));
            } else if (chat != null) {
                this.avatarContainer.setTitle(chat.title);
            } else {
                this.avatarContainer.setTitle("");
            }
        } else if (isThreadChat()) {
            if (this.isTopic) {
                updateTopicHeader();
            } else if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", C3632R.string.CommentsTitle));
                }
            } else {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        } else if (UserObject.isReplyUser(this.currentUser)) {
            this.avatarContainer.setTitle(LocaleController.getString("RepliesTitle", C3632R.string.RepliesTitle));
        } else if (UserObject.isAnonymous(this.currentUser)) {
            this.avatarContainer.setTitle(LocaleController.getString(C3632R.string.AnonymousForward));
        } else {
            int i = this.chatMode;
            if (i == 1) {
                if (UserObject.isUserSelf(this.currentUser)) {
                    this.avatarContainer.setTitle(LocaleController.getString("Reminders", C3632R.string.Reminders));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("ScheduledMessages", C3632R.string.ScheduledMessages));
                }
            } else if (i == 2) {
                if (isForwardingEditor()) {
                    this.avatarContainer.setTitle(LocaleController.getString("EditMessage", C3632R.string.EditMessage));
                } else {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[0]));
                }
            } else {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null) {
                    this.avatarContainer.setTitle(tLRPC$Chat.title, tLRPC$Chat.scam, tLRPC$Chat.fake, tLRPC$Chat.verified, false, tLRPC$Chat.emoji_status, z);
                } else {
                    TLRPC$User tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null) {
                        if (tLRPC$User2.self) {
                            this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", C3632R.string.SavedMessages));
                        } else if (!MessagesController.isSupportUser(tLRPC$User2) && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.f1751id)) == null && (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
                            if (!TextUtils.isEmpty(this.currentUser.phone)) {
                                ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                                String format = C3544PhoneFormat.getInstance().format("+" + this.currentUser.phone);
                                TLRPC$User tLRPC$User3 = this.currentUser;
                                chatAvatarContainer.setTitle(format, tLRPC$User3.scam, tLRPC$User3.fake, tLRPC$User3.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                            } else {
                                ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                                String userName = UserObject.getUserName(this.currentUser);
                                TLRPC$User tLRPC$User4 = this.currentUser;
                                chatAvatarContainer2.setTitle(userName, tLRPC$User4.scam, tLRPC$User4.fake, tLRPC$User4.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                            }
                        } else {
                            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                            String userName2 = UserObject.getUserName(this.currentUser);
                            TLRPC$User tLRPC$User5 = this.currentUser;
                            chatAvatarContainer3.setTitle(userName2, tLRPC$User5.scam, tLRPC$User5.fake, tLRPC$User5.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                        }
                    }
                }
            }
        }
        setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }

    private void updateTopicTitleIcon() {
        ChatAvatarContainer chatAvatarContainer;
        if (this.forumTopic == null || (chatAvatarContainer = this.avatarContainer) == null) {
            return;
        }
        chatAvatarContainer.getAvatarImageView().setVisibility(0);
        ForumUtilities.setTopicIcon(this.avatarContainer.getAvatarImageView(), this.forumTopic, true, true, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getPinnedMessagesCount() {
        return Math.max(this.loadedPinnedMessagesCount, this.totalPinnedMessagesCount);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTopicButtons() {
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        ActionBarMenuItem.Item item = this.closeTopicItem;
        if (item != null) {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            item.setVisibility((tLRPC$Chat == null || !ChatObject.canManageTopic(this.currentAccount, tLRPC$Chat, this.forumTopic) || (tLRPC$TL_forumTopic = this.forumTopic) == null || tLRPC$TL_forumTopic.closed) ? 8 : 0);
        }
    }

    private void updateBotButtons() {
        TLRPC$User tLRPC$User;
        boolean z;
        int i;
        if (this.headerItem == null || (tLRPC$User = this.currentUser) == null || this.currentEncryptedChat != null || !tLRPC$User.bot) {
            return;
        }
        boolean z2 = false;
        if (this.botInfo.size() != 0) {
            boolean z3 = false;
            z = false;
            for (int i2 = 0; i2 < this.botInfo.size(); i2++) {
                TLRPC$BotInfo valueAt = this.botInfo.valueAt(i2);
                for (i = 0; i < valueAt.commands.size(); i = i + 1) {
                    TLRPC$TL_botCommand tLRPC$TL_botCommand = valueAt.commands.get(i);
                    if (tLRPC$TL_botCommand.command.toLowerCase().equals("help")) {
                        z3 = true;
                    } else if (tLRPC$TL_botCommand.command.toLowerCase().equals("settings")) {
                        z = true;
                    }
                    i = (z && z3) ? 0 : i + 1;
                }
            }
            z2 = z3;
        } else {
            z = false;
        }
        if (z2) {
            this.headerItem.showSubItem(30);
        } else {
            this.headerItem.hideSubItem(30);
        }
        if (z) {
            this.headerItem.showSubItem(31);
        } else {
            this.headerItem.hideSubItem(31);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTitleIcons() {
        updateTitleIcons(false);
    }

    private void updateTitleIcons(boolean z) {
        ActionBarMenuItem.Item item;
        if (this.albumMode || this.avatarContainer == null || this.chatMode != 0) {
            return;
        }
        boolean isDialogMuted = getMessagesController().isDialogMuted(this.dialog_id, getTopicId());
        if (z) {
            isDialogMuted = !isDialogMuted;
        }
        this.avatarContainer.setTitleIcons(this.currentEncryptedChat != null ? getThemedDrawable("drawableLockIcon") : null, (isTemplatesChannel(true, false) || UserObject.isReplyUser(this.currentUser) || (isThreadChat() && !this.isTopic) || !isDialogMuted) ? null : getThemedDrawable("drawableMuteIcon"));
        if (!z && (item = this.muteItem) != null) {
            if (isDialogMuted) {
                item.setRightIconVisibility(8);
                this.muteItem.setText(LocaleController.getString("Unmute", C3632R.string.Unmute));
                this.muteItem.setIcon(C3632R.C3634drawable.msg_mute);
            } else {
                item.setRightIconVisibility(0);
                if (getMessagesController().isDialogNotificationsSoundEnabled(this.dialog_id, getTopicId())) {
                    this.muteItem.setText(LocaleController.getString("Mute", C3632R.string.Mute));
                    this.muteItem.setIcon(C3632R.C3634drawable.msg_unmute);
                } else {
                    this.muteItem.setText(LocaleController.getString("Mute", C3632R.string.Mute));
                    this.muteItem.setIcon(C3632R.C3634drawable.msg_silent);
                }
            }
        }
        ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = this.chatNotificationsPopupWrapper;
        if (chatNotificationsPopupWrapper != null) {
            chatNotificationsPopupWrapper.lambda$update$11(this.dialog_id, getTopicId(), null);
        }
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public void checkAndUpdateAvatar() {
        if (this.isTopic) {
            return;
        }
        if (this.currentUser != null) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.currentUser.f1751id));
            if (user == null) {
                return;
            }
            this.currentUser = user;
        } else if (this.currentChat != null) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(this.currentChat.f1602id));
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(final String str, final String str2) {
        if (getParentActivity() != null) {
            final Bitmap createVideoThumbnail = SendMessagesHelper.createVideoThumbnail(str, 1);
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            final ArrayList<Object> arrayList = new ArrayList<>();
            MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, str, 0, true, 0, 0, 0L);
            photoEntry.caption = str2;
            arrayList.add(photoEntry);
            PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.98
                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public boolean canCaptureMorePhotos() {
                    return false;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
                    return new ImageReceiver.BitmapHolder(createVideoThumbnail, (String) null, 0);
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2, String str3, boolean z3) {
                    ChatActivity.this.sendMedia((MediaController.PhotoEntry) arrayList.get(0), videoEditedInfo, z, i2, z2, str3);
                }
            }, this);
            return;
        }
        final Callbacks$Callback1 callbacks$Callback1 = new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda148
            @Override // com.iMe.fork.utils.Callbacks$Callback1
            public final void invoke(Object obj) {
                ChatActivity.this.lambda$openVideoEditor$173(str2, str, (String) obj);
            }
        };
        if (isTemplatesChannel(true, true)) {
            AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda340
                @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                public final void didSelectDate(boolean z, int i, String str3) {
                    Callbacks$Callback1.this.invoke(str3);
                }

                @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                public /* synthetic */ ArrayList getSelectedDialogs() {
                    return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                }
            }, this.themeDelegate, this);
        } else {
            callbacks$Callback1.invoke(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openVideoEditor$173(String str, String str2, String str3) {
        fillEditingMediaWithCaption(str, null);
        SendMessagesHelper.prepareSendingVideo(getAccountInstance(), str2, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, null, 0, this.editingMessageObject, true, 0, false, false, null, str3);
        afterMessageSend();
    }

    public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, final CharSequence charSequence) {
        String str;
        final ArrayList arrayList2 = new ArrayList();
        int i = 0;
        while (true) {
            String str2 = null;
            if (i >= arrayList.size()) {
                break;
            }
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i);
            String str3 = sendingMediaInfo.path;
            if (str3 != null) {
                str = str3;
            } else {
                if (sendingMediaInfo.uri != null) {
                    try {
                        File generatePicturePath = AndroidUtilities.generatePicturePath(isSecretChat(), "");
                        InputStream openInputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(sendingMediaInfo.uri);
                        FileOutputStream fileOutputStream = new FileOutputStream(generatePicturePath);
                        byte[] bArr = new byte[8192];
                        while (true) {
                            int read = openInputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                            fileOutputStream.flush();
                        }
                        openInputStream.close();
                        fileOutputStream.close();
                        str2 = generatePicturePath.getAbsolutePath();
                    } catch (Exception e) {
                        FileLog.m102e(e);
                    }
                }
                str = str2;
            }
            if (str != null) {
                Pair<Integer, Integer> imageOrientation = AndroidUtilities.getImageOrientation(str);
                MediaController.PhotoEntry orientation = new MediaController.PhotoEntry(0, 0, 0L, str, ((Integer) imageOrientation.first).intValue(), sendingMediaInfo.isVideo, 0, 0, 0L).setOrientation(imageOrientation);
                if (i == arrayList.size() - 1 && charSequence != null) {
                    orientation.caption = charSequence;
                }
                arrayList2.add(orientation);
            }
            i++;
        }
        if (arrayList2.isEmpty()) {
            return false;
        }
        if (getParentActivity() != null) {
            final boolean[] zArr = new boolean[arrayList2.size()];
            Arrays.fill(zArr, true);
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(arrayList2), arrayList2.size() - 1, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.99
                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i2) {
                    return null;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public int setPhotoChecked(int i2, VideoEditedInfo videoEditedInfo) {
                    return i2;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i2, VideoEditedInfo videoEditedInfo, boolean z, int i3, boolean z2, String str4, boolean z3) {
                    for (int size = arrayList2.size() - 1; size >= 0; size--) {
                        if (!zArr[size]) {
                            arrayList2.remove(size);
                        }
                    }
                    ChatActivity.this.sendPhotosGroup(arrayList2, z, i3, z2, str4);
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public boolean isPhotoChecked(int i2) {
                    return zArr[i2];
                }
            }, this);
        } else {
            final Callbacks$Callback1 callbacks$Callback1 = new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda147
                @Override // com.iMe.fork.utils.Callbacks$Callback1
                public final void invoke(Object obj) {
                    ChatActivity.this.lambda$openPhotosEditor$175(charSequence, arrayList2, (String) obj);
                }
            };
            if (isTemplatesChannel(true, true)) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda339
                    @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z, int i2, String str4) {
                        Callbacks$Callback1.this.invoke(str4);
                    }

                    @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public /* synthetic */ ArrayList getSelectedDialogs() {
                        return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                    }
                }, this.themeDelegate, this);
            } else {
                callbacks$Callback1.invoke(null);
            }
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openPhotosEditor$175(CharSequence charSequence, ArrayList arrayList, String str) {
        fillEditingMediaWithCaption(charSequence, null);
        sendPhotosGroup(arrayList, false, 0, false, str);
        afterMessageSend();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendPhotosGroup(ArrayList<MediaController.PhotoEntry> arrayList, boolean z, int i, boolean z2, String str) {
        String str2;
        if (!arrayList.isEmpty()) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MediaController.PhotoEntry> it = arrayList.iterator();
            while (it.hasNext()) {
                MediaController.PhotoEntry next = it.next();
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                boolean z3 = next.isVideo;
                if (!z3 && (str2 = next.imagePath) != null) {
                    sendingMediaInfo.path = str2;
                } else {
                    String str3 = next.path;
                    if (str3 != null) {
                        sendingMediaInfo.path = str3;
                    }
                }
                sendingMediaInfo.thumbPath = next.thumbPath;
                sendingMediaInfo.isVideo = z3;
                CharSequence charSequence = next.caption;
                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                sendingMediaInfo.entities = next.entities;
                sendingMediaInfo.masks = next.stickers;
                sendingMediaInfo.ttl = next.ttl;
                sendingMediaInfo.videoEditedInfo = next.editedInfo;
                sendingMediaInfo.canDeleteAfter = next.canDeleteAfter;
                arrayList2.add(sendingMediaInfo);
                next.reset();
            }
            fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList2, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, z2, true, null, z, i, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).updateStickersOrder, null, str);
            afterMessageSend();
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setFieldText("");
            }
        }
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    private void openEditingMessageInPhotoEditor() {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (this.editingMessageObject.isPhoto() || this.editingMessageObject.isVideo()) {
                final MessageObject messageObject2 = this.editingMessageObject;
                File file = null;
                if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath)) {
                    File file2 = new File(messageObject2.messageOwner.attachPath);
                    if (file2.exists()) {
                        file = file2;
                    }
                }
                if (file == null) {
                    file = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject2.messageOwner);
                }
                if (file.exists()) {
                    PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                    ArrayList<Object> arrayList = new ArrayList<>();
                    final MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, file.getAbsolutePath(), 0, messageObject2.isVideo(), 0, 0, 0L);
                    photoEntry.caption = this.chatActivityEnterView.getFieldText();
                    arrayList.add(photoEntry);
                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 2, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.100
                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public boolean allowSendingSubmenu() {
                            return false;
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public boolean canCaptureMorePhotos() {
                            return false;
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject3, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                            return ChatActivity.this.getPlaceForPhoto(messageObject2, null, z, true);
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2, String str, boolean z3) {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.editingMessageObject != messageObject2) {
                                return;
                            }
                            MediaController.PhotoEntry photoEntry2 = photoEntry;
                            if (photoEntry2.isCropped || photoEntry2.isPainted || photoEntry2.isFiltered || videoEditedInfo != null) {
                                chatActivity.sendMedia(photoEntry2, videoEditedInfo, z, i2, z2, str);
                            } else {
                                chatActivity.chatActivityEnterView.doneEditingMessage();
                            }
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public MessageObject getEditingMessageObject() {
                            MessageObject messageObject3 = ChatActivity.this.editingMessageObject;
                            MessageObject messageObject4 = messageObject2;
                            if (messageObject3 == messageObject4) {
                                return messageObject4;
                            }
                            return null;
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public void onApplyCaption(CharSequence charSequence) {
                            ChatActivity.this.chatActivityEnterView.setFieldText(charSequence, true);
                        }

                        @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                        public boolean closeKeyboard() {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.chatActivityEnterView == null || !chatActivity.isKeyboardVisible()) {
                                return false;
                            }
                            ChatActivity.this.chatActivityEnterView.closeKeyboard();
                            return true;
                        }
                    }, this);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, boolean z, boolean z2) {
        ChatActionCell chatActionCell;
        MessageObject messageObject2;
        ImageReceiver imageReceiver;
        ImageReceiver photoImage;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageAction tLRPC$MessageAction;
        TLRPC$Photo tLRPC$Photo;
        ArrayList<TLRPC$VideoSize> arrayList;
        TLRPC$FileLocation tLRPC$FileLocation2;
        TLRPC$Chat tLRPC$Chat;
        ChatMessageCell chatMessageCell;
        MessageObject messageObject3;
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                if (messageObject != null && (messageObject3 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject3.getId() == messageObject.getId()) {
                    photoImage = chatMessageCell.getPhotoImage();
                }
                photoImage = null;
            } else {
                if ((childAt instanceof ChatActionCell) && (messageObject2 = (chatActionCell = (ChatActionCell) childAt).getMessageObject()) != null) {
                    if (messageObject != null) {
                        if (messageObject2.getId() == messageObject.getId()) {
                            photoImage = chatActionCell.getPhotoImage();
                        }
                    } else if (tLRPC$FileLocation != null && messageObject2.photoThumbs != null) {
                        int i2 = 0;
                        while (true) {
                            if (i2 >= messageObject2.photoThumbs.size()) {
                                imageReceiver = null;
                                break;
                            }
                            TLRPC$FileLocation tLRPC$FileLocation3 = messageObject2.photoThumbs.get(i2).location;
                            if (tLRPC$FileLocation3 != null && tLRPC$FileLocation3.local_id == tLRPC$FileLocation.local_id) {
                                imageReceiver = chatActionCell.getPhotoImage();
                                break;
                            }
                            i2++;
                        }
                        photoImage = (imageReceiver != null || (tLRPC$Message = messageObject2.messageOwner) == null || (tLRPC$MessageAction = tLRPC$Message.action) == null || (tLRPC$Photo = tLRPC$MessageAction.photo) == null || (arrayList = tLRPC$Photo.video_sizes) == null || arrayList.isEmpty() || (tLRPC$FileLocation2 = messageObject2.messageOwner.action.photo.video_sizes.get(0).location) == null || tLRPC$FileLocation2.volume_id != tLRPC$FileLocation.volume_id || tLRPC$FileLocation2.local_id != tLRPC$FileLocation.local_id) ? imageReceiver : chatActionCell.getPhotoImage();
                    }
                }
                photoImage = null;
            }
            if (photoImage != null) {
                if (!z2 || childAt.getY() + photoImage.getImageY2() >= this.chatListViewPaddingTop - AndroidUtilities.m107dp(4)) {
                    int[] iArr = new int[2];
                    childAt.getLocationInWindow(iArr);
                    PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                    placeProviderObject.viewX = iArr[0];
                    placeProviderObject.viewY = iArr[1] - (Build.VERSION.SDK_INT < 21 ? AndroidUtilities.statusBarHeight : 0);
                    placeProviderObject.parentView = this.chatListView;
                    placeProviderObject.animatingImageView = null;
                    placeProviderObject.imageReceiver = photoImage;
                    if (z) {
                        placeProviderObject.thumb = photoImage.getBitmapSafe();
                    }
                    placeProviderObject.radius = photoImage.getRoundRadius();
                    if ((childAt instanceof ChatActionCell) && (tLRPC$Chat = this.currentChat) != null) {
                        placeProviderObject.dialogId = -tLRPC$Chat.f1602id;
                    }
                    placeProviderObject.clipTopAddition = (int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4));
                    placeProviderObject.clipBottomAddition = this.blurredViewBottomOffset;
                    return placeProviderObject;
                }
                return null;
            }
        }
        return null;
    }

    private void showAttachmentError() {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString("UnsupportedAttachment", C3632R.string.UnsupportedAttachment), this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void fillEditingMediaWithCaption(CharSequence charSequence, ArrayList<TLRPC$MessageEntity> arrayList) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(charSequence)) {
            MessageObject messageObject = this.editingMessageObject;
            messageObject.editingMessage = charSequence;
            messageObject.editingMessageEntities = arrayList;
            return;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
            MessageObject messageObject2 = this.editingMessageObject;
            if (messageObject2.editingMessage != null || TextUtils.isEmpty(messageObject2.messageOwner.message)) {
                return;
            }
            this.editingMessageObject.editingMessage = "";
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x008b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void sendUriAsDocument(android.net.Uri r27) {
        /*
            r26 = this;
            r1 = r26
            if (r27 != 0) goto L5
            return
        L5:
            java.lang.String r0 = r27.toString()
            java.lang.String r2 = "com.google.android.apps.photos.contentprovider"
            boolean r2 = r0.contains(r2)
            r3 = 1
            r4 = 0
            if (r2 == 0) goto L3b
            java.lang.String r2 = "/1/"
            java.lang.String[] r0 = r0.split(r2)     // Catch: java.lang.Exception -> L37
            r0 = r0[r3]     // Catch: java.lang.Exception -> L37
            java.lang.String r2 = "/ACTUAL"
            int r2 = r0.indexOf(r2)     // Catch: java.lang.Exception -> L37
            r5 = -1
            if (r2 == r5) goto L33
            java.lang.String r0 = r0.substring(r4, r2)     // Catch: java.lang.Exception -> L37
            java.lang.String r2 = "UTF-8"
            java.lang.String r0 = java.net.URLDecoder.decode(r0, r2)     // Catch: java.lang.Exception -> L37
            android.net.Uri r0 = android.net.Uri.parse(r0)     // Catch: java.lang.Exception -> L37
            goto L35
        L33:
            r0 = r27
        L35:
            r8 = r0
            goto L3d
        L37:
            r0 = move-exception
            org.telegram.messenger.FileLog.m102e(r0)
        L3b:
            r8 = r27
        L3d:
            java.lang.String r0 = org.telegram.messenger.AndroidUtilities.getPath(r8)
            boolean r2 = org.telegram.messenger.BuildVars.NO_SCOPED_STORAGE
            if (r2 != 0) goto L48
            r10 = r0
            r11 = r10
            goto L60
        L48:
            if (r0 != 0) goto L5d
            java.lang.String r0 = r8.toString()
            java.lang.String r2 = "file"
            java.lang.String r2 = org.telegram.messenger.MediaController.copyFileToCache(r8, r2)
            if (r2 != 0) goto L5a
            r26.showAttachmentError()
            return
        L5a:
            r11 = r0
            r10 = r2
            goto L5f
        L5d:
            r10 = r0
            r11 = r10
        L5f:
            r3 = r4
        L60:
            r0 = 0
            r1.fillEditingMediaWithCaption(r0, r0)
            if (r3 == 0) goto L8b
            org.telegram.messenger.AccountInstance r5 = r26.getAccountInstance()
            r6 = 0
            r7 = 0
            r9 = 0
            r10 = 0
            long r11 = r1.dialog_id
            org.telegram.messenger.MessageObject r13 = r1.replyingMessageObject
            org.telegram.messenger.MessageObject r14 = r26.getThreadMessage()
            r15 = 0
            org.telegram.ui.ChatActivity$ReplyQuote r0 = r1.replyingQuote
            r16 = r0
            org.telegram.messenger.MessageObject r0 = r1.editingMessageObject
            r17 = r0
            r18 = 1
            r19 = 0
            r20 = 0
            r21 = 0
            org.telegram.messenger.SendMessagesHelper.prepareSendingDocument(r5, r6, r7, r8, r9, r10, r11, r13, r14, r15, r16, r17, r18, r19, r20, r21)
            goto Lb2
        L8b:
            org.telegram.messenger.AccountInstance r9 = r26.getAccountInstance()
            r12 = 0
            r13 = 0
            r14 = 0
            long r2 = r1.dialog_id
            r15 = r2
            org.telegram.messenger.MessageObject r0 = r1.replyingMessageObject
            r17 = r0
            org.telegram.messenger.MessageObject r18 = r26.getThreadMessage()
            r19 = 0
            org.telegram.ui.ChatActivity$ReplyQuote r0 = r1.replyingQuote
            r20 = r0
            org.telegram.messenger.MessageObject r0 = r1.editingMessageObject
            r21 = r0
            r22 = 1
            r23 = 0
            r24 = 0
            r25 = 0
            org.telegram.messenger.SendMessagesHelper.prepareSendingDocument(r9, r10, r11, r12, r13, r14, r15, r17, r18, r19, r20, r21, r22, r23, r24, r25)
        Lb2:
            r1.hideFieldPanel(r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.sendUriAsDocument(android.net.Uri):void");
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onActivityResultFragment(int i, int i2, Intent intent) {
        String str;
        if (i2 == -1) {
            int i3 = 0;
            if (i == IdFabric$RequestCode.FILE_SAVING_DIRECTORY) {
                Uri data = intent.getData();
                if (data == null || this.savingDocument == null) {
                    return;
                }
                if (!FileSavingHelper.isDirectoryAvailableForSaving(data)) {
                    showChooseAnotherDirectoryDialog();
                    return;
                } else if (this.savingDocument.localPath != null) {
                    FileSavingHelper.saveDocumentFileToCustomDirectory(new File(this.savingDocument.localPath), this.savingDocument, this.savingFileCustomName, data, false);
                    return;
                } else {
                    FileLoader.getInstance(this.currentAccount).loadAndSaveDocumentWithForcedFileName(this.savingFileCustomName, data, this.savingDocument, this.savingMessageObject, 1, 0);
                    return;
                }
            }
            ArrayList<Uri> arrayList = null;
            if (i == 0 || i == 2) {
                createChatAttachView();
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.getPhotoLayout().onActivityResultFragment(i, intent, this.currentPicturePath);
                }
                this.currentPicturePath = null;
            } else if (i == 1) {
                if (intent == null || intent.getData() == null) {
                    showAttachmentError();
                    return;
                }
                final Uri data2 = intent.getData();
                if (data2.toString().contains("video")) {
                    try {
                        str = AndroidUtilities.getPath(data2);
                    } catch (Exception e) {
                        FileLog.m102e(e);
                        str = null;
                    }
                    if (str == null) {
                        showAttachmentError();
                    }
                    if (this.paused) {
                        this.startVideoEdit = str;
                    } else {
                        openVideoEditor(str, null);
                    }
                } else {
                    MessageObject messageObject = this.editingMessageObject;
                    if ((messageObject == null && this.chatMode == 1) || (messageObject == null && isTemplatesChannel(true, true))) {
                        AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda341
                            @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                            public final void didSelectDate(boolean z, int i4, String str2) {
                                ChatActivity.this.lambda$onActivityResultFragment$177(data2, z, i4, str2);
                            }

                            @Override // org.telegram.p043ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                            public /* synthetic */ ArrayList getSelectedDialogs() {
                                return AlertsCreator.ScheduleDatePickerDelegate.CC.$default$getSelectedDialogs(this);
                            }
                        }, this.themeDelegate, this);
                    } else {
                        fillEditingMediaWithCaption(null, null);
                        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, data2, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.replyingQuote, null, null, null, null, 0, this.editingMessageObject, true, 0, null);
                    }
                }
                afterMessageSend();
            } else if (i == 21) {
                if (intent == null) {
                    showAttachmentError();
                    return;
                }
                if (intent.getData() != null) {
                    if (SharedConfig.isFilesSendingPreviewAndCaptionEnabled) {
                        arrayList = new ArrayList<>();
                        arrayList.add(intent.getData());
                    } else {
                        sendUriAsDocument(intent.getData());
                    }
                } else if (intent.getClipData() != null) {
                    ClipData clipData = intent.getClipData();
                    if (SharedConfig.isFilesSendingPreviewAndCaptionEnabled) {
                        ArrayList<Uri> arrayList2 = new ArrayList<>();
                        while (i3 < clipData.getItemCount()) {
                            arrayList2.add(clipData.getItemAt(i3).getUri());
                            i3++;
                        }
                        arrayList = arrayList2;
                    } else {
                        while (i3 < clipData.getItemCount()) {
                            sendUriAsDocument(clipData.getItemAt(i3).getUri());
                            i3++;
                        }
                    }
                } else {
                    showAttachmentError();
                }
                ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.dismiss();
                }
                afterMessageSend();
                if (arrayList != null) {
                    prepareMultipleFilesSending(arrayList);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onActivityResultFragment$177(Uri uri, boolean z, int i, String str) {
        fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.replyingQuote, null, null, null, null, 0, this.editingMessageObject, z, i, str);
    }

    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    public void saveSelfArgs(Bundle bundle) {
        String str = this.currentPicturePath;
        if (str != null) {
            bundle.putString("path", str);
        }
    }

    public void restoreSelfArgs(Bundle bundle) {
        this.currentPicturePath = bundle.getString("path");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSkeletonVisible() {
        if (this.justCreatedTopic || this.justCreatedChat || this.currentUser != null || this.chatListView == null || !SharedConfig.animationsEnabled() || !getLiteModeChat()) {
            return false;
        }
        int i = Integer.MAX_VALUE;
        int i2 = 0;
        for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
            i2 += this.chatListView.getChildAt(i3).getHeight();
            int top = this.chatListView.getChildAt(i3).getTop();
            if (top < i) {
                i = top;
            }
        }
        float f = i;
        if (f <= this.chatListViewPaddingTop) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        boolean[] zArr = this.endReached;
        boolean z = (!zArr[0] || (!(this.mergeDialogId == 0 || zArr[1]) || this.messages.isEmpty())) && this.loading && f > this.chatListViewPaddingTop && (!this.messages.isEmpty() ? i2 == 0 : !this.animateProgressViewTo);
        if (!z && this.startMessageAppearTransitionMs == 0) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        if (SharedConfig.getDevicePerformanceClass() != 0 && !this.fromPullingDownTransition && this.fragmentBeginToShow) {
            boolean z2 = z && this.startMessageAppearTransitionMs == 0;
            Drawable wallpaperDrawable = this.themeDelegate.getWallpaperDrawable();
            View view = this.fragmentView;
            if (view != null) {
                wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
            }
            if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
                MotionBackgroundDrawable motionBackgroundDrawable = (MotionBackgroundDrawable) wallpaperDrawable;
                if (motionBackgroundDrawable.isIndeterminateAnimation() != z2) {
                    if (!z2) {
                        motionBackgroundDrawable.generateNextGradient();
                    }
                    motionBackgroundDrawable.setIndeterminateAnimation(z2);
                    motionBackgroundDrawable.setIndeterminateSpeedScale(z2 ? 1.5f : 1.0f);
                    motionBackgroundDrawable.updateAnimation(true);
                } else if (z2) {
                    motionBackgroundDrawable.updateAnimation(false);
                }
            }
        }
        return z || (this.startMessageAppearTransitionMs != 0 && System.currentTimeMillis() - this.startMessageAppearTransitionMs <= 200);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkDispatchHideSkeletons(boolean z) {
        if (this.startMessageAppearTransitionMs == 0) {
            if (z && !this.messageSkeletons.isEmpty()) {
                this.startMessageAppearTransitionMs = System.currentTimeMillis();
            } else {
                this.startMessageAppearTransitionMs = 1L;
            }
            isSkeletonVisible();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
    }

    private void removeUnreadPlane(boolean z) {
        MessageObject messageObject = this.unreadMessageObject;
        if (messageObject != null) {
            if (z) {
                boolean[] zArr = this.forwardEndReached;
                zArr[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(messageObject);
            this.unreadMessageObject = null;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 3615
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:59)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int r61, int r62, java.lang.Object... r63) {
        /*
            Method dump skipped, instructions count: 16319
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$178() {
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$179() {
        createEmptyView();
        if (!this.fragmentBeginToShow) {
            this.chatListView.setAnimateEmptyView(false, 0);
            this.chatListView.setEmptyView(this.emptyViewContainer);
            this.chatListView.setAnimateEmptyView(true, 1);
            return;
        }
        this.chatListView.setEmptyView(this.emptyViewContainer);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$180() {
        resumeDelayedFragmentAnimation();
        AndroidUtilities.cancelRunOnUIThread(this.fragmentTransitionRunnable);
        this.fragmentTransitionRunnable.run();
        getNotificationCenter().runDelayedNotifications();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$181() {
        this.chatActivityEnterView.setFieldText("");
        afterMessageSend();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$182(MessageObject messageObject, int i) {
        this.delayedReadRunnable = null;
        messageObject.messageOwner.replies.read_max_id = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$184(Object[] objArr, long j) {
        MessageObject messageObject = this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(((Integer) objArr[1]).intValue());
        if (messageObject != null) {
            messageObject.messageOwner.media.extended_media = (TLRPC$MessageExtendedMedia) objArr[2];
            messageObject.forceUpdate = true;
            messageObject.setType();
            updateMessageAnimated(messageObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$185(Object[] objArr, long j) {
        MessageObject messageObject = this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(((Integer) objArr[1]).intValue());
        if (messageObject != null) {
            MessageObject.updateReactions(messageObject.messageOwner, (TLRPC$TL_messageReactions) objArr[2]);
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
            updateMessageAnimated(messageObject, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$186() {
        updateMessagesVisiblePart(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$187(ArrayList arrayList, int i) {
        replaceMessageObjects(arrayList, i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$didReceivedNotification$188(Integer num, Integer num2) {
        return num2.compareTo(num);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didReceivedNotification$189(Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo, boolean z) {
        if (themeAccent != null) {
            Theme.ThemeAccent accent = themeInfo.getAccent(false);
            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, Integer.valueOf(themeAccent.f1786id));
            if (z) {
                Theme.deleteThemeAccent(themeInfo, accent, true);
                return;
            }
            return;
        }
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, -1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$190(int i) {
        playReactionAnimation(Integer.valueOf(i));
    }

    public void showQuoteMessageUpdate() {
        if (this.quoteMessageUpdateAlert != null) {
            return;
        }
        this.quoteMessageUpdateAlert = new AlertDialog.Builder(getContext(), getResourceProvider()).setTitle(LocaleController.getString(C3632R.string.UpdatedQuoteTitle)).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(C3632R.string.UpdatedQuoteMessage, this.replyingMessageObject != null ? getMessagesController().getFullName(this.replyingMessageObject.getSenderId()) : ""))).setPositiveButton(LocaleController.getString(C3632R.string.Edit), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda35
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$191(dialogInterface, i);
            }
        }).setNegativeButton(LocaleController.getString(C3632R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda30
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$192(dialogInterface, i);
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda58
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showQuoteMessageUpdate$193(dialogInterface);
            }
        }).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$191(DialogInterface dialogInterface, int i) {
        MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
        if (messagePreviewParams == null || messagePreviewParams.quote == null) {
            return;
        }
        openForwardingPreview(0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$192(DialogInterface dialogInterface, int i) {
        hideFieldPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showQuoteMessageUpdate$193(DialogInterface dialogInterface) {
        this.quoteMessageUpdateAlert = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getScrollingOffsetForView(View view) {
        return (this.chatListView.getMeasuredHeight() - view.getBottom()) - this.chatListView.getPaddingBottom();
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x010f  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0151 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private boolean updateMessageTranslation(org.telegram.messenger.MessageObject r15) {
        /*
            Method dump skipped, instructions count: 343
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.updateMessageTranslation(org.telegram.messenger.MessageObject):boolean");
    }

    /* JADX WARN: Removed duplicated region for block: B:20:0x0054  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0071 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private boolean updateMessagesReplyTranslation(java.util.ArrayList<java.lang.Integer> r12, org.telegram.messenger.MessageObject r13) {
        /*
            r11 = this;
            r0 = 0
            r1 = r0
            r2 = r1
        L3:
            org.telegram.ui.Components.RecyclerListView r3 = r11.chatListView
            int r3 = r3.getChildCount()
            if (r1 >= r3) goto L74
            org.telegram.ui.Components.RecyclerListView r3 = r11.chatListView
            android.view.View r3 = r3.getChildAt(r1)
            boolean r4 = r3 instanceof org.telegram.p043ui.Cells.ChatMessageCell
            r5 = 1
            if (r4 == 0) goto L71
            r4 = r3
            org.telegram.ui.Cells.ChatMessageCell r4 = (org.telegram.p043ui.Cells.ChatMessageCell) r4
            org.telegram.messenger.MessageObject r6 = r4.getMessageObject()
            if (r6 == 0) goto L51
            int r7 = r6.getId()
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            boolean r7 = r12.contains(r7)
            if (r7 == 0) goto L51
            org.telegram.messenger.MessageObject r7 = r6.replyMessageObject
            if (r7 == 0) goto L51
            int r7 = r7.getId()
            int r8 = r13.getId()
            if (r7 != r8) goto L51
            org.telegram.messenger.MessageObject r7 = r6.replyMessageObject
            org.telegram.tgnet.TLRPC$Message r8 = r7.messageOwner
            org.telegram.tgnet.TLRPC$Message r9 = r13.messageOwner
            org.telegram.tgnet.TLRPC$TL_textWithEntities r10 = r9.translatedText
            r8.translatedText = r10
            java.lang.String r9 = r9.translatedToLanguage
            r8.translatedToLanguage = r9
            boolean r7 = r7.updateTranslation(r0)
            if (r7 == 0) goto L51
            r7 = r5
            goto L52
        L51:
            r7 = r0
        L52:
            if (r7 == 0) goto L71
            r6.forceUpdate = r5
            org.telegram.messenger.MessageObject$GroupedMessages r2 = r4.getCurrentMessagesGroup()
            boolean r7 = r4.isPinnedBottom()
            boolean r8 = r4.isPinnedTop()
            r4.setMessageObject(r6, r2, r7, r8)
            org.telegram.ui.ChatActivity$ChatActivityAdapter r2 = r11.chatAdapter
            org.telegram.ui.Components.RecyclerListView r4 = r11.chatListView
            int r3 = r4.getChildAdapterPosition(r3)
            r2.updateRowAtPosition(r3)
            r2 = r5
        L71:
            int r1 = r1 + 1
            goto L3
        L74:
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.updateMessagesReplyTranslation(java.util.ArrayList, org.telegram.messenger.MessageObject):boolean");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTranslation(boolean z) {
        if (System.currentTimeMillis() - this.lastTranslationCheck > 1000) {
            z = true;
        }
        AndroidUtilities.cancelRunOnUIThread(this.checkTranslationRunnable);
        AndroidUtilities.runOnUIThread(this.checkTranslationRunnable, z ? 0L : 150L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$194() {
        this.lastTranslationCheck = System.currentTimeMillis();
        if (this.chatListView != null && this.chatAdapter != null) {
            int i = Integer.MAX_VALUE;
            int i2 = Integer.MIN_VALUE;
            for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getCurrentMessagesGroup() != null) {
                        for (int i4 = 0; i4 < chatMessageCell.getCurrentMessagesGroup().messages.size(); i4++) {
                            int id = chatMessageCell.getCurrentMessagesGroup().messages.get(i4).getId();
                            i = Math.min(i, id);
                            i2 = Math.max(i2, id);
                        }
                    } else if (chatMessageCell.getMessageObject() != null) {
                        int id2 = chatMessageCell.getMessageObject().getId();
                        i = Math.min(i, id2);
                        i2 = Math.max(i2, id2);
                    }
                }
            }
            if (i <= i2) {
                ArrayList arrayList = new ArrayList();
                for (int i5 = 0; i5 < this.messages.size(); i5++) {
                    MessageObject messageObject = this.messages.get(i5);
                    MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                    if (groupedMessages != null) {
                        if (!arrayList.contains(Long.valueOf(groupedMessages.groupId))) {
                            for (int i6 = 0; i6 < groupedMessages.messages.size(); i6++) {
                                MessageObject messageObject2 = groupedMessages.messages.get(i6);
                                if (messageObject2 != null) {
                                    int id3 = messageObject2.getId();
                                    getMessagesController().getTranslateController().checkTranslation(messageObject2, id3 >= i + (-7) && id3 <= i2 + 7);
                                }
                            }
                            arrayList.add(Long.valueOf(groupedMessages.groupId));
                        }
                    } else {
                        int id4 = messageObject.getId();
                        getMessagesController().getTranslateController().checkTranslation(messageObject, id4 >= i + (-7) && id4 <= i2 + 7);
                    }
                }
            }
        }
        if (this.currentPinnedMessageId > 0 && this.pinnedMessageObjects != null) {
            getMessagesController().getTranslateController().checkTranslation(this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)), true);
        }
        updateTranslateItemVisibility();
    }

    private void checkSecretMessageForLocation(MessageObject messageObject) {
        if (messageObject.type != 4 || this.locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
            return;
        }
        this.locationAlertShown = true;
        AlertsCreator.showSecretLocationAlert(getParentActivity(), this.currentAccount, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkSecretMessageForLocation$195();
            }
        }, true, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSecretMessageForLocation$195() {
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                if (chatMessageCell.getMessageObject().type == 4) {
                    chatMessageCell.forceResetMessageObject();
                }
            }
        }
    }

    private void loadSendAsPeers(boolean z) {
        TLRPC$Chat tLRPC$Chat;
        if (this.sendAsPeersObj != null || (tLRPC$Chat = this.currentChat) == null || !ChatObject.canSendAsPeers(tLRPC$Chat) || this.chatActivityEnterView == null) {
            return;
        }
        TLRPC$TL_channels_sendAsPeers sendAsPeers = getMessagesController().getSendAsPeers(this.dialog_id);
        this.sendAsPeersObj = sendAsPeers;
        if (sendAsPeers != null) {
            this.chatActivityEnterView.updateSendAsButton(z);
        }
    }

    private void addSponsoredMessages(boolean z) {
        MessagesController.SponsoredMessagesInfo sponsoredMessages;
        if (!this.sponsoredMessagesAdded && this.chatMode == 0 && ChatObject.isChannel(this.currentChat)) {
            if (!this.forwardEndReached[0] || getUserConfig().isPremium() || (sponsoredMessages = getMessagesController().getSponsoredMessages(this.dialog_id)) == null || sponsoredMessages.messages == null) {
                return;
            }
            for (int i = 0; i < sponsoredMessages.messages.size(); i++) {
                MessageObject messageObject = sponsoredMessages.messages.get(i);
                messageObject.resetLayout();
                long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                int i2 = messageObject.sponsoredChannelPost;
                if (i2 == 0) {
                    i2 = 0;
                }
                getMessagesController().ensureMessagesLoaded(peerId, i2, null);
            }
            this.sponsoredMessagesAdded = true;
            Integer num = sponsoredMessages.posts_between;
            this.sponsoredMessagesPostsBetween = num != null ? num.intValue() : 0;
            ArrayList<MessageObject> arrayList = this.notPushedSponsoredMessages;
            if (arrayList != null) {
                arrayList.clear();
            }
            processNewMessages(sponsoredMessages.messages);
        }
    }

    private void checkGroupCallJoin(boolean z) {
        TLRPC$ChatFull tLRPC$ChatFull;
        String str;
        ChatObject.Call call = this.groupCall;
        if (call == null || (str = this.voiceChatHash) == null || !this.openAnimationEnded) {
            if (this.voiceChatHash != null && z && (tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.call == null && this.fragmentView != null && getParentActivity() != null) {
                BulletinFactory.m65of(this).createSimpleBulletin(C3632R.raw.linkbroken, LocaleController.getString("LinkHashExpired", C3632R.string.LinkHashExpired)).show();
                this.voiceChatHash = null;
            }
            this.lastCallCheckFromServer = !this.openAnimationEnded;
            return;
        }
        VoIPHelper.startCall(this.currentChat, null, str, this.createGroupCall, Boolean.valueOf(!call.call.rtmp_stream), getParentActivity(), this, getAccountInstance());
        this.voiceChatHash = null;
    }

    private void checkWaitingForReplies() {
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        int i;
        MessageObject messageObject;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        int indexOf;
        if (this.waitingForReplies.size() == 0) {
            return;
        }
        int size = this.waitingForReplies.size();
        ArrayList arrayList = null;
        LongSparseArray longSparseArray = null;
        ArrayList arrayList2 = null;
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject valueAt = this.waitingForReplies.valueAt(i2);
            if (valueAt.replyMessageObject != null) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(Integer.valueOf(this.waitingForReplies.keyAt(i2)));
                if (!(valueAt.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && (tLRPC$MessageFwdHeader = valueAt.replyMessageObject.messageOwner.fwd_from) != null && MessageObject.getPeerId(tLRPC$MessageFwdHeader.saved_from_peer) == this.dialog_id && (i = valueAt.replyMessageObject.messageOwner.fwd_from.channel_post) != 0 && (messageObject = this.messagesDict[0].get(i)) != null && (tLRPC$MessageReplies = messageObject.messageOwner.replies) != null) {
                    tLRPC$MessageReplies.replies++;
                    messageObject.animateComments = true;
                    TLRPC$Message tLRPC$Message = valueAt.messageOwner;
                    TLRPC$Peer tLRPC$Peer = tLRPC$Message.from_id;
                    if (tLRPC$Peer == null) {
                        tLRPC$Peer = tLRPC$Message.peer_id;
                    }
                    int size2 = tLRPC$MessageReplies.recent_repliers.size();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= size2) {
                            break;
                        } else if (MessageObject.getPeerId(messageObject.messageOwner.replies.recent_repliers.get(i3)) == MessageObject.getPeerId(tLRPC$Peer)) {
                            messageObject.messageOwner.replies.recent_repliers.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                    messageObject.messageOwner.replies.recent_repliers.add(0, tLRPC$Peer);
                    if (!valueAt.isOut()) {
                        messageObject.messageOwner.replies.max_id = valueAt.getId();
                    }
                    MessagesStorage messagesStorage = getMessagesStorage();
                    long j = this.currentChat.f1602id;
                    int id = messageObject.getId();
                    TLRPC$MessageReplies tLRPC$MessageReplies2 = messageObject.messageOwner.replies;
                    messagesStorage.updateRepliesCount(j, id, tLRPC$MessageReplies2.recent_repliers, tLRPC$MessageReplies2.max_id, 1);
                    if (messageObject.hasValidGroupId()) {
                        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            int size3 = groupedMessages.messages.size();
                            for (int i4 = 0; i4 < size3; i4++) {
                                groupedMessages.messages.get(i4).animateComments = true;
                            }
                        }
                    } else if (this.chatAdapter != null && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                        }
                        arrayList2.add(Integer.valueOf(indexOf + this.chatAdapter.messagesStartRow));
                    }
                }
            }
        }
        if (arrayList != null) {
            int size4 = arrayList.size();
            for (int i5 = 0; i5 < size4; i5++) {
                this.waitingForReplies.remove(((Integer) arrayList.get(i5)).intValue());
            }
        }
        if (this.chatAdapter != null) {
            if (longSparseArray != null) {
                int size5 = longSparseArray.size();
                for (int i6 = 0; i6 < size5; i6++) {
                    MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i6);
                    ArrayList<MessageObject> arrayList3 = groupedMessages2.messages;
                    int indexOf2 = this.messages.indexOf(arrayList3.get(arrayList3.size() - 1));
                    if (indexOf2 >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf2 + chatActivityAdapter.messagesStartRow, groupedMessages2.messages.size());
                    }
                }
            }
            if (arrayList2 != null) {
                int size6 = arrayList2.size();
                for (int i7 = 0; i7 < size6; i7++) {
                    this.chatAdapter.notifyItemChanged(((Integer) arrayList2.get(i7)).intValue());
                }
            }
        }
    }

    private void clearHistory(boolean z, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        TLRPC$User tLRPC$User;
        if (z) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("clear history by overwrite firstLoading=" + this.firstLoading + " minMessage=" + this.minMessageId[0] + " topMessage=" + tLRPC$TL_updates_channelDifferenceTooLong.dialog.top_message);
            }
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i = tLRPC$Dialog.top_message;
            int[] iArr = this.minMessageId;
            if (i > iArr[0]) {
                this.createUnreadMessageAfterId = Math.max(iArr[0] + 1, tLRPC$Dialog.read_inbox_max_id);
            }
            this.forwardEndReached[0] = false;
            this.hideForwardEndReached = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null && chatActivityAdapter.loadingDownRow < 0) {
                this.chatAdapter.notifyItemInserted(0);
            }
            TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i2 = tLRPC$Dialog2.unread_count;
            this.newUnreadMessageCount = i2;
            this.newMentionsCount = tLRPC$Dialog2.unread_mentions_count;
            if (this.prevSetUnreadCount != i2) {
                CounterView counterView = this.pagedownButtonCounter;
                if (counterView != null) {
                    counterView.setCount(i2, this.openAnimationEnded);
                }
                this.prevSetUnreadCount = this.newUnreadMessageCount;
                updatePagedownButtonVisibility(true);
            }
            int i3 = this.newMentionsCount;
            int i4 = tLRPC$TL_updates_channelDifferenceTooLong.dialog.unread_mentions_count;
            if (i3 != i4) {
                this.newMentionsCount = i4;
                if (i4 <= 0) {
                    this.newMentionsCount = 0;
                    this.hasAllMentionsLocal = true;
                    showMentionDownButton(false, true);
                } else {
                    SimpleTextView simpleTextView = this.mentiondownButtonCounter;
                    if (simpleTextView != null) {
                        simpleTextView.setText(String.format("%d", Integer.valueOf(i4)));
                    }
                    showMentionDownButton(true, true);
                }
            }
            checkScrollForLoad(false);
            return;
        }
        this.messages.clear();
        this.waitingForLoad.clear();
        this.messagesByDays.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        for (int i5 = 1; i5 >= 0; i5--) {
            this.messagesDict[i5].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i5] = Integer.MAX_VALUE;
                this.minMessageId[i5] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i5] = Integer.MIN_VALUE;
                this.minMessageId[i5] = Integer.MAX_VALUE;
            }
            this.maxDate[i5] = Integer.MIN_VALUE;
            this.minDate[i5] = 0;
            this.selectedMessagesIds[i5].clear();
            this.selectedMessagesCanCopyIds[i5].clear();
            this.selectedMessagesCanStarIds[i5].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        if (this.botButtons != null) {
            this.botButtons = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setButtons(null, false);
            }
        }
        if (this.progressView != null) {
            showProgressView(false);
            createEmptyView();
            this.chatListView.setEmptyView(this.emptyViewContainer);
        }
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
        if (this.currentEncryptedChat == null && (tLRPC$User = this.currentUser) != null && tLRPC$User.bot && this.botUser == null) {
            this.botUser = "";
            lambda$didReceivedNotification$183();
        }
    }

    public boolean processSwitchButton(TLRPC$TL_keyboardButtonSwitchInline tLRPC$TL_keyboardButtonSwitchInline) {
        if (this.inlineReturn == 0 || tLRPC$TL_keyboardButtonSwitchInline.same_peer || this.parentLayout == null) {
            return false;
        }
        String str = "@" + this.currentUser.username + " " + tLRPC$TL_keyboardButtonSwitchInline.query;
        if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(str);
        } else {
            getMediaDataController().saveDraft(this.inlineReturn, 0, str, null, null, false);
            if (this.parentLayout.getFragmentStack().size() > 1) {
                BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 2);
                if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.inlineReturn) {
                    finishFragment();
                } else {
                    Bundle bundle = new Bundle();
                    if (DialogObject.isEncryptedDialog(this.inlineReturn)) {
                        bundle.putInt("enc_id", DialogObject.getEncryptedChatId(this.inlineReturn));
                    } else if (DialogObject.isUserDialog(this.inlineReturn)) {
                        bundle.putLong("user_id", this.inlineReturn);
                    } else {
                        bundle.putLong("chat_id", -this.inlineReturn);
                    }
                    addToPulledDialogsMyself();
                    presentFragment(new ChatActivity(bundle), true);
                }
            }
        }
        return true;
    }

    private void showGigagroupConvertAlert() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat.creator && tLRPC$Chat.megagroup && !tLRPC$Chat.gigagroup && tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda180
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$198();
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$198() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat.creator && tLRPC$Chat.megagroup && !tLRPC$Chat.gigagroup && tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            int i = notificationsSettings.getInt("group_convert_time", 0);
            int i2 = BuildVars.DEBUG_PRIVATE_VERSION ? 120 : 604800;
            int currentTime = getConnectionsManager().getCurrentTime();
            if (Math.abs(currentTime - i) < i2 || this.visibleDialog != null || getParentActivity() == null) {
                return;
            }
            notificationsSettings.edit().putInt("group_convert_time", currentTime).commit();
            showDialog(AlertsCreator.createGigagroupConvertAlert(getParentActivity(), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda31
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$196(dialogInterface, i3);
                }
            }, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda29
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$197(dialogInterface, i3);
                }
            }).create());
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$101  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass101 extends GigagroupConvertAlert {
        AnonymousClass101(Context context, BaseFragment baseFragment) {
            super(context, baseFragment);
        }

        @Override // org.telegram.p043ui.Components.GigagroupConvertAlert
        protected void onCovert() {
            MessagesController messagesController = ChatActivity.this.getMessagesController();
            Activity parentActivity = ChatActivity.this.getParentActivity();
            ChatActivity chatActivity = ChatActivity.this;
            messagesController.convertToGigaGroup(parentActivity, chatActivity.currentChat, chatActivity, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$101$$ExternalSyntheticLambda0
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z) {
                    ChatActivity.AnonymousClass101.this.lambda$onCovert$0(z);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCovert$0(boolean z) {
            if (z) {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                ChatActivity.this.undoView.showWithAction(0L, 76, (Runnable) null);
            }
        }

        @Override // org.telegram.p043ui.Components.GigagroupConvertAlert
        protected void onCancel() {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(0L, 75, (Runnable) null);
            ChatActivity.this.getMessagesController().removeSuggestion(ChatActivity.this.dialog_id, "CONVERT_GIGAGROUP");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$196(DialogInterface dialogInterface, int i) {
        showDialog(new AnonymousClass101(getParentActivity(), this));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$197(DialogInterface dialogInterface, int i) {
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(0L, 75, (Runnable) null);
    }

    private void addReplyMessageOwner(MessageObject messageObject, Integer num) {
        MessageObject messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 == null) {
            return;
        }
        int id = messageObject2.getId();
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(id);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.replyMessageOwners.put(id, arrayList);
        }
        int id2 = messageObject.getId();
        if (!arrayList.contains(Integer.valueOf(id2))) {
            arrayList.add(Integer.valueOf(id2));
        }
        if (num.intValue() != 0) {
            arrayList.remove(num);
        }
    }

    private void updateReplyMessageOwners(int i, MessageObject messageObject) {
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(i);
        if (arrayList == null) {
            return;
        }
        MessageObject messageObject2 = messageObject == null ? new MessageObject(this.currentAccount, new TLRPC$TL_messageEmpty(), false, false) : null;
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject messageObject3 = this.messagesDict[0].get(arrayList.get(i2).intValue());
            if (messageObject3 != null) {
                if (messageObject == null) {
                    messageObject3.replyMessageObject = messageObject2;
                } else {
                    messageObject3.replyMessageObject = messageObject;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (chatActivityAdapter != null) {
                    chatActivityAdapter.updateRowWithMessageObject(messageObject3, true, false);
                }
            }
        }
        if (messageObject == null) {
            this.replyMessageOwners.remove(i);
        }
    }

    private void rotateMotionBackgroundDrawable() {
        MotionBackgroundDrawable motionBackgroundDrawable;
        ThemeDelegate themeDelegate = this.themeDelegate;
        if (themeDelegate == null) {
            return;
        }
        Drawable wallpaperDrawable = themeDelegate.getWallpaperDrawable();
        View view = this.fragmentView;
        if (view != null) {
            wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
        }
        if (wallpaperDrawable instanceof ChatBackgroundDrawable) {
            wallpaperDrawable = ((ChatBackgroundDrawable) wallpaperDrawable).getDrawable(true);
        }
        if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
            ((MotionBackgroundDrawable) wallpaperDrawable).switchToNextPosition();
        }
        Drawable themedDrawable = getThemedDrawable("drawableMsgOut");
        if (!(themedDrawable instanceof Theme.MessageDrawable) || (motionBackgroundDrawable = ((Theme.MessageDrawable) themedDrawable).getMotionBackgroundDrawable()) == null) {
            return;
        }
        motionBackgroundDrawable.switchToNextPosition();
    }

    /* JADX WARN: Code restructure failed: missing block: B:360:0x05e3, code lost:
        if (org.telegram.messenger.MessageObject.getSavedDialogId(getUserConfig().getClientUserId(), r15.messageOwner) != r30.threadMessageId) goto L417;
     */
    /* JADX WARN: Code restructure failed: missing block: B:369:0x0612, code lost:
        if (getTopicId() != org.telegram.messenger.MessageObject.getTopicId(r30.currentAccount, r15.messageOwner, org.telegram.messenger.ChatObject.isForum(r30.currentChat))) goto L805;
     */
    /* JADX WARN: Code restructure failed: missing block: B:375:0x062b, code lost:
        if (r30.threadMessageId != r15.getReplyMsgId()) goto L418;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0243  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0285  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x030d  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0312  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x0326  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x033a  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x0406  */
    /* JADX WARN: Removed duplicated region for block: B:234:0x0414  */
    /* JADX WARN: Removed duplicated region for block: B:390:0x067e  */
    /* JADX WARN: Removed duplicated region for block: B:408:0x06e4  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x071b  */
    /* JADX WARN: Removed duplicated region for block: B:455:0x0763  */
    /* JADX WARN: Removed duplicated region for block: B:488:0x07d7  */
    /* JADX WARN: Removed duplicated region for block: B:495:0x0811  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x0816  */
    /* JADX WARN: Removed duplicated region for block: B:506:0x083c  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x08e2  */
    /* JADX WARN: Removed duplicated region for block: B:548:0x08e8  */
    /* JADX WARN: Removed duplicated region for block: B:579:0x0957  */
    /* JADX WARN: Removed duplicated region for block: B:598:0x09b0  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0168  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0176  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x018f  */
    /* JADX WARN: Removed duplicated region for block: B:864:0x0410 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:879:0x0997 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r3v135 */
    /* JADX WARN: Type inference failed for: r3v136 */
    /* JADX WARN: Type inference failed for: r3v137 */
    /* JADX WARN: Type inference failed for: r3v4 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /* JADX WARN: Type inference failed for: r3v61 */
    /* JADX WARN: Type inference failed for: r3v62, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r3v69 */
    /* JADX WARN: Type inference failed for: r3v7 */
    /* JADX WARN: Type inference failed for: r3v70 */
    /* JADX WARN: Type inference failed for: r3v8 */
    /* JADX WARN: Type inference failed for: r4v65 */
    /* JADX WARN: Type inference failed for: r4v67 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void processNewMessages(java.util.ArrayList<org.telegram.messenger.MessageObject> r31) {
        /*
            Method dump skipped, instructions count: 3709
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.processNewMessages(java.util.ArrayList):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processNewMessages$199(int i) {
        scrollToMessageId(i, 0, false, 0, true, 0);
    }

    private int getStableIdForDateObject(int i) {
        int i2 = this.dateObjectsStableIds.get(i, -1);
        if (i2 == -1) {
            int i3 = lastStableId;
            lastStableId = i3 + 1;
            this.dateObjectsStableIds.put(i, i3);
            return i3;
        }
        return i2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void saveScrollPosition() {
        GridLayoutManagerFixed gridLayoutManagerFixed;
        if (this.chatListView == null || (gridLayoutManagerFixed = this.chatLayoutManager) == null || gridLayoutManagerFixed.hasPendingScrollPosition()) {
            return;
        }
        MessageObject messageObject = null;
        int i = 0;
        while (true) {
            if (i >= this.chatListView.getChildCount()) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                messageObject = ((ChatMessageCell) childAt).getMessageObject();
                getScrollingOffsetForView(childAt);
                break;
            } else if (childAt instanceof ChatActionCell) {
                messageObject = ((ChatActionCell) childAt).getMessageObject();
                getScrollingOffsetForView(childAt);
                break;
            } else {
                i++;
            }
        }
        if (messageObject != null) {
            this.messages.indexOf(messageObject);
        }
    }

    private int getSponsoredMessagesCount() {
        int i = 0;
        while (i < this.messages.size() && this.messages.get(i).isSponsored()) {
            i++;
        }
        return i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x0100, code lost:
        if (r9 == r43.groupedMessagesMap.get(r8.getGroupId())) goto L41;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:103:0x01bb  */
    /* JADX WARN: Removed duplicated region for block: B:106:0x01c7  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x024e  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x028f  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x02aa  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x02dc  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x02e3  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x02f2  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x02f9  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0339  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x0346  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x03b5  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x0480  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x0483  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x050d  */
    /* JADX WARN: Removed duplicated region for block: B:254:0x0526  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0153  */
    /* JADX WARN: Type inference failed for: r9v20 */
    /* JADX WARN: Type inference failed for: r9v21 */
    /* JADX WARN: Type inference failed for: r9v7 */
    /* JADX WARN: Type inference failed for: r9v8, types: [boolean, int] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void processDeletedMessages(java.util.ArrayList<java.lang.Integer> r44, long r45, boolean r47) {
        /*
            Method dump skipped, instructions count: 1326
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.processDeletedMessages(java.util.ArrayList, long, boolean):void");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r9v24 */
    /* JADX WARN: Type inference failed for: r9v25, types: [org.telegram.tgnet.tl.TL_stories$StoryItem] */
    private void replaceMessageObjects(ArrayList<MessageObject> arrayList, int i, boolean z) {
        ChatActivityAdapter chatActivityAdapter;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int indexOf;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        MessageObject messageObject;
        TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage;
        TLRPC$WebPage tLRPC$WebPage;
        TL_stories$StoryItem tL_stories$StoryItem;
        TLRPC$User tLRPC$User = null;
        LongSparseArray longSparseArray = null;
        int i3 = 0;
        while (i3 < arrayList.size()) {
            MessageObject messageObject2 = arrayList.get(i3);
            if (this.pinnedMessageObjects.get(Integer.valueOf(messageObject2.getId())) != null) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
            }
            MessageObject messageObject3 = this.messagesDict[i].get(messageObject2.getId());
            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId()))) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
                if (messageObject2.getId() == this.currentPinnedMessageId) {
                    updatePinnedMessageView(true);
                }
            }
            if (i == 0 && this.repliesMessagesDict.indexOfKey(messageObject2.getId()) >= 0) {
                this.repliesMessagesDict.put(messageObject2.getId(), messageObject2);
            }
            if (messageObject3 != null && (!z || messageObject3.messageOwner.date == messageObject2.messageOwner.date)) {
                if (z) {
                    arrayList.remove(i3);
                    i3--;
                }
                addToPolls(messageObject2, messageObject3);
                if (messageObject2.type >= 0) {
                    MessageObject messageObject4 = messageObject3.replyMessageObject;
                    if (messageObject4 != null) {
                        messageObject2.replyMessageObject = messageObject4;
                        TLRPC$MessageAction tLRPC$MessageAction = messageObject2.messageOwner.action;
                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore) {
                            messageObject2.generateGameMessageText(tLRPC$User);
                        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) {
                            messageObject2.generatePaymentSentMessageText(tLRPC$User);
                        }
                    }
                    if (messageObject3.isWebpage() && messageObject2.isWebpage() && (tLRPC$WebPage = (tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) MessageObject.getMedia(messageObject3.messageOwner)).webpage) != null && "telegram_story".equals(tLRPC$WebPage.type)) {
                        int i4 = 0;
                        while (true) {
                            if (i4 >= tLRPC$TL_messageMediaWebPage.webpage.attributes.size()) {
                                tL_stories$StoryItem = tLRPC$User;
                                break;
                            }
                            TLRPC$WebPageAttribute tLRPC$WebPageAttribute = tLRPC$TL_messageMediaWebPage.webpage.attributes.get(i4);
                            if (tLRPC$WebPageAttribute instanceof TLRPC$TL_webPageAttributeStory) {
                                tL_stories$StoryItem = ((TLRPC$TL_webPageAttributeStory) tLRPC$WebPageAttribute).storyItem;
                                break;
                            }
                            i4++;
                        }
                        if (tL_stories$StoryItem != 0) {
                            TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage2 = (TLRPC$TL_messageMediaWebPage) MessageObject.getMedia(messageObject2.messageOwner);
                            int i5 = 0;
                            while (true) {
                                if (i5 >= tLRPC$TL_messageMediaWebPage2.webpage.attributes.size()) {
                                    break;
                                }
                                TLRPC$WebPageAttribute tLRPC$WebPageAttribute2 = tLRPC$TL_messageMediaWebPage2.webpage.attributes.get(i5);
                                if (tLRPC$WebPageAttribute2 instanceof TLRPC$TL_webPageAttributeStory) {
                                    TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$WebPageAttribute2;
                                    if (!(tLRPC$TL_webPageAttributeStory.storyItem instanceof TL_stories$TL_storyItem)) {
                                        tLRPC$TL_webPageAttributeStory.storyItem = tL_stories$StoryItem;
                                    }
                                } else {
                                    i5++;
                                }
                            }
                        }
                    }
                    if (!messageObject3.isEditing()) {
                        if (messageObject3.getFileName().equals(messageObject2.getFileName())) {
                            messageObject2.messageOwner.attachPath = messageObject3.messageOwner.attachPath;
                            messageObject2.attachPathExists = messageObject3.attachPathExists;
                            messageObject2.mediaExists = messageObject3.mediaExists;
                        } else {
                            messageObject2.checkMediaExistance();
                        }
                    }
                    this.messagesDict[i].put(messageObject3.getId(), messageObject2);
                } else {
                    this.messagesDict[i].remove(messageObject3.getId());
                }
                int indexOf2 = this.messages.indexOf(messageObject3);
                if (indexOf2 >= 0) {
                    ArrayList<MessageObject> arrayList3 = this.messagesByDays.get(messageObject3.dateKey);
                    int indexOf3 = arrayList3 != null ? arrayList3.indexOf(messageObject3) : -1;
                    if (messageObject3.getGroupId() != 0 && (groupedMessages = this.groupedMessagesMap.get(messageObject3.getGroupId())) != null && (indexOf = groupedMessages.messages.indexOf(messageObject3)) >= 0) {
                        if (messageObject3.getGroupId() != messageObject2.getGroupId()) {
                            this.groupedMessagesMap.put(messageObject2.getGroupId(), groupedMessages);
                        }
                        if (!messageObject2.isMusic() && !messageObject2.isDocument() && ((arrayList2 = messageObject2.photoThumbs) == null || arrayList2.isEmpty())) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            if (indexOf <= 0 || indexOf >= groupedMessages.messages.size() - 1) {
                                messageObject = messageObject3;
                            } else {
                                MessageObject.GroupedMessages groupedMessages2 = new MessageObject.GroupedMessages();
                                groupedMessages2.reversed = this.reversed;
                                messageObject = messageObject3;
                                groupedMessages2.groupId = Utilities.random.nextLong();
                                ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                                ArrayList<MessageObject> arrayList5 = groupedMessages.messages;
                                int i6 = indexOf + 1;
                                arrayList4.addAll(arrayList5.subList(i6, arrayList5.size()));
                                for (int i7 = 0; i7 < groupedMessages2.messages.size(); i7++) {
                                    groupedMessages2.messages.get(i7).localGroupId = groupedMessages2.groupId;
                                    groupedMessages.messages.remove(i6);
                                }
                                longSparseArray.put(groupedMessages2.groupId, groupedMessages2);
                                this.groupedMessagesMap.put(groupedMessages2.groupId, groupedMessages2);
                            }
                            groupedMessages.messages.remove(indexOf);
                            messageObject3 = messageObject;
                        } else {
                            groupedMessages.messages.set(indexOf, messageObject2);
                            messageObject3 = messageObject3;
                            MessageObject.GroupedMessagePosition remove = groupedMessages.positions.remove(messageObject3);
                            if (remove != null) {
                                groupedMessages.positions.put(messageObject2, remove);
                            }
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                        }
                    }
                    if (this.chatMode == 3) {
                        messageObject2.isSaved = true;
                    }
                    if (messageObject2.type >= 0) {
                        messageObject2.copyStableParams(messageObject3);
                        this.messages.set(indexOf2, messageObject2);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        if (chatActivityAdapter2 != null) {
                            chatActivityAdapter2.updateRowAtPosition(chatActivityAdapter2.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.set(indexOf3, messageObject2);
                        }
                    } else {
                        this.messages.remove(indexOf2);
                        ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                        if (chatActivityAdapter3 != null) {
                            chatActivityAdapter3.notifyItemRemoved(chatActivityAdapter3.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.remove(indexOf3);
                            if (arrayList3.isEmpty()) {
                                this.messagesByDays.remove(messageObject3.dateKey);
                                this.messages.remove(indexOf2);
                                int i8 = this.chatAdapter.loadingUpRow;
                                int i9 = this.chatAdapter.loadingDownRow;
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                chatActivityAdapter4.notifyItemRemoved(chatActivityAdapter4.messagesStartRow + indexOf2);
                                if (this.messages.isEmpty()) {
                                    if (i8 >= 0) {
                                        i2 = 0;
                                        this.chatAdapter.notifyItemRemoved(0);
                                    } else {
                                        i2 = 0;
                                    }
                                    if (i9 >= 0) {
                                        this.chatAdapter.notifyItemRemoved(i2);
                                    }
                                    updateReplyMessageOwners(messageObject3.getId(), messageObject2);
                                }
                            }
                        }
                    }
                }
                updateReplyMessageOwners(messageObject3.getId(), messageObject2);
            }
            i3++;
            tLRPC$User = null;
        }
        if (longSparseArray != null) {
            for (int i10 = 0; i10 < longSparseArray.size(); i10++) {
                MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i10);
                if (groupedMessages3.messages.isEmpty()) {
                    this.groupedMessagesMap.remove(groupedMessages3.groupId);
                } else {
                    groupedMessages3.calculate();
                    ArrayList<MessageObject> arrayList6 = groupedMessages3.messages;
                    int indexOf4 = this.messages.indexOf(arrayList6.get(arrayList6.size() - 1));
                    if (indexOf4 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                        chatActivityAdapter.notifyItemRangeChanged(indexOf4 + chatActivityAdapter.messagesStartRow, groupedMessages3.messages.size());
                        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                        if (chatListItemAnimator != null) {
                            chatListItemAnimator.groupWillChanged(groupedMessages3);
                        }
                    }
                }
            }
        }
        updatePinnedTopicStarterMessage();
    }

    private void migrateToNewChat(final MessageObject messageObject) {
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null) {
            return;
        }
        final long j = messageObject.messageOwner.action.channel_id;
        final BaseFragment baseFragment = iNavigationLayout.getFragmentStack().size() > 0 ? this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) : null;
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        final INavigationLayout iNavigationLayout2 = this.parentLayout;
        if (indexOf > 0 && !(baseFragment instanceof ChatActivity) && !(baseFragment instanceof ProfileActivity) && this.currentChat.creator) {
            int size = iNavigationLayout2.getFragmentStack().size() - 1;
            while (indexOf < size) {
                BaseFragment baseFragment2 = iNavigationLayout2.getFragmentStack().get(indexOf);
                if (baseFragment2 instanceof ChatActivity) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ChatActivity(bundle), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ProfileActivity) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ProfileActivity(bundle2), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatEditActivity) {
                    Bundle bundle3 = new Bundle();
                    bundle3.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ChatEditActivity(bundle3), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatUsersActivity) {
                    if (!((ChatUsersActivity) baseFragment2).hasSelectType()) {
                        Bundle arguments = baseFragment2.getArguments();
                        arguments.putLong("chat_id", j);
                        iNavigationLayout2.addFragmentToStack(new ChatUsersActivity(arguments), indexOf);
                    }
                    baseFragment2.removeSelfFromStack();
                }
                indexOf++;
            }
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda284
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$migrateToNewChat$200(baseFragment, messageObject, iNavigationLayout2);
                }
            });
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda248
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$migrateToNewChat$201(j);
            }
        }, 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$200(BaseFragment baseFragment, MessageObject messageObject, INavigationLayout iNavigationLayout) {
        if (baseFragment instanceof NotificationCenter.NotificationCenterDelegate) {
            getNotificationCenter().removeObserver((NotificationCenter.NotificationCenterDelegate) baseFragment, NotificationCenter.closeChats);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeChats, new Object[0]);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", messageObject.messageOwner.action.channel_id);
        iNavigationLayout.addFragmentToStack(new ChatActivity(bundle), iNavigationLayout.getFragmentStack().size() - 1);
        baseFragment.finishFragment();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$201(long j) {
        getMessagesController().loadFullChat(j, 0, true);
    }

    private void addToPolls(MessageObject messageObject, MessageObject messageObject2) {
        long pollId = messageObject.getPollId();
        if (pollId != 0) {
            ArrayList<MessageObject> arrayList = this.polls.get(pollId);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                this.polls.put(pollId, arrayList);
            }
            arrayList.add(messageObject);
            if (messageObject2 != null) {
                arrayList.remove(messageObject2);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showInfoHint(MessageObject messageObject, CharSequence charSequence, final int i) {
        BulletinFactory.m65of(this).createSimpleBulletin(C3632R.raw.chats_infotip, charSequence, 9999).setDuration(Math.max((int) WearableStatusCodes.TARGET_NODE_NOT_CONNECTED, Math.min(((charSequence == null ? 0 : charSequence.length()) / 50) * 1600, 10000))).setOnHideListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showInfoHint$202(i);
            }
        }).show(true);
        this.hintMessageObject = messageObject;
        this.hintMessageType = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showInfoHint$202(int i) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.equals(this.hintMessageObject)) {
                    chatMessageCell.showHintButton(true, true, i);
                }
            }
        }
        this.hintMessageObject = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showPollSolution(MessageObject messageObject, TLRPC$PollResults tLRPC$PollResults) {
        CharSequence charSequence;
        if (tLRPC$PollResults == null || TextUtils.isEmpty(tLRPC$PollResults.solution)) {
            return;
        }
        if (!tLRPC$PollResults.solution_entities.isEmpty()) {
            charSequence = new SpannableStringBuilder(tLRPC$PollResults.solution);
            MessageObject.addEntitiesToText(charSequence, tLRPC$PollResults.solution_entities, false, true, true, false);
        } else {
            charSequence = tLRPC$PollResults.solution;
        }
        showInfoHint(messageObject, charSequence, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSearchButtons(int i, int i2, int i3) {
        ImageView imageView = this.searchUpButton;
        if (imageView != null) {
            imageView.setEnabled((i & 1) != 0);
            ImageView imageView2 = this.searchUpButton;
            imageView2.setAlpha(imageView2.isEnabled() ? 1.0f : 0.5f);
        }
        ImageView imageView3 = this.searchDownButton;
        if (imageView3 != null) {
            imageView3.setEnabled((i & 2) != 0);
            ImageView imageView4 = this.searchDownButton;
            imageView4.setAlpha(imageView4.isEnabled() ? 1.0f : 0.5f);
        }
        SearchCounterView searchCounterView = this.searchCountText;
        if (searchCounterView != null) {
            if (i3 < 0) {
                searchCounterView.setCount("", 0, false);
            } else if (i3 == 0) {
                searchCounterView.setCount(LocaleController.getString("NoResult", C3632R.string.NoResult), 0, false);
            } else {
                int i4 = i2 + 1;
                searchCounterView.setCount(LocaleController.formatString("OfCounted", C3632R.string.OfCounted, Integer.valueOf(i4), Integer.valueOf(i3)), i4, true);
            }
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean needDelayOpenAnimation() {
        if (this.chatMode != 1 && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).isKeyboardVisible()) {
                return false;
            }
        }
        return this.firstLoading;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onBecomeFullyVisible() {
        this.isFullyVisible = true;
        super.onBecomeFullyVisible();
        if (this.showCloseChatDialogLater) {
            showDialog(this.closeChatDialog);
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
        if (this.keyboardWasVisible) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboardInternal();
                this.chatActivityEnterView.freezeEmojiView(false);
            }
            this.keyboardWasVisible = false;
        }
        if (this.savedMessagesHint != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda217
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.checkSavedMessagesHint();
                }
            }, 600L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkSavedMessagesHint() {
        if (this.checkedSavedMessagesHint) {
            return;
        }
        this.checkedSavedMessagesHint = true;
        if (this.savedMessagesHintShown || this.savedMessagesHint == null || this.chatMode != 0 || MessagesController.getGlobalMainSettings().getInt("savedhint", 0) >= 1 || getMessagesController().getSavedMessagesController().unsupported || getMessagesController().getSavedMessagesController().getAllCount() <= 2) {
            return;
        }
        this.savedMessagesHint.show();
        this.savedMessagesHintShown = true;
        MessagesController.getGlobalMainSettings().edit().putInt("savedhint", MessagesController.getGlobalMainSettings().getInt("savedhint", 0) + 1).apply();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onBecomeFullyHidden() {
        if (!getMessagesController().premiumFeaturesBlocked() && getMessagesController().transcribeAudioTrialWeeklyNumber <= 0 && !getMessagesController().didPressTranscribeButtonEnough() && !getUserConfig().isPremium() && this.messages != null) {
            for (int i = 0; i < this.messages.size(); i++) {
                MessageObject messageObject = this.messages.get(i);
                if (messageObject != null && !messageObject.isOutOwner() && ((messageObject.isVoice() || messageObject.isRoundVideo()) && !messageObject.isUnread() && (messageObject.isContentUnread() || ChatObject.isChannelAndNotMegaGroup(this.currentChat)))) {
                    TranscribeButton.showOffTranscribe(messageObject, false);
                }
            }
        }
        this.isFullyVisible = false;
        hideUndoViews();
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
        }
        TranscribeButton.resetVideoTranscriptionsOpen();
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.flagSecure.detach();
        super.onBecomeFullyHidden();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void saveKeyboardPositionBeforeTransition() {
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && this.contentView != null && chatActivityEnterView.getAdjustPanLayoutHelper() != null && !this.chatActivityEnterView.getAdjustPanLayoutHelper().animationInProgress()) {
            this.fixedKeyboardHeight = this.contentView.getKeyboardHeight();
        } else {
            this.fixedKeyboardHeight = -1;
        }
    }

    public void removeKeyboardPositionBeforeTransition() {
        if (this.fixedKeyboardHeight > 0) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda204
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$removeKeyboardPositionBeforeTransition$203();
                }
            };
            this.cancelFixedPositionRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, 200L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeKeyboardPositionBeforeTransition$203() {
        this.cancelFixedPositionRunnable = null;
        this.fixedKeyboardHeight = -1;
        View view = this.fragmentView;
        if (view != null) {
            view.requestLayout();
        }
    }

    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    public void onTransitionAnimationStart(boolean z, boolean z2) {
        int[] iArr;
        super.onTransitionAnimationStart(z, z2);
        System.currentTimeMillis();
        if (z) {
            if (!this.fragmentOpened) {
                this.fragmentOpened = true;
                updateMessagesVisiblePart(false);
            }
            iArr = this.transitionAnimationIndex == 0 ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.messagesDidLoad} : new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog};
            this.openAnimationEnded = false;
            if (!z2) {
                this.openAnimationStartTime = SystemClock.elapsedRealtime();
            }
        } else {
            iArr = UserObject.isUserSelf(this.currentUser) ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.mediaDidLoad} : null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.onBeginHide();
            }
        }
        checkShowBlur(true);
        this.transitionAnimationIndex = getNotificationCenter().setAnimationInProgress(this.transitionAnimationIndex, iArr);
    }

    /* JADX WARN: Removed duplicated region for block: B:93:0x01a2  */
    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void onTransitionAnimationEnd(boolean r13, boolean r14) {
        /*
            Method dump skipped, instructions count: 554
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.onTransitionAnimationEnd(boolean, boolean):void");
    }

    public void openAttachBotLayout(String str) {
        TLRPC$TL_contacts_resolveUsername tLRPC$TL_contacts_resolveUsername = new TLRPC$TL_contacts_resolveUsername();
        tLRPC$TL_contacts_resolveUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_resolveUsername, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda318
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$214(tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$214(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda269
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$213(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$213(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            if (tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                return;
            }
            final TLRPC$User tLRPC$User = tLRPC$TL_contacts_resolvedPeer.users.get(0);
            if (tLRPC$User.bot && tLRPC$User.bot_attach_menu) {
                TLRPC$TL_messages_getAttachMenuBot tLRPC$TL_messages_getAttachMenuBot = new TLRPC$TL_messages_getAttachMenuBot();
                tLRPC$TL_messages_getAttachMenuBot.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.f1751id);
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_getAttachMenuBot, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda333
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$openAttachBotLayout$212(tLRPC$User, tLObject2, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$212(final TLRPC$User tLRPC$User, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda274
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$211(tLObject, tLRPC$User);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$211(TLObject tLObject, final TLRPC$User tLRPC$User) {
        if (tLObject instanceof TLRPC$TL_attachMenuBotsBot) {
            TLRPC$TL_attachMenuBotsBot tLRPC$TL_attachMenuBotsBot = (TLRPC$TL_attachMenuBotsBot) tLObject;
            MessagesController.getInstance(this.currentAccount).putUsers(tLRPC$TL_attachMenuBotsBot.users, false);
            final TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot = tLRPC$TL_attachMenuBotsBot.bot;
            if (!MediaDataController.canShowAttachMenuBot(tLRPC$TL_attachMenuBot, getCurrentUser() != null ? getCurrentUser() : getCurrentChat())) {
                TLRPC$User tLRPC$User2 = this.currentUser;
                if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.f1751id == tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString(C3632R.string.BotCantOpenAttachMenuSameBot)).show();
                } else if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.f1751id != tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString(C3632R.string.BotCantOpenAttachMenuBot)).show();
                } else if (tLRPC$User2 != null && !tLRPC$User2.bot) {
                    BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString(C3632R.string.BotCantOpenAttachMenuUser)).show();
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)) {
                        BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString(C3632R.string.BotCantOpenAttachMenuGroup)).show();
                        return;
                    }
                    TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                    if (tLRPC$Chat2 == null || !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat2)) {
                        return;
                    }
                    BulletinFactory.m65of(this).createErrorBulletin(LocaleController.getString(C3632R.string.BotCantOpenAttachMenuChannel)).show();
                }
            } else if (!tLRPC$TL_attachMenuBot.inactive) {
                openAttachBotLayout(tLRPC$User.f1751id, this.attachMenuBotStartCommand, false);
            } else if (tLRPC$TL_attachMenuBot.show_in_attach_menu || tLRPC$TL_attachMenuBot.show_in_side_menu) {
                WebAppDisclaimerAlert.show(getContext(), new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda141
                    @Override // com.google.android.exoplayer2.util.Consumer
                    public final void accept(Object obj) {
                        ChatActivity.this.lambda$openAttachBotLayout$206(tLRPC$User, tLRPC$TL_attachMenuBot, (Boolean) obj);
                    }
                }, null);
            } else {
                AttachBotIntroTopView attachBotIntroTopView = new AttachBotIntroTopView(getParentActivity());
                attachBotIntroTopView.setColor(Theme.getColor(Theme.key_chat_attachIcon));
                attachBotIntroTopView.setBackgroundColor(Theme.getColor(Theme.key_dialogTopBackground));
                attachBotIntroTopView.setAttachBot(tLRPC$TL_attachMenuBot);
                final AtomicBoolean atomicBoolean = new AtomicBoolean();
                AlertDialog.Builder negativeButton = new AlertDialog.Builder(getParentActivity()).setTopView(attachBotIntroTopView).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotRequestAttachPermission", C3632R.string.BotRequestAttachPermission, UserObject.getUserName(tLRPC$User)))).setPositiveButton(LocaleController.getString(C3632R.string.BotAddToMenu), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda50
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.lambda$openAttachBotLayout$209(tLRPC$User, atomicBoolean, tLRPC$TL_attachMenuBot, dialogInterface, i);
                    }
                }).setNegativeButton(LocaleController.getString(C3632R.string.Cancel), null);
                if (tLRPC$TL_attachMenuBot.request_write_access) {
                    atomicBoolean.set(true);
                    final CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 5, getResourceProvider());
                    checkBoxCell.setPadding(0, AndroidUtilities.m107dp(8), 0, AndroidUtilities.m107dp(8));
                    checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
                    checkBoxCell.setMultiline(true);
                    checkBoxCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", C3632R.string.OpenUrlOption2, UserObject.getUserName(tLRPC$User))), "", true, false);
                    checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.m107dp(16) : AndroidUtilities.m107dp(8), 0, LocaleController.isRTL ? AndroidUtilities.m107dp(8) : AndroidUtilities.m107dp(16), 0);
                    checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda71
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.lambda$openAttachBotLayout$210(CheckBoxCell.this, atomicBoolean, view);
                        }
                    });
                    negativeButton.setCustomViewOffset(6);
                    negativeButton.setView(checkBoxCell);
                }
                negativeButton.show();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$206(final TLRPC$User tLRPC$User, final TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, Boolean bool) {
        TLRPC$TL_messages_toggleBotInAttachMenu tLRPC$TL_messages_toggleBotInAttachMenu = new TLRPC$TL_messages_toggleBotInAttachMenu();
        tLRPC$TL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.f1751id);
        tLRPC$TL_messages_toggleBotInAttachMenu.enabled = true;
        tLRPC$TL_messages_toggleBotInAttachMenu.write_allowed = true;
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_toggleBotInAttachMenu, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda330
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$205(tLRPC$TL_attachMenuBot, tLRPC$User, tLObject, tLRPC$TL_error);
            }
        }, 66);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$205(final TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, final TLRPC$User tLRPC$User, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda275
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$204(tLRPC$TL_attachMenuBot, tLRPC$TL_error, tLRPC$User);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$204(TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, TLRPC$TL_error tLRPC$TL_error, TLRPC$User tLRPC$User) {
        tLRPC$TL_attachMenuBot.side_menu_disclaimer_needed = false;
        tLRPC$TL_attachMenuBot.inactive = false;
        if (tLRPC$TL_error == null) {
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(tLRPC$User.f1751id, this.attachMenuBotStartCommand, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$209(final TLRPC$User tLRPC$User, AtomicBoolean atomicBoolean, final TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, DialogInterface dialogInterface, int i) {
        TLRPC$TL_messages_toggleBotInAttachMenu tLRPC$TL_messages_toggleBotInAttachMenu = new TLRPC$TL_messages_toggleBotInAttachMenu();
        tLRPC$TL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.f1751id);
        tLRPC$TL_messages_toggleBotInAttachMenu.enabled = true;
        tLRPC$TL_messages_toggleBotInAttachMenu.write_allowed = atomicBoolean.get();
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_toggleBotInAttachMenu, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda331
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$208(tLRPC$TL_attachMenuBot, tLRPC$User, tLObject, tLRPC$TL_error);
            }
        }, 66);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$208(final TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, final TLRPC$User tLRPC$User, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda277
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$207(tLRPC$TL_error, tLRPC$TL_attachMenuBot, tLRPC$User);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$207(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot, TLRPC$User tLRPC$User) {
        if (tLRPC$TL_error == null) {
            tLRPC$TL_attachMenuBot.side_menu_disclaimer_needed = false;
            tLRPC$TL_attachMenuBot.inactive = false;
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(tLRPC$User.f1751id, this.attachMenuBotStartCommand, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openAttachBotLayout$210(CheckBoxCell checkBoxCell, AtomicBoolean atomicBoolean, View view) {
        boolean z = !checkBoxCell.isChecked();
        checkBoxCell.setChecked(z, true);
        atomicBoolean.set(z);
    }

    public void openAttachBotLayout(long j, String str, boolean z) {
        if (!z && !SharedConfig.isChatAttachAlertWalletBotEnabled && j == 1985737506) {
            TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot = null;
            Iterator<TLRPC$TL_attachMenuBot> it = MediaDataController.getInstance(this.currentAccount).getAttachMenuBots().bots.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                TLRPC$TL_attachMenuBot next = it.next();
                if (next.bot_id == j) {
                    tLRPC$TL_attachMenuBot = next;
                    break;
                }
            }
            if (tLRPC$TL_attachMenuBot == null || getParentActivity() == null) {
                return;
            }
            BotWebViewSheet botWebViewSheet = new BotWebViewSheet(getParentActivity(), getResourceProvider());
            botWebViewSheet.setParentActivity(getParentActivity());
            int i = this.currentAccount;
            long j2 = tLRPC$TL_attachMenuBot.bot_id;
            botWebViewSheet.requestWebView(i, j2, j2, tLRPC$TL_attachMenuBot.short_name, null, 1, 0, false, 2);
            botWebViewSheet.show();
            return;
        }
        openAttachMenu();
        createChatAttachView();
        this.chatAttachAlert.showBotLayout(j, str, z, false);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onDialogDismiss(Dialog dialog) {
        Dialog dialog2 = this.closeChatDialog;
        if (dialog2 == null || dialog != dialog2) {
            return;
        }
        getMessagesController().deleteDialog(this.dialog_id, 0);
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && !iNavigationLayout.getFragmentStack().isEmpty() && this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) != this) {
            removeSelfFromStack();
            this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1).finishFragment();
            return;
        }
        finishFragment();
    }

    /* JADX WARN: Code restructure failed: missing block: B:14:0x0031, code lost:
        if (r4.findItem(16908321) != null) goto L9;
     */
    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public boolean extendActionMode(android.view.Menu r4) {
        /*
            r3 = this;
            boolean r0 = org.telegram.p043ui.PhotoViewer.hasInstance()
            r1 = 16908321(0x1020021, float:2.3877321E-38)
            r2 = 1
            if (r0 == 0) goto L25
            org.telegram.ui.PhotoViewer r0 = org.telegram.p043ui.PhotoViewer.getInstance()
            boolean r0 = r0.isVisible()
            if (r0 == 0) goto L25
            org.telegram.ui.PhotoViewer r0 = org.telegram.p043ui.PhotoViewer.getInstance()
            int r0 = r0.getSelectionLength()
            if (r0 == 0) goto L24
            android.view.MenuItem r0 = r4.findItem(r1)
            if (r0 != 0) goto L34
        L24:
            return r2
        L25:
            org.telegram.ui.Components.ChatActivityEnterView r0 = r3.chatActivityEnterView
            int r0 = r0.getSelectionLength()
            if (r0 == 0) goto L45
            android.view.MenuItem r0 = r4.findItem(r1)
            if (r0 != 0) goto L34
            goto L45
        L34:
            com.iMe.fork.controller.FormattingTextController r0 = r3.getFormattingTextController()
            com.iMe.fork.enums.FormattingPanelType r0 = r0.getFormattingPanelType()
            com.iMe.fork.enums.FormattingPanelType r1 = com.iMe.fork.enums.FormattingPanelType.DEFAULT
            if (r0 != r1) goto L45
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r3.currentEncryptedChat
            fillActionModeMenu(r4, r0, r2)
        L45:
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.extendActionMode(android.view.Menu):boolean");
    }

    public static void fillActionModeMenu(Menu menu, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        int i = C3632R.C3635id.menu_bold;
        if (menu.findItem(i) != null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        int i2 = 6;
        if (z) {
            menu.add(C3632R.C3635id.menu_groupbolditalic, C3632R.C3635id.menu_quote, 6, LocaleController.getString("Quote", C3632R.string.Quote));
            i2 = 7;
        }
        int i3 = C3632R.C3635id.menu_groupbolditalic;
        int i4 = i2 + 1;
        menu.add(i3, C3632R.C3635id.menu_spoiler, i2, LocaleController.getString("Spoiler", C3632R.string.Spoiler));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", C3632R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, spannableStringBuilder.length(), 33);
        int i5 = i4 + 1;
        menu.add(i3, i, i4, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", C3632R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        int i6 = i5 + 1;
        menu.add(i3, C3632R.C3635id.menu_italic, i5, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", C3632R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        int i7 = i6 + 1;
        menu.add(i3, C3632R.C3635id.menu_mono, i6, spannableStringBuilder3);
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", C3632R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            int i8 = i7 + 1;
            menu.add(i3, C3632R.C3635id.menu_strike, i7, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", C3632R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            i7 = i8 + 1;
            menu.add(i3, C3632R.C3635id.menu_underline, i8, spannableStringBuilder5);
        }
        menu.add(i3, C3632R.C3635id.menu_link, i7, LocaleController.getString("CreateLink", C3632R.string.CreateLink));
        menu.add(i3, C3632R.C3635id.menu_regular, i7 + 1, LocaleController.getString("Regular", C3632R.string.Regular));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateScheduledInterface(boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateScheduleButton(z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:129:0x032a  */
    /* renamed from: updateBottomOverlay */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void lambda$didReceivedNotification$183() {
        /*
            Method dump skipped, instructions count: 1837
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.lambda$didReceivedNotification$183():void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$215() {
        ChatGreetingsView.showPremiumSheet(getContext(), this.currentAccount, this.dialog_id, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$216(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.m107dp(51)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.m107dp(51)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$217(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.m107dp(51)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.m107dp(51)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$218() {
        this.chatActivityEnterView.openKeyboard();
    }

    private boolean shouldDisplaySwipeToLeftToReplyInForum() {
        return isForumInViewAsMessagesMode() && this.replyingMessageObject == null && !canSendMessageToGeneralTopic();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean canSendMessageToTopic(MessageObject messageObject) {
        if (messageObject == null || !ChatObject.isForum(this.currentChat)) {
            return false;
        }
        return canSendMessageToTopic(getMessagesController().getTopicsController().findTopic(this.currentChat.f1602id, MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true)));
    }

    private boolean canSendMessageToGeneralTopic() {
        if (!isForumInViewAsMessagesMode() || this.currentChat == null) {
            return false;
        }
        return canSendMessageToTopic(getMessagesController().getTopicsController().findTopic(this.currentChat.f1602id, 1L));
    }

    private boolean canSendMessageToTopic(TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        return tLRPC$TL_forumTopic != null && (!tLRPC$TL_forumTopic.closed || ChatObject.canManageTopic(this.currentAccount, this.currentChat, tLRPC$TL_forumTopic));
    }

    public void updateReplyMessageHeader(boolean z) {
        String string;
        if (this.chatMode == 3) {
            return;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && this.threadMessageId != 0) {
            if (this.isTopic) {
                updateTopicHeader();
            } else if (this.isComments) {
                MessageObject messageObject = this.threadMessageObject;
                if (messageObject != null && messageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", C3632R.string.CommentsTitle));
                }
            } else {
                MessageObject messageObject2 = this.threadMessageObject;
                if (messageObject2 != null) {
                    chatAvatarContainer.setTitle(LocaleController.formatPluralString("Replies", messageObject2.getRepliesCount(), new Object[0]));
                }
            }
        }
        if (this.replyMessageHeaderObject == null) {
            return;
        }
        if (this.threadMessageObject.getRepliesCount() == 0) {
            if (this.isComments) {
                string = LocaleController.getString("NoComments", C3632R.string.NoComments);
            } else {
                string = LocaleController.getString("NoReplies", C3632R.string.NoReplies);
            }
        } else {
            string = LocaleController.getString("DiscussionStarted", C3632R.string.DiscussionStarted);
        }
        MessageObject messageObject3 = this.replyMessageHeaderObject;
        messageObject3.messageOwner.message = string;
        messageObject3.messageText = string;
        if (z) {
            this.chatAdapter.updateRowWithMessageObject(messageObject3, true, false);
        }
    }

    private void updateTopicHeader() {
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && (tLRPC$TL_forumTopic = this.forumTopic) != null) {
            chatAvatarContainer.setTitle(tLRPC$TL_forumTopic.title);
        }
        updateTopicTitleIcon();
    }

    private void createAlertView() {
        if (this.alertView != null || getContext() == null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(getContext());
        this.alertView = frameLayout;
        frameLayout.setTag(1);
        this.alertView.setVisibility(8);
        this.alertView.setBackgroundResource(C3632R.C3634drawable.blockpanel);
        this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY));
        int i = 9;
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout != null) {
            ViewParent parent = blurredFrameLayout.getParent();
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (parent == chatActivityFragmentView) {
                i = Math.max(9, chatActivityFragmentView.indexOfChild(this.topChatPanelView) + 1);
            }
        }
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            ViewParent parent2 = blurredFrameLayout2.getParent();
            ChatActivityFragmentView chatActivityFragmentView2 = this.contentView;
            if (parent2 == chatActivityFragmentView2) {
                i = Math.max(i, chatActivityFragmentView2.indexOfChild(this.pinnedMessageView) + 1);
            }
        }
        this.contentView.addView(this.alertView, i, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView = new TextView(getContext());
        this.alertNameTextView = textView;
        textView.setTextSize(1, 14.0f);
        this.alertNameTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
        this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.alertNameTextView.setSingleLine(true);
        this.alertNameTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertNameTextView.setMaxLines(1);
        this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2, 51, 8, 5, 8, 0));
        TextView textView2 = new TextView(getContext());
        this.alertTextView = textView2;
        textView2.setTextSize(1, 14.0f);
        this.alertTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
        this.alertTextView.setSingleLine(true);
        this.alertTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertTextView.setMaxLines(1);
        this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2, 51, 8, 23, 8, 0));
    }

    public void showAlert(String str, String str2) {
        createAlertView();
        FrameLayout frameLayout = this.alertView;
        if (frameLayout == null || str == null || str2 == null) {
            return;
        }
        if (frameLayout.getTag() != null) {
            this.alertView.setTag(null);
            AnimatorSet animatorSet = this.alertViewAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.alertViewAnimator = null;
            }
            if (this.alertView.getVisibility() != 0) {
                this.alertViewEnterProgress = BitmapDescriptorFactory.HUE_RED;
                invalidateChatListViewTopPadding();
            }
            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.alertViewEnterProgress, 1.0f);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda13
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$showAlert$219(valueAnimator);
                }
            });
            this.alertViewAnimator.playTogether(ofFloat);
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.106
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewEnterProgress = 1.0f;
                    ChatActivity.this.invalidateChatListViewTopPadding();
                    ChatActivity.this.alertViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewAnimator = null;
                }
            });
            this.alertViewAnimator.start();
        }
        this.alertNameTextView.setText(str);
        this.alertTextView.setText(Emoji.replaceEmoji((CharSequence) str2.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.m107dp(14), false));
        Runnable runnable = this.hideAlertViewRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        AnonymousClass107 anonymousClass107 = new AnonymousClass107();
        this.hideAlertViewRunnable = anonymousClass107;
        AndroidUtilities.runOnUIThread(anonymousClass107, C0483C.DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showAlert$219(ValueAnimator valueAnimator) {
        this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$107  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass107 implements Runnable {
        AnonymousClass107() {
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                ChatActivity.this.alertView.setTag(1);
                if (ChatActivity.this.alertViewAnimator != null) {
                    ChatActivity.this.alertViewAnimator.cancel();
                    ChatActivity.this.alertViewAnimator = null;
                }
                ChatActivity.this.alertViewAnimator = new AnimatorSet();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.alertViewEnterProgress, BitmapDescriptorFactory.HUE_RED);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$107$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.AnonymousClass107.this.lambda$run$0(valueAnimator);
                    }
                });
                ChatActivity.this.alertViewAnimator.playTogether(ofFloat);
                ChatActivity.this.alertViewAnimator.setDuration(200L);
                ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.107.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertView.setVisibility(8);
                        ChatActivity.this.alertViewEnterProgress = BitmapDescriptorFactory.HUE_RED;
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        ChatActivity.this.alertViewAnimator = null;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertViewAnimator = null;
                    }
                });
                ChatActivity.this.alertViewAnimator.start();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(ValueAnimator valueAnimator) {
            ChatActivity.this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    private boolean hidePinnedMessageView(boolean z) {
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout == null || blurredFrameLayout.getTag() != null) {
            return false;
        }
        int i = 0;
        while (true) {
            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
            if (i >= animatorSetArr.length) {
                break;
            }
            if (animatorSetArr[i] != null) {
                animatorSetArr[i].cancel();
                this.pinnedNextAnimation[i] = null;
            }
            i++;
        }
        this.setPinnedTextTranslationX = false;
        this.pinnedMessageView.setTag(1);
        AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.pinnedMessageViewAnimator = null;
        }
        if (z) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, -AndroidUtilities.m107dp(50));
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda15
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$hidePinnedMessageView$220(valueAnimator);
                }
            });
            this.pinnedMessageViewAnimator.playTogether(ofFloat);
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.108
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    if (ChatActivity.this.pinnedMessageView != null) {
                        ChatActivity.this.pinnedMessageView.setVisibility(8);
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }
            });
            this.pinnedMessageViewAnimator.start();
        } else {
            this.pinnedMessageEnterOffset = -AndroidUtilities.m107dp(50);
            this.pinnedMessageView.setVisibility(8);
            this.chatListView.invalidate();
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hidePinnedMessageView$220(ValueAnimator valueAnimator) {
        this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePinnedMessageView(boolean z) {
        lambda$updateMessagesVisiblePart$161(z, 0);
    }

    private void updatePinnedListButton(boolean z) {
        if ((!isThreadChat() || this.isTopic) && this.pinnedListButton != null) {
            boolean z2 = !this.fragmentOpened ? false : z;
            boolean z3 = this.pinnedMessageIds.size() > 1 && !this.pinnedMessageButtonShown;
            boolean z4 = this.pinnedListButton.getTag() != null;
            boolean z5 = this.pinnedProgress.getTag() != null;
            boolean z6 = this.closePinned.getTag() != null;
            final boolean z7 = (z3 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            final boolean z8 = (!z3 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            final boolean z9 = this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
            if (z4 != z3 || z5 != z9 || z6 != z7) {
                AnimatorSet animatorSet = this.pinnedListAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.pinnedListAnimator = null;
                }
                if (z2) {
                    if (z3) {
                        this.pinnedListButton.setVisibility(0);
                    } else if (z7) {
                        this.closePinned.setVisibility(0);
                    }
                    if (z9) {
                        this.pinnedProgress.setVisibility(0);
                        this.pinnedProgress.setAlpha(BitmapDescriptorFactory.HUE_RED);
                        this.pinnedProgress.setScaleX(0.4f);
                        this.pinnedProgress.setScaleY(0.4f);
                    }
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.pinnedListAnimator = animatorSet2;
                    Animator[] animatorArr = new Animator[9];
                    ImageView imageView = this.pinnedListButton;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z8 ? 1.0f : BitmapDescriptorFactory.HUE_RED;
                    animatorArr[0] = ObjectAnimator.ofFloat(imageView, property, fArr);
                    ImageView imageView2 = this.pinnedListButton;
                    Property property2 = View.SCALE_X;
                    float[] fArr2 = new float[1];
                    fArr2[0] = z8 ? 1.0f : 0.4f;
                    animatorArr[1] = ObjectAnimator.ofFloat(imageView2, property2, fArr2);
                    ImageView imageView3 = this.pinnedListButton;
                    Property property3 = View.SCALE_Y;
                    float[] fArr3 = new float[1];
                    fArr3[0] = z8 ? 1.0f : 0.4f;
                    animatorArr[2] = ObjectAnimator.ofFloat(imageView3, property3, fArr3);
                    ImageView imageView4 = this.closePinned;
                    Property property4 = View.ALPHA;
                    float[] fArr4 = new float[1];
                    fArr4[0] = z7 ? 1.0f : BitmapDescriptorFactory.HUE_RED;
                    animatorArr[3] = ObjectAnimator.ofFloat(imageView4, property4, fArr4);
                    ImageView imageView5 = this.closePinned;
                    Property property5 = View.SCALE_X;
                    float[] fArr5 = new float[1];
                    fArr5[0] = z7 ? 1.0f : 0.4f;
                    animatorArr[4] = ObjectAnimator.ofFloat(imageView5, property5, fArr5);
                    ImageView imageView6 = this.closePinned;
                    Property property6 = View.SCALE_Y;
                    float[] fArr6 = new float[1];
                    fArr6[0] = z7 ? 1.0f : 0.4f;
                    animatorArr[5] = ObjectAnimator.ofFloat(imageView6, property6, fArr6);
                    RadialProgressView radialProgressView = this.pinnedProgress;
                    Property property7 = View.ALPHA;
                    float[] fArr7 = new float[1];
                    fArr7[0] = !z9 ? BitmapDescriptorFactory.HUE_RED : 1.0f;
                    animatorArr[6] = ObjectAnimator.ofFloat(radialProgressView, property7, fArr7);
                    RadialProgressView radialProgressView2 = this.pinnedProgress;
                    Property property8 = View.SCALE_X;
                    float[] fArr8 = new float[1];
                    fArr8[0] = !z9 ? 0.4f : 1.0f;
                    animatorArr[7] = ObjectAnimator.ofFloat(radialProgressView2, property8, fArr8);
                    RadialProgressView radialProgressView3 = this.pinnedProgress;
                    Property property9 = View.SCALE_Y;
                    float[] fArr9 = new float[1];
                    fArr9[0] = !z9 ? 0.4f : 1.0f;
                    animatorArr[8] = ObjectAnimator.ofFloat(radialProgressView3, property9, fArr9);
                    animatorSet2.playTogether(animatorArr);
                    this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    this.pinnedListAnimator.setDuration(360L);
                    this.pinnedListAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.109
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.pinnedListAnimator = null;
                            ChatActivity.this.closePinned.setVisibility(z7 ? 0 : 4);
                            ChatActivity.this.pinnedListButton.setVisibility(z8 ? 0 : 4);
                            ChatActivity.this.pinnedProgress.setVisibility(z9 ? 0 : 4);
                        }
                    });
                    this.pinnedListAnimator.start();
                } else {
                    this.closePinned.setAlpha(z7 ? 1.0f : BitmapDescriptorFactory.HUE_RED);
                    this.closePinned.setScaleX(z7 ? 1.0f : 0.4f);
                    this.closePinned.setScaleY(z7 ? 1.0f : 0.4f);
                    this.closePinned.setVisibility(z7 ? 0 : 4);
                    this.pinnedListButton.setAlpha(z8 ? 1.0f : BitmapDescriptorFactory.HUE_RED);
                    this.pinnedListButton.setScaleX(z8 ? 1.0f : 0.4f);
                    this.pinnedListButton.setScaleY(z8 ? 1.0f : 0.4f);
                    this.pinnedListButton.setVisibility(z8 ? 0 : 4);
                    this.pinnedProgress.setAlpha(z9 ? 1.0f : BitmapDescriptorFactory.HUE_RED);
                    this.pinnedProgress.setScaleX(z9 ? 1.0f : 0.4f);
                    this.pinnedProgress.setScaleY(z9 ? 1.0f : 0.4f);
                    this.pinnedProgress.setVisibility(z9 ? 0 : 8);
                }
                this.closePinned.setTag(z7 ? 1 : null);
                this.pinnedListButton.setTag(z3 ? 1 : null);
                this.pinnedProgress.setTag(z9 ? 1 : null);
            }
            if (this.pinnedLineView != null) {
                if (isThreadChat() && !this.isTopic) {
                    this.pinnedLineView.set(0, 1, false);
                } else {
                    this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator.CC.reverseOrder()), this.pinnedMessageIds.size(), z2);
                }
            }
        }
    }

    private TLRPC$KeyboardButton pinnedButton(MessageObject messageObject) {
        TLRPC$Message tLRPC$Message;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        ArrayList<TLRPC$TL_keyboardButtonRow> arrayList;
        if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$ReplyMarkup = tLRPC$Message.reply_markup) == null || (arrayList = tLRPC$ReplyMarkup.rows) == null || arrayList.size() != 1 || messageObject.messageOwner.reply_markup.rows.get(0) == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons.size() != 1) {
            return null;
        }
        return messageObject.messageOwner.reply_markup.rows.get(0).buttons.get(0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x00b2, code lost:
        if (r9.pinnedMessageIds.get(0).intValue() != r5.getInt("pin_" + r9.dialog_id, 0)) goto L30;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:177:0x03ed  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x03ef  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x04fc  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x0509  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x0561  */
    /* JADX WARN: Removed duplicated region for block: B:271:0x05b2  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x05ca  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x0689  */
    /* JADX WARN: Removed duplicated region for block: B:306:0x069e  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x006e  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0070  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:417:0x0c0d  */
    /* JADX WARN: Removed duplicated region for block: B:432:0x0c67  */
    /* JADX WARN: Removed duplicated region for block: B:436:0x0c72  */
    /* JADX WARN: Removed duplicated region for block: B:449:0x0d35  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:479:0x0de4  */
    /* JADX WARN: Removed duplicated region for block: B:485:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00d0  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x00d4  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00db A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x00dc  */
    /* JADX WARN: Type inference failed for: r11v23 */
    /* JADX WARN: Type inference failed for: r11v24, types: [boolean] */
    /* JADX WARN: Type inference failed for: r11v49 */
    /* renamed from: updatePinnedMessageView */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void lambda$updateMessagesVisiblePart$161(boolean r35, int r36) {
        /*
            Method dump skipped, instructions count: 3688
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.lambda$updateMessagesVisiblePart$161(boolean, int):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessageView$221(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, View view) {
        if (getParentActivity() != null) {
            if (this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) {
                this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, messageObject, messageObject);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updatePinnedMessageView$222(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, PinnedMessageButton pinnedMessageButton, View view) {
        String str;
        if (getParentActivity() == null || !((this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) && (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && (str = tLRPC$KeyboardButton.url) != null)) {
            return false;
        }
        openClickableLink(null, str, true, null, messageObject);
        try {
            pinnedMessageButton.performHapticFeedback(0, 1);
        } catch (Exception unused) {
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$TrackingWidthSimpleTextView */
    /* loaded from: classes5.dex */
    public class TrackingWidthSimpleTextView extends SimpleTextView {
        private boolean trackWidth;

        public TrackingWidthSimpleTextView(Context context) {
            super(context);
            this.trackWidth = true;
        }

        public void setTrackWidth(boolean z) {
            this.trackWidth = z;
        }

        public boolean getTrackWidth() {
            return this.trackWidth;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.p043ui.ActionBar.SimpleTextView
        public boolean createLayout(int i) {
            boolean createLayout = super.createLayout(i);
            if (this.trackWidth && getVisibility() == 0) {
                ChatActivity.this.pinnedCounterTextViewX = getTextWidth() + AndroidUtilities.m107dp(4);
                if (ChatActivity.this.pinnedCounterTextView != null) {
                    ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                }
            }
            return createLayout;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x017b, code lost:
        if (((org.telegram.tgnet.TLRPC$TL_emojiStatusUntil) r8).until > ((int) (java.lang.System.currentTimeMillis() / 1000))) goto L360;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x01d9, code lost:
        if (getMessagesController().getTranslateController().isTranslateDialogHidden(getDialogId()) == false) goto L48;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x01fc, code lost:
        if (r0.getInt("dialog_show_translate_count" + r1, 5) <= 0) goto L48;
     */
    /* JADX WARN: Code restructure failed: missing block: B:64:0x01fe, code lost:
        r12 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0256  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0268  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x0275  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0297  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x029b  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x02a3  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02b5  */
    /* JADX WARN: Removed duplicated region for block: B:142:0x02b9  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x0389  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x03d6  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x0616  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x0622  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x065d A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:299:0x0757  */
    /* JADX WARN: Removed duplicated region for block: B:302:0x075e  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x0765  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x076a  */
    /* JADX WARN: Removed duplicated region for block: B:323:0x07ae  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x07b9  */
    /* JADX WARN: Removed duplicated region for block: B:340:0x07d5  */
    /* JADX WARN: Removed duplicated region for block: B:343:0x07df  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x0854  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x01b7  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01dc  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0204  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0208  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x020c  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x021b A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x022c A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x022f  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x023d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void updateTopPanel(boolean r31) {
        /*
            Method dump skipped, instructions count: 2249
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.updateTopPanel(boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$223(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$224(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    private void checkListViewPaddings() {
        MessageObject messageObject;
        if (!this.wasManualScroll && (messageObject = this.unreadMessageObject) != null) {
            if (this.messages.indexOf(messageObject) >= 0) {
                this.fixPaddingsInLayout = true;
                View view = this.fragmentView;
                if (view != null) {
                    view.requestLayout();
                }
            }
        } else if (this.checkPaddingsRunnable != null) {
        } else {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda198
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$checkListViewPaddings$225();
                }
            };
            this.checkPaddingsRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkListViewPaddings$225() {
        this.checkPaddingsRunnable = null;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkRaiseSensors() {
        BlurredFrameLayout blurredFrameLayout;
        FrameLayout frameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && !ChatObject.canSendVoice(tLRPC$Chat)) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (!ApplicationLoader.mainInterfacePaused && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && (((frameLayout = this.bottomOverlay) == null || frameLayout.getVisibility() != 0) && ((blurredFrameLayout2 = this.searchContainer) == null || blurredFrameLayout2.getVisibility() != 0)))) {
            MediaController.getInstance().setAllowStartRecord(true);
        } else {
            MediaController.getInstance().setAllowStartRecord(false);
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void dismissCurrentDialog() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null && this.visibleDialog == chatAttachAlert) {
            chatAttachAlert.getPhotoLayout().closeCamera(false);
            this.chatAttachAlert.dismissInternal();
            this.chatAttachAlert.getPhotoLayout().hideCamera(true);
            return;
        }
        super.dismissCurrentDialog();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void setInPreviewMode(boolean z) {
        PinnedMessageButton[] pinnedMessageButtonArr;
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        int i;
        int i2;
        TLRPC$Chat tLRPC$Chat;
        super.setInPreviewMode(z);
        previewMode = z;
        MediaController.getInstance().setNeedHiddenPlay(z);
        updateMultiPanelView();
        PinnedPlayerView pinnedPlayerView = this.pinnedPlayerView;
        boolean z2 = false;
        if (pinnedPlayerView != null) {
            pinnedPlayerView.setVisibility(z ? 8 : 0);
        }
        for (PinnedMessageButton pinnedMessageButton : this.pinnedMessageButton) {
            if (pinnedMessageButton != null) {
                pinnedMessageButton.setEnabled(true ^ isInPreviewMode());
            }
        }
        boolean contains = getRecentChatsController().getDialogTypesSettingsRecentChats().contains(this.recentChatsDialogType.getTitle());
        if (getMessagesController().isArchivedDialog(this.dialog_id)) {
            contains = getRecentChatsController().isSaveArchiveRecentChatsEnabled() && contains;
        }
        if (contains && !z && (((!isSecretChat() && this.currentUser != null) || ((tLRPC$Chat = this.currentChat) != null && !ChatObject.isForum(tLRPC$Chat) && getTemplatesController().getTemplatesChannelId() != (-this.dialog_id))) && !getHiddenChatsController().isChatHidden(this.dialog_id))) {
            getRecentChatsController().updateCreationDate(this.dialog_id, false);
        }
        if (this.currentUser != null && this.audioCallIconItem != null) {
            TLRPC$UserFull userFull = getMessagesController().getUserFull(this.currentUser.f1751id);
            if (userFull != null && userFull.phone_calls_available) {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            } else {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            }
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.setOccupyStatusBar(!z);
            this.avatarContainer.setTitleExpand(this.showAudioCallAsIcon);
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (!z) {
                i2 = 56;
            } else if (this.chatMode == 2) {
                i2 = 10;
            } else {
                i = 0;
                chatAvatarContainer2.setLayoutParams(LayoutHelper.createFrame(-2, -1, 51, i, 0, 40, 0));
            }
            i = i2;
            chatAvatarContainer2.setLayoutParams(LayoutHelper.createFrame(-2, -1, 51, i, 0, 40, 0));
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setVisibility(!z ? 0 : 4);
        }
        C3704ActionBar c3704ActionBar = this.actionBar;
        if (c3704ActionBar != null) {
            c3704ActionBar.setBackButtonDrawable(!z ? new BackDrawable(false) : null);
            this.actionBar.createMenu().setVisibility(0);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(!z ? 1.0f : 0.0f);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setAlpha(z ? 0.0f : 1.0f);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i3 = 0; i3 < childCount; i3++) {
                View childAt = this.chatListView.getChildAt(i3);
                boolean z3 = childAt instanceof ChatMessageCell;
                if (z3) {
                    messageObject = ((ChatMessageCell) childAt).getMessageObject();
                } else {
                    messageObject = childAt instanceof ChatActionCell ? ((ChatActionCell) childAt).getMessageObject() : null;
                }
                if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.media_unread && tLRPC$Message.mentioned) {
                    if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                        int i4 = this.newMentionsCount - 1;
                        this.newMentionsCount = i4;
                        if (i4 <= 0) {
                            this.newMentionsCount = 0;
                            this.hasAllMentionsLocal = true;
                            showMentionDownButton(false, true);
                        } else {
                            this.mentiondownButtonCounter.setText(String.format(Locale.US, "%d", Integer.valueOf(i4)));
                        }
                        getMessagesController().markMentionMessageAsRead(messageObject.getId(), ChatObject.isChannel(this.currentChat) ? this.currentChat.f1602id : 0L, this.dialog_id);
                        messageObject.setContentIsRead();
                    }
                    if (z3) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.setHighlighted(false);
                        chatMessageCell.setHighlightedAnimated();
                    }
                }
            }
            this.chatListView.setItemAnimator(null);
        }
        lambda$didReceivedNotification$183();
        updateSecretStatus();
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.setEnabled((z || this.isInsideContainer) ? false : true);
        }
        FragmentContextView fragmentContextView2 = this.fragmentLocationContextView;
        if (fragmentContextView2 != null) {
            if (!z && !this.isInsideContainer) {
                z2 = true;
            }
            fragmentContextView2.setEnabled(z2);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setEnabled(!isInPreviewMode());
        }
    }

    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    public void onResume() {
        ChatActivityEnterView chatActivityEnterView;
        MessageObject messageObject;
        boolean z;
        BackupImageView backupImageView;
        super.onResume();
        updateSelectTopicItem();
        updateAddToFolderItem();
        checkShowBlur(false);
        this.activityResumeTime = System.currentTimeMillis();
        if (this.openImport && getSendMessagesHelper().getImportingHistory(this.dialog_id) != null) {
            ImportingAlert importingAlert = new ImportingAlert(getParentActivity(), null, this, this.themeDelegate);
            importingAlert.setOnHideListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda57
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$onResume$226(dialogInterface);
                }
            });
            showDialog(importingAlert);
            this.openImport = false;
        }
        checkAdjustResize();
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.onResume();
        }
        checkChecksHint();
        Bulletin.Delegate delegate = new Bulletin.Delegate() { // from class: org.telegram.ui.ChatActivity.118
            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public boolean allowLayoutChanges() {
                return false;
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public /* synthetic */ boolean clipWithGradient(int i) {
                return Bulletin.Delegate.CC.$default$clipWithGradient(this, i);
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public /* synthetic */ void onBottomOffsetChange(float f) {
                Bulletin.Delegate.CC.$default$onBottomOffsetChange(this, f);
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public /* synthetic */ void onHide(Bulletin bulletin) {
                Bulletin.Delegate.CC.$default$onHide(this, bulletin);
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public /* synthetic */ void onShow(Bulletin bulletin) {
                Bulletin.Delegate.CC.$default$onShow(this, bulletin);
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public int getBottomOffset(int i) {
                int i2 = 0;
                if (i == 1) {
                    return 0;
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && chatActivityEnterView2.getVisibility() == 0) {
                    if ((ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.m107dp(20) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) || ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                        i2 = ChatActivity.this.chatActivityEnterView.getEmojiPadding() + ChatActivity.this.chatActivityEnterView.getHeight();
                    } else {
                        i2 = ChatActivity.this.chatActivityEnterView.getHeight();
                    }
                } else if (!ChatActivity.this.isInsideContainer) {
                    i2 = AndroidUtilities.m107dp(51);
                }
                if (ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    i2 = (int) (i2 + (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding()));
                }
                return ((int) (i2 + ChatActivity.this.contentPanTranslation)) - AndroidUtilities.m108dp(1.5f);
            }

            @Override // org.telegram.p043ui.Components.Bulletin.Delegate
            public int getTopOffset(int i) {
                return (((BaseFragment) ChatActivity.this).actionBar != null ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() + ((BaseFragment) ChatActivity.this).actionBar.getTop() : 0) + Math.max(0, ChatActivity.this.contentPaddingTop);
            }
        };
        this.bulletinDelegate = delegate;
        Bulletin.addDelegate(this, delegate);
        checkActionBarMenu(false);
        TLRPC$PhotoSize tLRPC$PhotoSize = this.replyImageLocation;
        if (tLRPC$PhotoSize != null && (backupImageView = this.replyImageView) != null) {
            backupImageView.setImage(ImageLocation.getForObject(tLRPC$PhotoSize, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
        }
        if (this.pinnedImageLocation != null && this.pinnedMessageImageView != null) {
            this.pinnedMessageImageView[0].setImage(ImageLocation.getForObject(this.pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)));
            this.pinnedMessageImageView[0].setHasBlur(this.pinnedImageHasBlur);
        }
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(this.dialog_id, getTopicId());
        }
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, true);
        if (this.scrollToTopOnResume) {
            if (this.scrollToTopUnReadOnResume && (messageObject = this.scrollToMessage) != null) {
                if (this.chatListView != null) {
                    int i = this.scrollToMessagePosition;
                    if (i == -9000) {
                        i = getScrollOffsetForMessage(messageObject);
                    } else if (i == -10000) {
                        i = -AndroidUtilities.m107dp(11);
                    } else {
                        z = true;
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                    }
                    z = false;
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                }
            } else {
                moveScrollToLastMessage(false);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        if (this.needOpenKeyboardOnStart) {
            this.needOpenKeyboardOnStart = false;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda200
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onResume$227();
                }
            }, 100L);
        }
        BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
        if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() != 0 && !this.actionBar.isSearchFieldVisible()) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda196
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onResume$228();
                }
            });
        }
        if (this.chatListView != null && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
        updateTitle(false);
        showGigagroupConvertAlert();
        if (this.pullingDownOffset != BitmapDescriptorFactory.HUE_RED) {
            this.pullingDownOffset = BitmapDescriptorFactory.HUE_RED;
            this.chatListView.invalidate();
        }
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.attach();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$226(DialogInterface dialogInterface) {
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.checkImport(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$227() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setFieldFocused();
            this.chatActivityEnterView.openKeyboard();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$228() {
        openVideoEditor(this.startVideoEdit, null);
        this.startVideoEdit = null;
    }

    public float getPullingDownOffset() {
        return this.pullingDownOffset;
    }

    public void checkAdjustResize() {
        if (this.reportType >= 0) {
            AndroidUtilities.requestAdjustNothing(getParentActivity(), this.classGuid);
        } else {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void finishFragment() {
        super.finishFragment();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:141:0x0249  */
    /* JADX WARN: Removed duplicated region for block: B:142:0x0282  */
    @Override // com.iMe.p030ui.base.mvp.MvpFragment, org.telegram.p043ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void onPause() {
        /*
            Method dump skipped, instructions count: 747
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.onPause():void");
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void applyDraftMaybe(boolean z) {
        TLRPC$DraftMessage draft;
        Long l;
        TLRPC$Message tLRPC$Message;
        TLRPC$DraftMessage tLRPC$DraftMessage;
        TLRPC$TL_forumTopic findTopic;
        MessageObject messageObject;
        String str;
        TLRPC$DraftMessage tLRPC$DraftMessage2;
        long j;
        Paint.FontMetricsInt fontMetricsInt;
        AnimatedEmojiSpan animatedEmojiSpan;
        TLRPC$InputReplyTo tLRPC$InputReplyTo;
        TLRPC$DraftMessage tLRPC$DraftMessage3;
        Long l2;
        if (this.chatActivityEnterView == null || this.chatMode != 0) {
            return;
        }
        Paint.FontMetricsInt fontMetricsInt2 = null;
        if (isForumInViewAsMessagesMode()) {
            Pair<Long, TLRPC$DraftMessage> oneThreadDraft = getMediaDataController().getOneThreadDraft(this.dialog_id);
            if (oneThreadDraft != null) {
                l2 = (Long) oneThreadDraft.first;
                tLRPC$DraftMessage3 = (TLRPC$DraftMessage) oneThreadDraft.second;
            } else {
                tLRPC$DraftMessage3 = null;
                l2 = null;
            }
            l = l2;
            draft = tLRPC$DraftMessage3;
        } else {
            draft = getMediaDataController().getDraft(this.dialog_id, this.threadMessageId);
            l = null;
        }
        if (draft == null || (tLRPC$InputReplyTo = draft.reply_to) == null || tLRPC$InputReplyTo.reply_to_msg_id == 0) {
            tLRPC$Message = null;
        } else {
            tLRPC$Message = getMediaDataController().getDraftMessage(this.dialog_id, l != null ? l.longValue() : this.threadMessageId);
        }
        if (this.chatActivityEnterView.getFieldText() != null) {
            tLRPC$DraftMessage = draft;
            if (z && tLRPC$DraftMessage == null) {
                this.chatActivityEnterView.setFieldText("");
                hideFieldPanel(true);
            }
        } else if (draft != null) {
            this.chatActivityEnterView.setWebPage(null, !draft.no_webpage);
            if (!draft.entities.isEmpty()) {
                SpannableStringBuilder valueOf = SpannableStringBuilder.valueOf(draft.message);
                MediaDataController.sortEntities(draft.entities);
                int i = 0;
                while (i < draft.entities.size()) {
                    TLRPC$MessageEntity tLRPC$MessageEntity = draft.entities.get(i);
                    boolean z2 = tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName;
                    if (z2 || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName)) {
                        tLRPC$DraftMessage2 = draft;
                        if (z2) {
                            j = ((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id;
                        } else {
                            j = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                        }
                        if (tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length < valueOf.length() && valueOf.charAt(tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length) == ' ') {
                            tLRPC$MessageEntity.length++;
                        }
                        URLSpanUserMention uRLSpanUserMention = new URLSpanUserMention("" + j, 3);
                        int i2 = tLRPC$MessageEntity.offset;
                        valueOf.setSpan(uRLSpanUserMention, i2, tLRPC$MessageEntity.length + i2, 33);
                    } else if ((tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCode) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityPre)) {
                        tLRPC$DraftMessage2 = draft;
                        TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
                        textStyleRun.flags |= 4;
                        TextStyleSpan textStyleSpan = new TextStyleSpan(textStyleRun);
                        int i3 = tLRPC$MessageEntity.offset;
                        MediaDataController.addStyleToText(textStyleSpan, i3, tLRPC$MessageEntity.length + i3, valueOf, true);
                    } else {
                        if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityBold) {
                            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
                            textStyleRun2.flags |= 1;
                            TextStyleSpan textStyleSpan2 = new TextStyleSpan(textStyleRun2);
                            int i4 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan2, i4, tLRPC$MessageEntity.length + i4, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityItalic) {
                            TextStyleSpan.TextStyleRun textStyleRun3 = new TextStyleSpan.TextStyleRun();
                            textStyleRun3.flags |= 2;
                            TextStyleSpan textStyleSpan3 = new TextStyleSpan(textStyleRun3);
                            int i5 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan3, i5, tLRPC$MessageEntity.length + i5, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityStrike) {
                            TextStyleSpan.TextStyleRun textStyleRun4 = new TextStyleSpan.TextStyleRun();
                            textStyleRun4.flags |= 8;
                            TextStyleSpan textStyleSpan4 = new TextStyleSpan(textStyleRun4);
                            int i6 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan4, i6, tLRPC$MessageEntity.length + i6, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityUnderline) {
                            TextStyleSpan.TextStyleRun textStyleRun5 = new TextStyleSpan.TextStyleRun();
                            textStyleRun5.flags |= 16;
                            TextStyleSpan textStyleSpan5 = new TextStyleSpan(textStyleRun5);
                            int i7 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan5, i7, tLRPC$MessageEntity.length + i7, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityTextUrl) {
                            URLSpanReplacement uRLSpanReplacement = new URLSpanReplacement(tLRPC$MessageEntity.url);
                            int i8 = tLRPC$MessageEntity.offset;
                            valueOf.setSpan(uRLSpanReplacement, i8, tLRPC$MessageEntity.length + i8, 33);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntitySpoiler) {
                            TextStyleSpan.TextStyleRun textStyleRun6 = new TextStyleSpan.TextStyleRun();
                            textStyleRun6.flags |= 256;
                            TextStyleSpan textStyleSpan6 = new TextStyleSpan(textStyleRun6);
                            int i9 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan6, i9, tLRPC$MessageEntity.length + i9, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji) {
                            try {
                                fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                            } catch (Exception e) {
                                FileLog.m101e((Throwable) e, false);
                                fontMetricsInt = fontMetricsInt2;
                            }
                            TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji = (TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity;
                            if (tLRPC$TL_messageEntityCustomEmoji.document != null) {
                                animatedEmojiSpan = new AnimatedEmojiSpan(tLRPC$TL_messageEntityCustomEmoji.document, fontMetricsInt);
                                tLRPC$DraftMessage2 = draft;
                            } else {
                                tLRPC$DraftMessage2 = draft;
                                animatedEmojiSpan = new AnimatedEmojiSpan(tLRPC$TL_messageEntityCustomEmoji.document_id, fontMetricsInt);
                            }
                            int i10 = tLRPC$MessageEntity.offset;
                            valueOf.setSpan(animatedEmojiSpan, i10, tLRPC$MessageEntity.length + i10, 33);
                        }
                        tLRPC$DraftMessage2 = draft;
                    }
                    i++;
                    draft = tLRPC$DraftMessage2;
                    fontMetricsInt2 = null;
                }
                tLRPC$DraftMessage = draft;
                str = valueOf;
            } else {
                tLRPC$DraftMessage = draft;
                str = tLRPC$DraftMessage.message;
            }
            this.chatActivityEnterView.setFieldText(str, true, true);
            if (getArguments().getBoolean("hasUrl", false)) {
                this.chatActivityEnterView.setSelection(tLRPC$DraftMessage.message.indexOf(10) + 1);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda178
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$applyDraftMaybe$229();
                    }
                }, 700L);
            }
        } else {
            tLRPC$DraftMessage = draft;
        }
        MessageObject messageObject2 = this.replyingMessageObject;
        if (messageObject2 == null || this.threadMessageObject == messageObject2) {
            if (tLRPC$Message != null && ((messageObject = this.threadMessageObject) == null || messageObject.getId() != tLRPC$Message.f1626id)) {
                this.replyFromOnResume = !z;
                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (AbstractMap<Long, TLRPC$User>) getMessagesController().getUsers(), false, false);
                this.replyingMessageObject = messageObject3;
                TLRPC$InputReplyTo tLRPC$InputReplyTo2 = tLRPC$DraftMessage.reply_to;
                if (tLRPC$InputReplyTo2 != null) {
                    int i11 = tLRPC$InputReplyTo2.flags;
                    if ((i11 & 4) != 0) {
                        this.replyingQuote = ReplyQuote.from(messageObject3, tLRPC$InputReplyTo2.quote_text, (i11 & 16) != 0 ? tLRPC$InputReplyTo2.quote_offset : -1);
                    }
                }
                checkNewMessagesOnQuoteEdit(false);
                ReplyQuote replyQuote = this.replyingQuote;
                if (replyQuote != null) {
                    showFieldPanelForReplyQuote(this.replyingMessageObject, replyQuote);
                } else {
                    showFieldPanelForReply(this.replyingMessageObject);
                }
                lambda$didReceivedNotification$183();
            } else if (l == null || l.longValue() == 0 || this.currentChat == null || (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.f1602id, l.longValue())) == null || findTopic.topicStartMessage == null) {
            } else {
                MessageObject messageObject4 = new MessageObject(this.currentAccount, findTopic.topicStartMessage, (AbstractMap<Long, TLRPC$User>) getMessagesController().getUsers(), false, false);
                this.replyingMessageObject = messageObject4;
                messageObject4.replyToForumTopic = findTopic;
                showFieldPanelForReply(messageObject4);
                lambda$didReceivedNotification$183();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyDraftMaybe$229() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setFieldFocused(true);
            this.chatActivityEnterView.openKeyboard();
        }
    }

    private void checkNewMessagesOnQuoteEdit(boolean z) {
        if (this.replyingMessageObject == null) {
            return;
        }
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = this.messages.get(i);
            if (messageObject != null && messageObject.getId() == this.replyingMessageObject.getId() && messageObject.getDialogId() == this.replyingMessageObject.getDialogId()) {
                this.replyingMessageObject = messageObject;
                ReplyQuote replyQuote = this.replyingQuote;
                if (replyQuote != null) {
                    replyQuote.checkEdit(messageObject);
                }
                if (z) {
                    MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                    if (messagePreviewParams != null) {
                        MessageObject messageObject2 = this.replyingMessageObject;
                        MessageObject.GroupedMessages groupedMessages = this.replyingQuoteGroup;
                        if (groupedMessages == null) {
                            groupedMessages = getGroup(messageObject2.getGroupId());
                        }
                        messagePreviewParams.updateReply(messageObject2, groupedMessages, this.dialog_id, this.replyingQuote);
                    }
                    fallbackFieldPanel();
                    return;
                }
                return;
            }
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat != null) {
            ArrayList<Long> arrayList = new ArrayList<>();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                int childCount = recyclerListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = this.chatListView.getChildAt(i);
                    MessageObject messageObject = childAt instanceof ChatMessageCell ? ((ChatMessageCell) childAt).getMessageObject() : null;
                    if (messageObject != null && messageObject.getId() < 0) {
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            arrayList.add(Long.valueOf(j));
                        }
                    }
                }
            }
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, arrayList, 0);
            return;
        }
        SecretMediaViewer secretMediaViewer = SecretMediaViewer.getInstance();
        MessageObject currentMessageObject = secretMediaViewer.getCurrentMessageObject();
        if (currentMessageObject == null || currentMessageObject.isOut()) {
            return;
        }
        MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, secretMediaViewer.getOpenTime(), secretMediaViewer.getCloseTime(), this.currentUser, null, null, currentMessageObject.getId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean fixLayoutInternal() {
        boolean z;
        MessageObject.GroupedMessages currentMessagesGroup;
        NumberTextView numberTextView = this.selectedMessagesCountTextView;
        if (numberTextView != null) {
            numberTextView.setTextSize((AndroidUtilities.isTablet() || ApplicationLoader.applicationContext.getResources().getConfiguration().orientation != 2) ? 20 : 18);
        }
        int childCount = this.chatListView.getChildCount();
        HashMap hashMap = null;
        int i = 0;
        while (true) {
            z = true;
            if (i >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (currentMessagesGroup = ((ChatMessageCell) childAt).getCurrentMessagesGroup()) != null && currentMessagesGroup.hasSibling && !currentMessagesGroup.messages.isEmpty()) {
                if (hashMap == null) {
                    hashMap = new HashMap();
                }
                if (!hashMap.containsKey(Long.valueOf(currentMessagesGroup.groupId))) {
                    hashMap.put(Long.valueOf(currentMessagesGroup.groupId), currentMessagesGroup);
                    ArrayList<MessageObject> arrayList = currentMessagesGroup.messages;
                    int indexOf = this.messages.indexOf(arrayList.get(arrayList.size() - 1));
                    if (indexOf >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf + chatActivityAdapter.messagesStartRow, currentMessagesGroup.messages.size());
                        this.chatListView.setItemAnimator(null);
                    }
                }
            }
            i++;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            } else {
                C3704ActionBar c3704ActionBar = this.actionBar;
                INavigationLayout iNavigationLayout = this.parentLayout;
                if (iNavigationLayout != null && !iNavigationLayout.getFragmentStack().isEmpty() && this.parentLayout.getFragmentStack().get(0) != this && this.parentLayout.getFragmentStack().size() != 1) {
                    z = false;
                }
                c3704ActionBar.setBackButtonDrawable(new BackDrawable(z));
            }
            return false;
        }
        return true;
    }

    private void fixLayout() {
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.119
                @Override // android.view.ViewTreeObserver.OnPreDrawListener
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    public boolean maybePlayVisibleVideo() {
        AnimatedFileDrawable animatedFileDrawable;
        MessageObject messageObject;
        ImageReceiver photoImage;
        AnimatedFileDrawable animation;
        ChatMessageCell messageCell;
        if (this.chatListView == null) {
            return false;
        }
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject == null || playingMessageObject.isVideo()) {
            HintView hintView = this.noSoundHintView;
            if (hintView == null || hintView.getTag() == null || (messageCell = this.noSoundHintView.getMessageCell()) == null) {
                animatedFileDrawable = null;
                messageObject = null;
            } else {
                ImageReceiver photoImage2 = messageCell.getPhotoImage();
                animatedFileDrawable = photoImage2.getAnimation();
                if (animatedFileDrawable != null) {
                    messageObject = messageCell.getMessageObject();
                    this.scrollToVideo = ((float) messageCell.getTop()) + photoImage2.getImageY2() > ((float) this.chatListView.getMeasuredHeight());
                } else {
                    messageObject = null;
                }
            }
            if (messageObject == null) {
                int childCount = this.chatListView.getChildCount();
                int i = 0;
                while (true) {
                    if (i >= childCount) {
                        break;
                    }
                    View childAt = this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject messageObject2 = chatMessageCell.getMessageObject();
                        boolean isRoundVideo = messageObject2.isRoundVideo();
                        if (!messageObject2.isRoundOnce() && !messageObject2.isVoiceOnce() && ((messageObject2.isVideo() || isRoundVideo) && messageObject2.videoEditedInfo == null && (animation = (photoImage = chatMessageCell.getPhotoImage()).getAnimation()) != null)) {
                            float top = childAt.getTop() + photoImage.getImageY();
                            float imageHeight = photoImage.getImageHeight() + top;
                            if (imageHeight >= BitmapDescriptorFactory.HUE_RED && top <= this.chatListView.getMeasuredHeight()) {
                                if (messageObject != null && top < BitmapDescriptorFactory.HUE_RED) {
                                    break;
                                }
                                this.scrollToVideo = top < BitmapDescriptorFactory.HUE_RED || imageHeight > ((float) this.chatListView.getMeasuredHeight());
                                if (top >= BitmapDescriptorFactory.HUE_RED && imageHeight <= this.chatListView.getMeasuredHeight()) {
                                    messageObject = messageObject2;
                                    animatedFileDrawable = animation;
                                    break;
                                }
                                messageObject = messageObject2;
                                animatedFileDrawable = animation;
                            }
                        }
                    }
                    i++;
                }
            }
            if (messageObject == null || MediaController.getInstance().isPlayingMessage(messageObject)) {
                return false;
            }
            hideHints(true);
            if (messageObject.isRoundVideo()) {
                boolean playMessage = MediaController.getInstance().playMessage(messageObject);
                MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return playMessage;
            }
            SharedConfig.setNoSoundHintShowed(true);
            messageObject.audioProgress = animatedFileDrawable.getCurrentProgress();
            messageObject.audioProgressMs = animatedFileDrawable.getCurrentProgressMs();
            animatedFileDrawable.stop();
            if (PhotoViewer.isPlayingMessageInPip(messageObject)) {
                PhotoViewer.getPipInstance().destroyPhotoViewer();
            }
            return MediaController.getInstance().playMessage(messageObject);
        }
        return false;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void onConfigurationChanged(Configuration configuration) {
        MessageObject playingMessageObject;
        fixLayout();
        Dialog dialog = this.visibleDialog;
        if (dialog instanceof DatePickerDialog) {
            dialog.dismiss();
        }
        closeMenu();
        if (AndroidUtilities.isTablet()) {
            return;
        }
        if (configuration.orientation == 2) {
            if ((PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || !playingMessageObject.isVideo()) {
                return;
            }
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            MediaController.getInstance().cleanupPlayer(true, true, false, true);
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i = playingMessageObject.type;
            if (photoViewer.openPhoto(playingMessageObject, i != 0 ? this.dialog_id : 0L, i != 0 ? this.mergeDialogId : 0L, i != 0 ? getTopicId() : 0L, this.photoViewerProvider, false)) {
                PhotoViewer.getInstance().setParentChatActivity(this);
            }
            hideHints(false);
            MediaController.getInstance().resetGoingToShowMessageObject();
        } else if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
            PhotoViewer.getInstance().injectVideoPlayerToMediaController();
            PhotoViewer.getInstance().closePhoto(false, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        createDeleteMessagesAlert(messageObject, groupedMessages, 1);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i) {
        createDeleteMessagesAlert(messageObject, groupedMessages, i, false);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i, boolean z) {
        if (messageObject == null && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = this.mergeDialogId;
        SparseArray<MessageObject>[] sparseArrayArr = this.selectedMessagesIds;
        int i2 = this.chatMode;
        AlertsCreator.createDeleteMessagesAlert(this, tLRPC$User, tLRPC$Chat, tLRPC$EncryptedChat, tLRPC$ChatFull, j, messageObject, sparseArrayArr, groupedMessages, i2 == 1, i2 == 3, i, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda177
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$230();
            }
        }, z ? new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda227
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$231();
            }
        } : null, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$230() {
        hideActionMode();
        updatePinnedMessageView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$231() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideActionMode() {
        EditTextCaption editField;
        C3704ActionBar c3704ActionBar = this.actionBar;
        if (c3704ActionBar != null) {
            if (!c3704ActionBar.isActionModeShowed()) {
                return;
            }
            this.actionBar.hideActionMode();
        }
        lockMultiPanel(false);
        this.canCopyLinkMessagesCount = 0;
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.cantSaveMessagesCount = 0;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && (editField = chatActivityEnterView.getEditField()) != null) {
            if (this.chatActivityEnterView.getVisibility() == 0) {
                editField.requestFocus();
            }
            editField.setAllowDrawCursor(true);
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear(true);
            this.textSelectionHelper.cancelAllAnimators();
        }
        TextSelectionHint textSelectionHint = this.textSelectionHint;
        if (textSelectionHint != null) {
            textSelectionHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.preventInput = false;
        }
        this.textSelectionHintWasShowed = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean createMenu(View view, boolean z, boolean z2, float f, float f2) {
        return createMenu(view, z, z2, f, f2, true);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        return getMessageCaption(messageObject, groupedMessages, null);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int[] iArr) {
        if (messageObject == null) {
            return null;
        }
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (TextUtils.isEmpty(restrictionReason)) {
            if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
                return messageObject.getVoiceTranscription();
            }
            CharSequence charSequence = messageObject.caption;
            if (charSequence != null) {
                return charSequence;
            }
            if (groupedMessages == null) {
                return null;
            }
            int size = groupedMessages.messages.size();
            CharSequence charSequence2 = null;
            for (int i = 0; i < size; i++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i);
                CharSequence charSequence3 = messageObject2.caption;
                if (charSequence3 != null) {
                    if (charSequence2 != null) {
                        return null;
                    }
                    if (iArr != null) {
                        iArr[0] = messageObject2.getId();
                    }
                    charSequence2 = charSequence3;
                }
            }
            return charSequence2;
        }
        return restrictionReason;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:1168:0x1bed, code lost:
        if (r2.isEmpty() == false) goto L931;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1181:0x1c12, code lost:
        if ((r7.available_reactions instanceof org.telegram.tgnet.TLRPC$TL_chatReactionsNone) == false) goto L944;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1184:0x1c1c, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(r61.currentChat) == false) goto L944;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1186:0x1c20, code lost:
        if (r61.currentUser != null) goto L944;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1188:0x1c26, code lost:
        if (r2.isEmpty() != false) goto L382;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1405:0x22b5, code lost:
        r8.addView((android.view.View) new org.telegram.p043ui.ActionBar.ActionBarPopupWindow.GapView(r9.contentView.getContext(), r9.themeDelegate), org.telegram.p043ui.Components.LayoutHelper.createLinear(r10, 8));
     */
    /* JADX WARN: Code restructure failed: missing block: B:395:0x0779, code lost:
        if (org.telegram.messenger.Emoji.fullyConsistsOfEmojis(r3) != false) goto L1706;
     */
    /* JADX WARN: Code restructure failed: missing block: B:529:0x0a62, code lost:
        if (r3.contains(r10) == false) goto L1257;
     */
    /* JADX WARN: Code restructure failed: missing block: B:533:0x0a6c, code lost:
        if ((r3.action instanceof org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate) == false) goto L1239;
     */
    /* JADX WARN: Code restructure failed: missing block: B:670:0x0d4d, code lost:
        if (r2.edit_messages != false) goto L1388;
     */
    /* JADX WARN: Code restructure failed: missing block: B:858:0x13c3, code lost:
        if (r3.contains(r10) == false) goto L1479;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1016:0x187c  */
    /* JADX WARN: Removed duplicated region for block: B:1025:0x18c1  */
    /* JADX WARN: Removed duplicated region for block: B:1033:0x1908  */
    /* JADX WARN: Removed duplicated region for block: B:1043:0x1950  */
    /* JADX WARN: Removed duplicated region for block: B:1071:0x1a02  */
    /* JADX WARN: Removed duplicated region for block: B:1077:0x1a3c  */
    /* JADX WARN: Removed duplicated region for block: B:1078:0x1a51  */
    /* JADX WARN: Removed duplicated region for block: B:1081:0x1a67 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1087:0x1a8c  */
    /* JADX WARN: Removed duplicated region for block: B:1094:0x1ac6  */
    /* JADX WARN: Removed duplicated region for block: B:1107:0x1b0b  */
    /* JADX WARN: Removed duplicated region for block: B:1118:0x1b37 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1123:0x1b40  */
    /* JADX WARN: Removed duplicated region for block: B:1125:0x1b49  */
    /* JADX WARN: Removed duplicated region for block: B:1274:0x1d41  */
    /* JADX WARN: Removed duplicated region for block: B:1288:0x1d61  */
    /* JADX WARN: Removed duplicated region for block: B:1289:0x1d64  */
    /* JADX WARN: Removed duplicated region for block: B:1292:0x1d70 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1300:0x1db3  */
    /* JADX WARN: Removed duplicated region for block: B:1317:0x1e34  */
    /* JADX WARN: Removed duplicated region for block: B:1318:0x1e37  */
    /* JADX WARN: Removed duplicated region for block: B:1321:0x1e70  */
    /* JADX WARN: Removed duplicated region for block: B:1322:0x1e72  */
    /* JADX WARN: Removed duplicated region for block: B:1325:0x1e7a  */
    /* JADX WARN: Removed duplicated region for block: B:1326:0x1e80  */
    /* JADX WARN: Removed duplicated region for block: B:1329:0x1e9b  */
    /* JADX WARN: Removed duplicated region for block: B:1352:0x202c  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:1408:0x22d1  */
    /* JADX WARN: Removed duplicated region for block: B:1410:0x22df  */
    /* JADX WARN: Removed duplicated region for block: B:1411:0x246c  */
    /* JADX WARN: Removed duplicated region for block: B:1483:0x27b7  */
    /* JADX WARN: Removed duplicated region for block: B:1484:0x27d9  */
    /* JADX WARN: Removed duplicated region for block: B:1488:0x27ea A[LOOP:7: B:1486:0x27e2->B:1488:0x27ea, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:1491:0x2803  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0292  */
    /* JADX WARN: Removed duplicated region for block: B:1521:0x293c  */
    /* JADX WARN: Removed duplicated region for block: B:1522:0x293f  */
    /* JADX WARN: Removed duplicated region for block: B:1525:0x2949  */
    /* JADX WARN: Removed duplicated region for block: B:1526:0x294c  */
    /* JADX WARN: Removed duplicated region for block: B:1529:0x2996  */
    /* JADX WARN: Removed duplicated region for block: B:1530:0x299a  */
    /* JADX WARN: Removed duplicated region for block: B:1533:0x29a4  */
    /* JADX WARN: Removed duplicated region for block: B:1534:0x29a9  */
    /* JADX WARN: Removed duplicated region for block: B:1554:0x2aa2  */
    /* JADX WARN: Removed duplicated region for block: B:1557:0x2acf  */
    /* JADX WARN: Removed duplicated region for block: B:1558:0x2ad6  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x02a8 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1672:0x2d95  */
    /* JADX WARN: Removed duplicated region for block: B:1679:0x2e05  */
    /* JADX WARN: Removed duplicated region for block: B:1680:0x2e0a  */
    /* JADX WARN: Removed duplicated region for block: B:1685:0x2e32  */
    /* JADX WARN: Removed duplicated region for block: B:1688:0x2e5e  */
    /* JADX WARN: Removed duplicated region for block: B:1690:0x2e61  */
    /* JADX WARN: Removed duplicated region for block: B:1701:0x2ebb  */
    /* JADX WARN: Removed duplicated region for block: B:1708:0x2ed9  */
    /* JADX WARN: Removed duplicated region for block: B:1709:0x2edf  */
    /* JADX WARN: Removed duplicated region for block: B:1712:0x2efa  */
    /* JADX WARN: Removed duplicated region for block: B:1715:0x2f01  */
    /* JADX WARN: Removed duplicated region for block: B:1718:0x2f08  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x02f1  */
    /* JADX WARN: Removed duplicated region for block: B:1770:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:180:0x030e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:183:0x031a  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0342  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x0344  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x034c  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x03e1  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0565 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:308:0x0566  */
    /* JADX WARN: Removed duplicated region for block: B:335:0x0626  */
    /* JADX WARN: Removed duplicated region for block: B:387:0x0749 A[Catch: Exception -> 0x075e, LOOP:13: B:385:0x0743->B:387:0x0749, LOOP_END, TryCatch #0 {Exception -> 0x075e, blocks: (B:384:0x0727, B:385:0x0743, B:387:0x0749, B:388:0x075a), top: B:1726:0x0727 }] */
    /* JADX WARN: Removed duplicated region for block: B:394:0x0775  */
    /* JADX WARN: Removed duplicated region for block: B:399:0x0782  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x078d  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x07c3  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x082c  */
    /* JADX WARN: Removed duplicated region for block: B:969:0x171a  */
    /* JADX WARN: Removed duplicated region for block: B:970:0x171d  */
    /* JADX WARN: Removed duplicated region for block: B:974:0x173a  */
    /* JADX WARN: Removed duplicated region for block: B:976:0x174d  */
    /* JADX WARN: Removed duplicated region for block: B:983:0x178b  */
    /* JADX WARN: Removed duplicated region for block: B:993:0x17cf  */
    /* JADX WARN: Removed duplicated region for block: B:999:0x1809  */
    /* JADX WARN: Type inference failed for: r11v4 */
    /* JADX WARN: Type inference failed for: r11v5, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r11v98 */
    /* JADX WARN: Type inference failed for: r12v21 */
    /* JADX WARN: Type inference failed for: r12v22, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r12v36 */
    /* JADX WARN: Type inference failed for: r13v57, types: [android.widget.LinearLayout, android.view.View] */
    /* JADX WARN: Type inference failed for: r2v207 */
    /* JADX WARN: Type inference failed for: r2v208, types: [boolean] */
    /* JADX WARN: Type inference failed for: r2v233 */
    /* JADX WARN: Type inference failed for: r4v108, types: [boolean] */
    /* JADX WARN: Type inference failed for: r7v12, types: [org.telegram.ui.Components.ReactionsContainerLayout] */
    /* JADX WARN: Type inference failed for: r7v13 */
    /* JADX WARN: Type inference failed for: r7v26, types: [android.widget.LinearLayout, org.telegram.ui.Components.ReactedUsersListView$ContainerLinerLayout] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public boolean createMenu(android.view.View r62, boolean r63, boolean r64, float r65, float r66, boolean r67) {
        /*
            Method dump skipped, instructions count: 12076
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.createMenu(android.view.View, boolean, boolean, float, float, boolean):boolean");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$232(MessageObject messageObject) {
        scrollToMessageId(messageObject.getReplyMsgId(), messageObject.messageOwner.f1626id, true, messageObject.getDialogId() == this.mergeDialogId ? 1 : 0, false, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$234(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda271
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$233(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$233(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_payments_paymentReceipt) {
            presentFragment(new PaymentFormActivity((TLRPC$TL_payments_paymentReceipt) tLObject));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$235(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$237(ViewPager viewPager, int i, LinearLayout linearLayout, AtomicBoolean atomicBoolean, final HorizontalScrollView horizontalScrollView, final ReactionTabHolderView reactionTabHolderView, View view) {
        int currentItem = viewPager.getCurrentItem();
        if (i == currentItem) {
            return;
        }
        final ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(currentItem);
        atomicBoolean.set(true);
        viewPager.setCurrentItem(i, true);
        final float scrollX = horizontalScrollView.getScrollX();
        final float x = reactionTabHolderView.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
        ValueAnimator duration = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f).setDuration(150L);
        duration.setInterpolator(CubicBezierInterpolator.DEFAULT);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda0
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$236(horizontalScrollView, scrollX, x, reactionTabHolderView2, reactionTabHolderView, valueAnimator);
            }
        });
        duration.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$236(HorizontalScrollView horizontalScrollView, float f, float f2, ReactionTabHolderView reactionTabHolderView, ReactionTabHolderView reactionTabHolderView2, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        horizontalScrollView.setScrollX((int) (f + ((f2 - f) * floatValue)));
        reactionTabHolderView.setOutlineProgress(1.0f - floatValue);
        reactionTabHolderView2.setOutlineProgress(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$121  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass121 extends PagerAdapter {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ SparseArray val$cachedViews;
        final /* synthetic */ List val$counters;
        final /* synthetic */ int val$finalCount;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ int val$head;
        final /* synthetic */ MessageObject val$message;
        final /* synthetic */ ViewPager val$pager;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ ReactedHeaderView val$reactedView;
        final /* synthetic */ boolean val$showAllReactionsTab;
        final /* synthetic */ int val$size;

        @Override // androidx.viewpager.widget.PagerAdapter
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }

        AnonymousClass121(int i, SparseArray sparseArray, boolean z, List list, MessageObject messageObject, ReactedHeaderView reactedHeaderView, SparseIntArray sparseIntArray, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, int i3) {
            this.val$size = i;
            this.val$cachedViews = sparseArray;
            this.val$showAllReactionsTab = z;
            this.val$counters = list;
            this.val$message = messageObject;
            this.val$reactedView = reactedHeaderView;
            this.val$cachedHeights = sparseIntArray;
            this.val$head = i2;
            this.val$pager = viewPager;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
            this.val$finalCount = i3;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public int getCount() {
            return this.val$size;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public Object instantiateItem(ViewGroup viewGroup, final int i) {
            View view = (View) this.val$cachedViews.get(i);
            if (view != null) {
                viewGroup.addView(view);
                return view;
            }
            int i2 = this.val$showAllReactionsTab ? i - 1 : i;
            TLRPC$ReactionCount tLRPC$ReactionCount = i2 >= 0 ? (TLRPC$ReactionCount) this.val$counters.get(i2) : null;
            Context context = viewGroup.getContext();
            ChatActivity chatActivity = ChatActivity.this;
            ReactedUsersListView onCustomEmojiSelectedListener = new ReactedUsersListView(context, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, this.val$message, tLRPC$ReactionCount, false).setSeenUsers(this.val$reactedView.getSeenUsers()).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$121$$ExternalSyntheticLambda0
                @Override // org.telegram.p043ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
                    ChatActivity.AnonymousClass121.this.lambda$instantiateItem$0(reactedUsersListView, arrayList);
                }
            });
            final MessageObject messageObject = this.val$message;
            ReactedUsersListView onProfileSelectedListener = onCustomEmojiSelectedListener.setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$121$$ExternalSyntheticLambda2
                @Override // org.telegram.p043ui.Components.ReactedUsersListView.OnProfileSelectedListener
                public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
                    ChatActivity.AnonymousClass121.this.lambda$instantiateItem$1(messageObject, reactedUsersListView, j, tLRPC$MessagePeerReaction);
                }
            });
            final SparseIntArray sparseIntArray = this.val$cachedHeights;
            final int i3 = this.val$head;
            final ViewPager viewPager = this.val$pager;
            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = this.val$popupLayout;
            final int[] iArr = this.val$foregroundIndex;
            ReactedUsersListView onHeightChangedListener = onProfileSelectedListener.setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$121$$ExternalSyntheticLambda1
                @Override // org.telegram.p043ui.Components.ReactedUsersListView.OnHeightChangedListener
                public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i4) {
                    ChatActivity.AnonymousClass121.lambda$instantiateItem$2(sparseIntArray, i, i3, viewPager, actionBarPopupWindowLayout, iArr, reactedUsersListView, i4);
                }
            });
            if (i2 < 0) {
                onHeightChangedListener.setPredictiveCount(this.val$finalCount);
                this.val$reactedView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda139(onHeightChangedListener));
            }
            viewGroup.addView(onHeightChangedListener);
            this.val$cachedViews.put(i, onHeightChangedListener);
            return onHeightChangedListener;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$0(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.121.1
                @Override // org.telegram.p043ui.Components.EmojiPacksAlert, org.telegram.p043ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$1(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
            Bundle bundle = new Bundle();
            if (j > 0) {
                bundle.putLong("user_id", j);
            } else {
                bundle.putLong("chat_id", -j);
            }
            bundle.putInt("report_reaction_message_id", messageObject.getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$instantiateItem$2(SparseIntArray sparseIntArray, int i, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i3) {
            int i4 = i2 + i3;
            sparseIntArray.put(i, i4);
            if (viewPager.getCurrentItem() == i) {
                actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], i4, true);
            }
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public void destroyItem(ViewGroup viewGroup, int i, Object obj) {
            viewGroup.removeView((View) obj);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$238(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.123
            @Override // org.telegram.p043ui.Components.EmojiPacksAlert, org.telegram.p043ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$239(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
        Bundle bundle = new Bundle();
        if (j > 0) {
            bundle.putLong("user_id", j);
        } else {
            bundle.putLong("chat_id", -j);
        }
        bundle.putInt("report_reaction_message_id", messageObject.getId());
        bundle.putLong("report_reaction_from_dialog_id", this.dialog_id);
        presentFragment(new ProfileActivity(bundle));
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$240(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i) {
        actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], AndroidUtilities.m107dp(52) + i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$241(ReactedUsersListView reactedUsersListView, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, View view) {
        if (reactedUsersListView == null || reactedUsersListView.isLoaded) {
            actionBarPopupWindowLayout.getSwipeBack().openForeground(iArr[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$242(MessageSeenView messageSeenView, View view, int i) {
        TLObject tLObject = messageSeenView.users.get(i);
        if (tLObject == null) {
            return;
        }
        closeMenu(true);
        Bundle bundle = new Bundle();
        if (tLObject instanceof TLRPC$User) {
            bundle.putLong("user_id", ((TLRPC$User) tLObject).f1751id);
        } else if (tLObject instanceof TLRPC$Chat) {
            bundle.putLong("chat_id", ((TLRPC$Chat) tLObject).f1602id);
        }
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$243() {
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss(false);
            this.scrimPopupWindow = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$244(MessageObject messageObject, View view) {
        UndoView undoView;
        if (getMediaDataController().saveToRingtones(messageObject.getDocument()) && (undoView = getUndoView()) != null) {
            undoView.showWithAction(this.dialog_id, UndoView.ACTION_RINGTONE_ADDED, new Runnable() { // from class: org.telegram.ui.ChatActivity.126
                boolean clicked;

                @Override // java.lang.Runnable
                public void run() {
                    if (this.clicked) {
                        return;
                    }
                    this.clicked = true;
                    ChatActivity.this.presentFragment(new NotificationsSettingsActivity());
                }
            });
        }
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$246(View view) {
        ArrayList arrayList;
        int i = Build.VERSION.SDK_INT;
        if (i >= 23 && ((i <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
            this.selectedObject = null;
            this.selectedObjectGroup = null;
            this.selectedObjectToEditCaption = null;
            return;
        }
        if (this.selectedObjectGroup != null) {
            arrayList = new ArrayList(this.selectedObjectGroup.messages);
        } else {
            arrayList = new ArrayList();
            arrayList.add(this.selectedObject);
        }
        MediaController.saveFilesFromMessages(getParentActivity(), getAccountInstance(), arrayList, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda310
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public final void run(int i2) {
                ChatActivity.this.lambda$createMenu$245(i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$245(int i) {
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (i > 0) {
            BulletinFactory.m65of(this).createDownloadBulletin(BulletinFactory.FileType.AUDIOS, i, this.themeDelegate).show();
        }
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$247(View view) {
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$252(boolean[] zArr, final boolean[] zArr2, final ImageView imageView, final ImageView imageView2) {
        if (zArr[0]) {
            return;
        }
        zArr[0] = true;
        final long[] jArr = {-1};
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda297
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$createMenu$249(jArr, zArr2, imageView, imageView2);
            }
        };
        TLRPC$TL_messages_rateTranscribedAudio tLRPC$TL_messages_rateTranscribedAudio = new TLRPC$TL_messages_rateTranscribedAudio();
        tLRPC$TL_messages_rateTranscribedAudio.msg_id = this.selectedObject.getId();
        tLRPC$TL_messages_rateTranscribedAudio.peer = getMessagesController().getInputPeer(this.selectedObject.messageOwner.peer_id);
        tLRPC$TL_messages_rateTranscribedAudio.transcription_id = this.selectedObject.messageOwner.voiceTranscriptionId;
        tLRPC$TL_messages_rateTranscribedAudio.good = zArr2[0];
        getConnectionsManager().sendRequest(tLRPC$TL_messages_rateTranscribedAudio, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda326
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$createMenu$251(runnable, jArr, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(runnable, 150L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$249(long[] jArr, boolean[] zArr, ImageView imageView, ImageView imageView2) {
        jArr[0] = SystemClock.elapsedRealtime();
        if (!zArr[0]) {
            imageView = imageView2;
        }
        final CrossfadeDrawable crossfadeDrawable = (CrossfadeDrawable) imageView.getDrawable();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda22
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$248(CrossfadeDrawable.this, valueAnimator);
            }
        });
        ofFloat.setDuration(150L);
        ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
        ofFloat.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$248(CrossfadeDrawable crossfadeDrawable, ValueAnimator valueAnimator) {
        crossfadeDrawable.setProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$251(Runnable runnable, long[] jArr, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.cancelRunOnUIThread(runnable);
        this.selectedObject.messageOwner.voiceTranscriptionRated = true;
        getMessagesStorage().updateMessageVoiceTranscriptionOpen(this.selectedObject.getDialogId(), this.selectedObject.getId(), this.selectedObject.messageOwner);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda185
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$250();
            }
        }, jArr[0] > 0 ? Math.max(0L, 300 - (SystemClock.elapsedRealtime() - jArr[0])) : 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$250() {
        closeMenu();
        BulletinFactory.m65of(this).createSimpleBulletin(C3632R.raw.chats_infotip, LocaleController.getString("TranscriptionReportSent", C3632R.string.TranscriptionReportSent)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$253(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = true;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$254(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = false;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$255(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$256(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return;
        }
        logSponsoredClicked(messageObject);
        Browser.openUrl(getContext(), this.selectedObject.sponsoredWebPage.url, true, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createMenu$257(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return false;
        }
        if (AndroidUtilities.addToClipboard(messageObject.sponsoredWebPage.url)) {
            BulletinFactory.m66of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyLinkBulletin().show();
            return true;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$258(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredInfo)) {
            BulletinFactory.m66of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString("TextCopied", C3632R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$259(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredAdditionalInfo)) {
            BulletinFactory.m66of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString("TextCopied", C3632R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$260(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int i, View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        actionBarPopupWindowLayout.getSwipeBack().openForeground(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$261(View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        BottomSheet.Builder builder = new BottomSheet.Builder(this.contentView.getContext());
        builder.setCustomView(new SponsoredMessageInfoView(getParentActivity(), this.themeDelegate));
        builder.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$262(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$263(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, View view, int i) {
        int i2 = 1;
        processSelectedOption(((Integer) arrayList2.get(((Integer) arrayList3.get(i - ((i == arrayList.size() - 1 && arrayList.contains(MessageMoreActionsView.SubMenuItem.Gap.INSTANCE)) ? 0 : 0))).intValue())).intValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$264(RecyclerListView recyclerListView, LinearLayout linearLayout, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int i, View view) {
        if (this.scrimPopupWindow == null) {
            return;
        }
        recyclerListView.requestLayout();
        linearLayout.requestLayout();
        recyclerListView.getAdapter().notifyDataSetChanged();
        actionBarPopupWindowLayout.getSwipeBack().openForeground(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$265(int i, ArrayList arrayList, View view) {
        if (this.selectedObject == null || i >= arrayList.size()) {
            return;
        }
        processSelectedOption(((Integer) arrayList.get(i)).intValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$276(ArrayList arrayList, View view) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.133
            @Override // org.telegram.p043ui.Components.EmojiPacksAlert, org.telegram.p043ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$278(int i, int i2, boolean z, ReactionsContainerLayout reactionsContainerLayout) {
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow == null || this.fragmentView == null || actionBarPopupWindow.isShowing() || !AndroidUtilities.isActivityRunning(getParentActivity())) {
            return;
        }
        this.scrimPopupWindow.showAtLocation(this.chatListView, 51, i, i2);
        if (z && reactionsContainerLayout != null) {
            reactionsContainerLayout.startEnterAnimation(true);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$277();
            }
        }, 420L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$277() {
        ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
        if (actionBarMenuSubItemArr == null || actionBarMenuSubItemArr.length <= 0 || actionBarMenuSubItemArr[0] == null) {
            return;
        }
        actionBarMenuSubItemArr[0].requestFocus();
        this.scrimPopupWindowItems[0].performAccessibilityAction(64, null);
        this.scrimPopupWindowItems[0].sendAccessibilityEvent(8);
    }

    private void createEmptyView() {
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        if (this.emptyViewContainer != null || getContext() == null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(getContext());
        this.emptyViewContainer = frameLayout;
        frameLayout.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda133
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view, MotionEvent motionEvent) {
                boolean lambda$createEmptyView$279;
                lambda$createEmptyView$279 = ChatActivity.lambda$createEmptyView$279(view, motionEvent);
                return lambda$createEmptyView$279;
            }
        });
        this.emptyViewContainer.setVisibility(4);
        boolean z = true;
        boolean z2 = true;
        this.contentView.addView(this.emptyViewContainer, 1, LayoutHelper.createFrame(-1, -2, 17));
        int i = getArguments().getInt("nearby_distance", -1);
        if (((i >= 0 || this.preloadedGreetingsSticker != null) && this.currentUser != null && !this.userBlocked) || ((tLRPC$UserFull = this.userInfo) != null && tLRPC$UserFull.contact_require_premium && !getUserConfig().isPremium())) {
            ChatGreetingsView chatGreetingsView = new ChatGreetingsView(getContext(), this.currentUser, i, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
            this.greetingsViewContainer = chatGreetingsView;
            TLRPC$UserFull tLRPC$UserFull2 = this.userInfo;
            if (tLRPC$UserFull2 == null || !tLRPC$UserFull2.contact_require_premium || getUserConfig().isPremium()) {
                z = false;
            }
            chatGreetingsView.setPremiumLock(z, this.dialog_id);
            this.greetingsViewContainer.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda347
                @Override // org.telegram.p043ui.Components.ChatGreetingsView.Listener
                public final void onGreetings(TLRPC$Document tLRPC$Document) {
                    ChatActivity.this.lambda$createEmptyView$280(tLRPC$Document);
                }
            });
            this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.m107dp(10), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
            this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-2, -2, 17));
        } else if (this.currentEncryptedChat == null) {
            if (this.isTopic && this.chatMode == 0) {
                this.emptyViewContainer.addView(new CreateTopicEmptyView(getContext(), this.contentView, this.themeDelegate), new FrameLayout.LayoutParams(-2, -2, 17));
            } else if (!isThreadChat() && this.chatMode == 0 && (((tLRPC$User = this.currentUser) != null && tLRPC$User.self) || ((tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.creator && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)))) {
                ChatBigEmptyView chatBigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, this.currentChat == null ? 2 : 1, this.themeDelegate);
                this.bigEmptyView = chatBigEmptyView;
                this.emptyViewContainer.addView(chatBigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                if (this.currentChat != null) {
                    this.bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", C3632R.string.GroupEmptyTitle1)));
                }
            } else {
                String str = null;
                if (isThreadChat() && this.chatMode == 0) {
                    if (this.isComments) {
                        str = LocaleController.getString("NoComments", C3632R.string.NoComments);
                    } else {
                        str = LocaleController.getString("NoReplies", C3632R.string.NoReplies);
                    }
                } else if (this.chatMode == 1) {
                    str = LocaleController.getString("NoScheduledMessages", C3632R.string.NoScheduledMessages);
                } else {
                    TLRPC$User tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null) {
                        long j = tLRPC$User2.f1751id;
                        if (j != 777000 && j != 429000 && j != 4244000 && MessagesController.isSupportUser(tLRPC$User2)) {
                            str = LocaleController.getString("GotAQuestion", C3632R.string.GotAQuestion);
                        }
                    }
                    TLRPC$User tLRPC$User3 = this.currentUser;
                    if (tLRPC$User3 == null || tLRPC$User3.self || tLRPC$User3.deleted || this.userBlocked) {
                        str = LocaleController.getString("NoMessages", C3632R.string.NoMessages);
                    }
                }
                if (str == null) {
                    ChatGreetingsView chatGreetingsView2 = new ChatGreetingsView(getContext(), this.currentUser, i, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
                    this.greetingsViewContainer = chatGreetingsView2;
                    TLRPC$UserFull tLRPC$UserFull3 = this.userInfo;
                    if (tLRPC$UserFull3 == null || !tLRPC$UserFull3.contact_require_premium || getUserConfig().isPremium()) {
                        z2 = false;
                    }
                    chatGreetingsView2.setPremiumLock(z2, this.dialog_id);
                    this.greetingsViewContainer.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda346
                        @Override // org.telegram.p043ui.Components.ChatGreetingsView.Listener
                        public final void onGreetings(TLRPC$Document tLRPC$Document) {
                            ChatActivity.this.lambda$createEmptyView$281(tLRPC$Document);
                        }
                    });
                    this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.m107dp(16), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
                    this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-2, -2, 17));
                    return;
                }
                TextView textView = new TextView(getContext());
                this.emptyView = textView;
                textView.setText(str);
                this.emptyView.setTextSize(1, 14.0f);
                this.emptyView.setGravity(17);
                this.emptyView.setTextColor(getThemedColor(Theme.key_chat_serviceText));
                this.emptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.m107dp(6), this.emptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                this.emptyView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.emptyView.setPadding(AndroidUtilities.m107dp(10), AndroidUtilities.m107dp(2), AndroidUtilities.m107dp(10), AndroidUtilities.m107dp(3));
                this.emptyViewContainer.addView(this.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
            }
        } else {
            this.bigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, 0, this.themeDelegate);
            if (this.currentEncryptedChat.admin_id == getUserConfig().getClientUserId()) {
                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", C3632R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(this.currentUser)));
            } else {
                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", C3632R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(this.currentUser)));
            }
            this.emptyViewContainer.addView(this.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$280(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, this.replyingQuote, null, true, 0, false, null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$281(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, this.replyingQuote, null, true, 0, false, null, null);
    }

    public void closeMenu() {
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void closeMenu(boolean z) {
        this.scrimPopupWindowHideDimOnDismiss = z;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
        if (z) {
            return;
        }
        ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.scrimViewAlphaAnimator.cancel();
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, BitmapDescriptorFactory.HUE_RED);
        this.scrimViewAlphaAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda4
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$closeMenu$282(valueAnimator2);
            }
        });
        this.scrimViewAlphaAnimator.setDuration(150L);
        this.scrimViewAlphaAnimator.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$closeMenu$282(ValueAnimator valueAnimator) {
        this.scrimViewAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidate();
            this.chatListView.invalidate();
        }
    }

    private void showMultipleReactionsPromo(ChatMessageCell chatMessageCell, ReactionsLayoutInBubble.VisibleReaction visibleReaction, int i) {
        TLRPC$Document findDocument;
        if (SharedConfig.multipleReactionsPromoShowed || chatMessageCell == null || chatMessageCell.getMessageObject() == null || visibleReaction == null || getUserConfig().isPremium() || i != 1) {
            return;
        }
        SharedConfig.setMultipleReactionsPromoShowed(true);
        long j = visibleReaction.documentId;
        if (j == 0) {
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = MediaDataController.getInstance(this.currentAccount).getReactionsMap().get(visibleReaction.emojicon);
            if (tLRPC$TL_availableReaction == null) {
                return;
            }
            findDocument = tLRPC$TL_availableReaction.center_icon;
        } else {
            findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, j);
        }
        if (findDocument == null) {
            return;
        }
        BulletinFactory.m65of(this).createEmojiBulletin(findDocument, LocaleController.getString(C3632R.string.ChatMultipleReactionsPromo)).setDuration(DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS).show();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00b5  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00eb  */
    /* JADX WARN: Type inference failed for: r14v1 */
    /* JADX WARN: Type inference failed for: r14v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void selectReaction(org.telegram.messenger.MessageObject r20, org.telegram.p043ui.Components.ReactionsContainerLayout r21, android.view.View r22, float r23, float r24, org.telegram.p043ui.Components.Reactions.ReactionsLayoutInBubble.VisibleReaction r25, boolean r26, boolean r27, boolean r28) {
        /*
            Method dump skipped, instructions count: 251
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.selectReaction(org.telegram.messenger.MessageObject, org.telegram.ui.Components.ReactionsContainerLayout, android.view.View, float, float, org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble$VisibleReaction, boolean, boolean, boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$135  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass135 implements Runnable {
        final /* synthetic */ boolean val$added;
        final /* synthetic */ int val$finalMessageIdForCell;
        final /* synthetic */ boolean val$fromDoubleTap;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ ReactionsContainerLayout val$reactionsLayout;
        final /* synthetic */ ReactionsLayoutInBubble.VisibleReaction val$visibleReaction;
        final /* synthetic */ float val$x;
        final /* synthetic */ float val$y;

        AnonymousClass135(boolean z, int i, boolean z2, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction, MessageObject messageObject) {
            this.val$fromDoubleTap = z;
            this.val$finalMessageIdForCell = i;
            this.val$added = z2;
            this.val$reactionsLayout = reactionsContainerLayout;
            this.val$x = f;
            this.val$y = f2;
            this.val$visibleReaction = visibleReaction;
            this.val$primaryMessage = messageObject;
        }

        @Override // java.lang.Runnable
        public void run() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.updateReactionRunnable != null) {
                chatActivity.updateReactionRunnable = null;
                if (this.val$fromDoubleTap) {
                    final int i = this.val$finalMessageIdForCell;
                    final boolean z = this.val$added;
                    final ReactionsContainerLayout reactionsContainerLayout = this.val$reactionsLayout;
                    final float f = this.val$x;
                    final float f2 = this.val$y;
                    final ReactionsLayoutInBubble.VisibleReaction visibleReaction = this.val$visibleReaction;
                    chatActivity.lambda$openDiscussionMessageChat$329(new Runnable() { // from class: org.telegram.ui.ChatActivity$135$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.AnonymousClass135.this.lambda$run$1(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                        }
                    });
                } else {
                    final MessageObject messageObject = this.val$primaryMessage;
                    chatActivity.lambda$openDiscussionMessageChat$329(new Runnable() { // from class: org.telegram.ui.ChatActivity$135$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.AnonymousClass135.this.lambda$run$2(messageObject);
                        }
                    });
                }
                ChatActivity.this.closeMenu();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$1(final int i, final boolean z, final ReactionsContainerLayout reactionsContainerLayout, final float f, final float f2, final ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$135$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass135.this.lambda$run$0(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                }
            }, 50L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(int i, boolean z, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            ChatMessageCell findMessageCell = ChatActivity.this.findMessageCell(i, true);
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                ReactionsEffectOverlay.show(chatActivity, reactionsContainerLayout, findMessageCell, null, f, f2, visibleReaction, ((BaseFragment) chatActivity).currentAccount, 1);
                ReactionsEffectOverlay.startAnimation();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$2(MessageObject messageObject) {
            MessageObject messageObject2 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
            if (messageObject2 != null && messageObject2 != messageObject) {
                MessageObject messageObject3 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
                messageObject3.messageOwner.reactions = messageObject.messageOwner.reactions;
                messageObject = messageObject3;
            }
            ChatActivity.this.updateMessageAnimated(messageObject, true);
            ReactionsEffectOverlay.startAnimation();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMessageAnimated(final MessageObject messageObject, final boolean z) {
        if (this.chatAdapter == null) {
            return;
        }
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda262
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$updateMessageAnimated$283(messageObject, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageAnimated$283(MessageObject messageObject, boolean z) {
        if (this.fragmentView == null) {
            return;
        }
        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
        if (groupedMessages != null) {
            ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
            if (chatListItemAnimator != null) {
                chatListItemAnimator.groupWillChanged(groupedMessages);
            }
            for (int i = 0; i < groupedMessages.messages.size(); i++) {
                groupedMessages.messages.get(i).forceUpdate = true;
                if (z) {
                    groupedMessages.messages.get(i).reactionsChanged = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged(true);
            return;
        }
        int indexOf = this.messages.indexOf(this.messagesDict[0].get(messageObject.getId()));
        if (z) {
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
        }
        if (indexOf >= 0) {
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            chatActivityAdapter.notifyItemChanged(chatActivityAdapter.messagesStartRow + indexOf);
        }
    }

    public ChatMessageCell findMessageCell(int i, boolean z) {
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return null;
        }
        int childCount = recyclerListView.getChildCount();
        for (int i2 = 0; i2 < childCount; i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((this.chatListView.getChildAt(i2) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i2)).getMessageObject().getId() == i) {
                if (z) {
                    if (childAt.getY() + childAt.getMeasuredHeight() < (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.m107dp(4) || childAt.getY() > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        return null;
                    }
                }
                return (ChatMessageCell) this.chatListView.getChildAt(i2);
            }
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: startEditingMessageObject */
    public void lambda$startMessageUnselect$162(MessageObject messageObject) {
        if (messageObject == null || getParentActivity() == null) {
            return;
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
            this.selectionReactionsOverlay.setHiddenByScroll(true);
        }
        if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
            this.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
        }
        this.mentionContainer.getAdapter().setNeedBotContext(false);
        this.chatActivityEnterView.setVisibility(0);
        showFieldPanelForEdit(true, messageObject);
        lambda$didReceivedNotification$183();
        checkEditTimer();
        this.chatActivityEnterView.setAllowStickersAndGifs(true, false, false, true);
        updatePinnedMessageView(true);
        updateVisibleRows();
        if (isForwardingEditor()) {
            return;
        }
        if (!messageObject.scheduled) {
            TLRPC$TL_messages_getMessageEditData tLRPC$TL_messages_getMessageEditData = new TLRPC$TL_messages_getMessageEditData();
            tLRPC$TL_messages_getMessageEditData.peer = getMessagesController().getInputPeer(this.dialog_id);
            tLRPC$TL_messages_getMessageEditData.f1696id = messageObject.getId();
            this.editingMessageObjectReqId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessageEditData, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda322
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$startEditingMessageObject$285(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        this.chatActivityEnterView.showEditDoneProgress(false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$285(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda270
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startEditingMessageObject$284(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$284(TLObject tLObject) {
        this.editingMessageObjectReqId = 0;
        if (tLObject != null || getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
        builder.setMessage(LocaleController.getString("EditMessageError", C3632R.string.EditMessageError));
        builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), null);
        showDialog(builder.create());
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setEditingMessageObject(null, false);
            hideFieldPanel(true);
        }
    }

    public void setupStickerVibrationAndSound(ChatMessageCell chatMessageCell) {
        MessagesController.EmojiSound emojiSound;
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC$Document document = messageObject.getDocument();
        boolean isAnimatedEmoji = messageObject.isAnimatedEmoji();
        if (!isAnimatedEmoji) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation == null || !isAnimatedEmoji) {
            return;
        }
        String unwrapEmoji = EmojiAnimationsOverlay.unwrapEmoji(messageObject.getStickerEmoji());
        if (EmojiData.isHeartEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap = new HashMap<>();
            hashMap.put(1, 1);
            hashMap.put(13, 0);
            hashMap.put(59, 1);
            hashMap.put(71, 0);
            hashMap.put(128, 1);
            hashMap.put(140, 0);
            lottieAnimation.setVibrationPattern(hashMap);
        } else if (EmojiData.isPeachEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap2 = new HashMap<>();
            hashMap2.put(34, 1);
            lottieAnimation.setVibrationPattern(hashMap2);
        } else if (EmojiData.isCofinEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap3 = new HashMap<>();
            hashMap3.put(24, 0);
            hashMap3.put(36, 0);
            lottieAnimation.setVibrationPattern(hashMap3);
        }
        if (messageObject.isAnimatedAnimatedEmoji()) {
            lottieAnimation.resetVibrationAfterRestart(true);
        }
        if (lottieAnimation.isRunning() || unwrapEmoji == null || (emojiSound = getMessagesController().emojiSounds.get(unwrapEmoji.replace("️", ""))) == null) {
            return;
        }
        getMediaController().playEmojiSound(getAccountInstance(), unwrapEmoji, emojiSound, false);
    }

    public void restartSticker(ChatMessageCell chatMessageCell) {
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC$Document document = messageObject.getDocument();
        if (!messageObject.isAnimatedAnimatedEmoji()) {
            setupStickerVibrationAndSound(chatMessageCell);
        }
        if (!messageObject.isAnimatedEmoji()) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation != null) {
            lottieAnimation.restart();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public CharSequence getMessageContent(MessageObject messageObject, long j, boolean z) {
        TLRPC$Chat chat;
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (z) {
            long fromChatId = messageObject.getFromChatId();
            if (j != fromChatId) {
                int i = (fromChatId > 0L ? 1 : (fromChatId == 0L ? 0 : -1));
                if (i > 0) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(fromChatId));
                    if (user != null) {
                        spannableStringBuilder.append((CharSequence) ContactsController.formatName(user.first_name, user.last_name)).append((CharSequence) ":\n");
                    }
                } else if (i < 0 && (chat = getMessagesController().getChat(Long.valueOf(-fromChatId))) != null) {
                    spannableStringBuilder.append((CharSequence) chat.title).append((CharSequence) ":\n");
                }
            }
        }
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            spannableStringBuilder.append((CharSequence) restrictionReason);
        } else {
            CharSequence charSequence = messageObject.caption;
            if (charSequence != null) {
                spannableStringBuilder.append(charSequence);
            } else {
                spannableStringBuilder.append(messageObject.messageText);
            }
        }
        return spannableStringBuilder;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void unpinMessage(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        final ArrayList arrayList = new ArrayList();
        arrayList.add(this.selectedObject);
        final ArrayList arrayList2 = new ArrayList();
        arrayList2.add(Integer.valueOf(messageObject.getId()));
        final int i = this.totalPinnedMessagesCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList2, Boolean.FALSE, 0, 0, 0, Integer.valueOf(this.totalPinnedMessagesCount - 1), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = BulletinFactory.createUnpinMessageBulletin(this, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda255
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$286(arrayList2, arrayList, i);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda257
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$287(messageObject);
            }
        }, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$286(ArrayList arrayList, ArrayList arrayList2, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList, Boolean.TRUE, arrayList2, 0, 0, Integer.valueOf(i), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$287(MessageObject messageObject) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, messageObject.getId(), true, false, false);
        this.pinBulletin = null;
    }

    public void openReportChat(int i) {
        Bundle bundle = new Bundle();
        if (DialogObject.isUserDialog(this.dialog_id)) {
            bundle.putLong("user_id", this.dialog_id);
        } else {
            bundle.putLong("chat_id", -this.dialog_id);
        }
        bundle.putInt("report", i);
        ChatActivity chatActivity = new ChatActivity(bundle);
        presentFragment(chatActivity);
        chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.136
            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onForwardingMessagesChanged(ArrayList arrayList) {
                ChatActivityDelegate.CC.$default$onForwardingMessagesChanged(this, arrayList);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2, boolean z3, ChatActivity chatActivity2, ArrayList arrayList, HashMap hashMap) {
                ChatActivityDelegate.CC.$default$onUnpin(this, z, z2, z3, chatActivity2, arrayList, hashMap);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openReplyMessage(int i2) {
                ChatActivityDelegate.CC.$default$openReplyMessage(this, i2);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openSearch(String str) {
                ChatActivityDelegate.CC.$default$openSearch(this, str);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void setFieldText(CharSequence charSequence) {
                ChatActivityDelegate.CC.$default$setFieldText(this, charSequence);
            }

            @Override // org.telegram.p043ui.ChatActivity.ChatActivityDelegate
            public void onReport() {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                ChatActivity.this.undoView.showWithAction(0L, 74, (Runnable) null);
            }
        };
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String str = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty(str) && !new File(str).exists()) {
            str = null;
        }
        if (TextUtils.isEmpty(str)) {
            str = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(str, getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:349:0x0952, code lost:
        if (r0.exists() != false) goto L346;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void processSelectedOption(int r27) {
        /*
            Method dump skipped, instructions count: 3495
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.processSelectedOption(int):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$288(ArrayList arrayList, TemplateModel templateModel, MessageObject messageObject, String str) {
        ArrayList arrayList2 = new ArrayList();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            MessageObject messageObject2 = (MessageObject) it.next();
            arrayList2.add(Integer.valueOf(messageObject2.getId()));
            messageObject2.forceUpdate = true;
        }
        if (templateModel != null) {
            getTemplatesController().renameTemplate(arrayList2, str);
        } else {
            getTemplatesController().convertToTemplate(arrayList2, messageObject.getGroupId(), str);
        }
        updateMessageAnimated(messageObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$289(String str, String str2, String str3, String str4, DialogInterface dialogInterface, int i) {
        if (i == 0) {
            shareMessageTextOrMedia(str, str2, str3, null);
        } else if (i == 1) {
            shareMessageTextOrMedia(str, str2, null, str4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$290(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$291(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$292() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$293(boolean z, int i) {
        if (getParentActivity() == null || this.fragmentView == null || i <= 0) {
            return;
        }
        BulletinFactory.m65of(this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$294(boolean z, boolean z2, boolean z3, Uri uri) {
        BulletinFactory.FileType fileType;
        if (getParentActivity() == null) {
            return;
        }
        if (z) {
            fileType = BulletinFactory.FileType.PHOTO_TO_DOWNLOADS;
        } else if (z2) {
            fileType = BulletinFactory.FileType.VIDEO_TO_DOWNLOADS;
        } else if (z3) {
            fileType = BulletinFactory.FileType.GIF_TO_DOWNLOADS;
        } else {
            fileType = BulletinFactory.FileType.UNKNOWN;
        }
        BulletinFactory.m65of(this).createDownloadBulletin(fileType, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$295(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$296(boolean[] zArr, View view) {
        zArr[1] = !zArr[1];
        ((CheckBoxCell) view).setChecked(zArr[1], true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$297(boolean[] zArr, View view) {
        zArr[0] = !zArr[0];
        ((CheckBoxCell) view).setChecked(zArr[0], true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$299(int i, boolean[] zArr, DialogInterface dialogInterface, int i2) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, i, false, !zArr[1], zArr[0]);
        Bulletin createPinMessageBulletin = BulletinFactory.createPinMessageBulletin(this, this.themeDelegate, 1);
        createPinMessageBulletin.show();
        final Bulletin.Layout layout = createPinMessageBulletin.getLayout();
        layout.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                layout.performHapticFeedback(3, 2);
            }
        }, 550L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$301(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda268
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$300(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$300(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_exportedMessageLink tLRPC$TL_exportedMessageLink = (TLRPC$TL_exportedMessageLink) tLObject;
            try {
                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", tLRPC$TL_exportedMessageLink.link));
                if (BulletinFactory.canShowBulletin(this)) {
                    BulletinFactory.m65of(this).createCopyLinkBulletin(!isThreadChat() && tLRPC$TL_exportedMessageLink.link.contains("/c/"), this.themeDelegate).show();
                }
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$302() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$303() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$304(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$306(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda24
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$305(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$305(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$307(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$313(MessageObject messageObject, DialogInterface dialogInterface, int i) {
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = new TLRPC$TL_messages_editMessage();
        TLRPC$TL_inputMediaPoll tLRPC$TL_inputMediaPoll = new TLRPC$TL_inputMediaPoll();
        TLRPC$TL_poll tLRPC$TL_poll = new TLRPC$TL_poll();
        tLRPC$TL_inputMediaPoll.poll = tLRPC$TL_poll;
        TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
        tLRPC$TL_poll.f1635id = tLRPC$Poll.f1635id;
        tLRPC$TL_poll.question = tLRPC$Poll.question;
        tLRPC$TL_poll.answers = tLRPC$Poll.answers;
        tLRPC$TL_poll.closed = true;
        tLRPC$TL_messages_editMessage.media = tLRPC$TL_inputMediaPoll;
        tLRPC$TL_messages_editMessage.peer = getMessagesController().getInputPeer(this.dialog_id);
        tLRPC$TL_messages_editMessage.f1690id = messageObject.getId();
        tLRPC$TL_messages_editMessage.flags |= 16384;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_editMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda335
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$processSelectedOption$310(alertDialogArr, tLRPC$TL_messages_editMessage, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda291
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$312(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$310(final AlertDialog[] alertDialogArr, final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda298
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$processSelectedOption$308(alertDialogArr);
            }
        });
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda278
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$309(tLRPC$TL_error, tLRPC$TL_messages_editMessage);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$308(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$309(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, this, tLRPC$TL_messages_editMessage, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$312(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda27
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$311(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$311(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$316(final TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda281
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$314(tLRPC$TL_messages_sendScheduledMessages);
                }
            });
        } else if (tLRPC$TL_error.text != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda276
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$315(tLRPC$TL_error);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$314(TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages) {
        NotificationCenter notificationCenter = NotificationCenter.getInstance(this.currentAccount);
        int i = NotificationCenter.messagesDeleted;
        Object[] objArr = new Object[4];
        objArr[0] = tLRPC$TL_messages_sendScheduledMessages.f1715id;
        long clientUserId = getUserConfig().getClientUserId();
        long j = this.dialog_id;
        objArr[1] = Long.valueOf(clientUserId == j ? 0L : -j);
        Boolean bool = Boolean.TRUE;
        objArr[2] = bool;
        objArr[3] = bool;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, objArr);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$315(TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error.text.startsWith("SLOWMODE_WAIT_")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("SlowmodeSendError", C3632R.string.SlowmodeSendError));
        } else if (tLRPC$TL_error.text.equals("CHAT_SEND_MEDIA_FORBIDDEN")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("AttachMediaRestrictedForever", C3632R.string.AttachMediaRestrictedForever));
        } else {
            AlertsCreator.showSimpleToast(this, tLRPC$TL_error.text);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$317(MessageObject.GroupedMessages groupedMessages, MessageObject messageObject, boolean z, int i, String str) {
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(groupedMessages.messages.get(0), null, false, this, null, i);
        } else {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(messageObject, null, false, this, null, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$318(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    @Override // org.telegram.p043ui.DialogsActivity.DialogsActivityDelegate
    public boolean didSelectDialogs(DialogsActivity dialogsActivity, ArrayList<MessagesStorage.TopicKey> arrayList, CharSequence charSequence, boolean z, TopicsFragment topicsFragment, Callbacks$Callback1<ArrayList<MessageObject>> callbacks$Callback1) {
        ChatActivityEnterView chatActivityEnterView;
        ChatActivityEnterView chatActivityEnterView2;
        MessageObject messageObject;
        long j;
        if (((this.messagePreviewParams == null && ((dialogsActivity != null && !dialogsActivity.isQuote) || this.replyingMessageObject == null)) || (dialogsActivity != null && dialogsActivity.isQuote && this.replyingMessageObject == null)) && this.forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            if (callbacks$Callback1 != null) {
                callbacks$Callback1.invoke(null);
            }
            return false;
        }
        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
        MessageObject messageObject2 = this.forwardingMessage;
        if (messageObject2 != null) {
            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
            if (groupedMessages != null) {
                arrayList2.addAll(groupedMessages.messages);
            } else {
                arrayList2.add(messageObject2);
            }
        } else {
            for (int i = 1; i >= 0; i--) {
                ArrayList arrayList3 = new ArrayList();
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    arrayList3.add(Integer.valueOf(this.selectedMessagesIds[i].keyAt(i2)));
                }
                Collections.sort(arrayList3);
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    MessageObject messageObject3 = this.selectedMessagesIds[i].get(((Integer) arrayList3.get(i3)).intValue());
                    if (messageObject3 != null) {
                        arrayList2.add(messageObject3);
                    }
                }
            }
        }
        if (callbacks$Callback1 != null) {
            callbacks$Callback1.invoke(arrayList2);
            return true;
        }
        for (int i4 = 0; i4 < arrayList.size(); i4++) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-arrayList.get(i4).dialogId));
            if (chat != null) {
                for (int i5 = 0; i5 < arrayList2.size(); i5++) {
                    int canSendMessageToChat = SendMessagesHelper.canSendMessageToChat(chat, arrayList2.get(i5));
                    if (canSendMessageToChat != 0) {
                        AlertsCreator.showSendMediaAlert(canSendMessageToChat, dialogsActivity, null);
                        return false;
                    }
                }
                continue;
            }
        }
        if (this.forwardingMessage != null) {
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        } else {
            for (int i6 = 1; i6 >= 0; i6--) {
                this.selectedMessagesCanCopyIds[i6].clear();
                this.selectedMessagesCanStarIds[i6].clear();
                this.selectedMessagesIds[i6].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
        }
        if (dialogsActivity == null) {
            Iterator<MessagesStorage.TopicKey> it = arrayList.iterator();
            while (it.hasNext()) {
                getSendMessagesHelper().sendMessage(arrayList2, it.next().dialogId, true, false, true, 0, null, null, true);
            }
            createUndoView();
            UndoView undoView = this.undoView;
            if (undoView != null) {
                undoView.showWithAction(arrayList.get(0).dialogId, IdFabric$CustomType.UNDO_MESSAGES_SAVE_TO_CLOUD, Integer.valueOf(arrayList2.size()));
            }
            return false;
        }
        if (!dialogsActivity.isQuote && (arrayList.size() > 1 || arrayList.get(0).dialogId == getUserConfig().getClientUserId() || charSequence != null || dialogsActivity.isInMultiSelect())) {
            dialogsActivity.filterSelectedForwardingMessages(arrayList2);
            this.messagePreviewParams = null;
            hideFieldPanel(false);
            for (int i7 = 0; i7 < arrayList.size(); i7++) {
                long j2 = arrayList.get(i7).dialogId;
                if (charSequence != null) {
                    j = j2;
                    getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of(charSequence.toString(), j2, null, null, null, true, null, null, null, dialogsActivity.notify, dialogsActivity.scheduleDate, null, false, null));
                } else {
                    j = j2;
                }
                getSendMessagesHelper().sendMessage(arrayList2, j, false, false, dialogsActivity.notify, dialogsActivity.scheduleDate, null, dialogsActivity.getForwardingParams(), true);
            }
            dialogsActivity.finishFragment();
            createUndoView();
            if (this.undoView != null) {
                if (arrayList.size() == 1) {
                    this.undoView.showWithAction(arrayList.get(0).dialogId, 53, Integer.valueOf(arrayList2.size()));
                } else {
                    this.undoView.showWithAction(0L, 53, Integer.valueOf(arrayList2.size()), Integer.valueOf(arrayList.size()), (Runnable) null, (Runnable) null);
                }
            }
        } else {
            MessagesStorage.TopicKey topicKey = arrayList.get(0);
            long j3 = topicKey.dialogId;
            if (j3 != this.dialog_id || getTopicId() != topicKey.topicId || this.chatMode == 2) {
                Bundle bundle = new Bundle();
                MessagePreviewParams messagePreviewParams = this.messagePreviewParams;
                if (messagePreviewParams != null) {
                    bundle.putBoolean("force_hide_forward_author", messagePreviewParams.isAuthorHiddenForce);
                }
                bundle.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
                if (DialogObject.isEncryptedDialog(j3)) {
                    bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j3));
                } else {
                    if (DialogObject.isUserDialog(j3)) {
                        bundle.putLong("user_id", j3);
                    } else {
                        bundle.putLong("chat_id", -j3);
                    }
                    if (!getMessagesController().checkCanOpenChat(bundle, dialogsActivity)) {
                        return true;
                    }
                }
                bundle.putBoolean("historyPreloaded", false);
                addToPulledDialogsMyself();
                ChatActivity chatActivity = new ChatActivity(bundle);
                if (topicKey.topicId != 0) {
                    ForumUtilities.applyTopic(chatActivity, topicKey);
                    dialogsActivity.removeSelfFromStack();
                }
                if (presentFragment(chatActivity, true)) {
                    if (dialogsActivity.isQuote && this.replyingMessageObject != null) {
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null && (chatActivityEnterView = chatActivity.chatActivityEnterView) != null) {
                            chatActivityEnterView.setFieldText(chatActivityEnterView3.getFieldText());
                        }
                        MessageObject.GroupedMessages groupedMessages2 = this.replyingQuoteGroup;
                        if (groupedMessages2 != null) {
                            chatActivity.replyingQuoteGroup = groupedMessages2;
                        } else {
                            MessageObject messageObject4 = this.replyingMessageObject;
                            if (messageObject4 != null) {
                                chatActivity.replyingQuoteGroup = getGroup(messageObject4.getGroupId());
                            }
                        }
                        MessageObject messageObject5 = this.replyingTopMessage;
                        if (messageObject5 != null) {
                            chatActivity.replyingTopMessage = messageObject5;
                        } else {
                            MessageObject messageObject6 = this.threadMessageObject;
                            if (messageObject6 != null) {
                                chatActivity.replyingTopMessage = messageObject6;
                            }
                        }
                        chatActivity.showFieldPanelForReplyQuote(this.replyingMessageObject, this.replyingQuote);
                    } else {
                        chatActivity.showFieldPanelForForward(true, arrayList2);
                    }
                    if (!AndroidUtilities.isTablet()) {
                        removeSelfFromStack();
                    }
                } else {
                    dialogsActivity.finishFragment();
                }
            } else {
                ArrayList arrayList4 = new ArrayList(getParentLayout().getFragmentStack());
                if (!arrayList4.isEmpty() && arrayList4.get(arrayList4.size() - 1) == dialogsActivity) {
                    dialogsActivity.finishFragment();
                } else {
                    int indexOf = arrayList4.indexOf(dialogsActivity);
                    if (indexOf > 0) {
                        while (indexOf < arrayList4.size()) {
                            if (indexOf == arrayList4.size() - 1) {
                                ((BaseFragment) arrayList4.get(indexOf)).finishFragment();
                            } else {
                                dialogsActivity.removeSelfFromStack();
                            }
                            indexOf++;
                        }
                    }
                }
                moveScrollToLastMessage(false);
                if (dialogsActivity.isQuote && (messageObject = this.replyingMessageObject) != null) {
                    showFieldPanelForReplyQuote(messageObject, this.replyingQuote);
                } else {
                    showFieldPanelForForward(true, arrayList2);
                }
                if (AndroidUtilities.isTablet()) {
                    hideActionMode();
                    updatePinnedMessageView(true);
                }
                updateVisibleRows();
                if (this.keyboardWasVisible && (chatActivityEnterView2 = this.chatActivityEnterView) != null) {
                    chatActivityEnterView2.openKeyboardInternal();
                    this.chatActivityEnterView.freezeEmojiView(false);
                    this.keyboardWasVisible = false;
                }
            }
        }
        return true;
    }

    public boolean checkRecordLocked(final boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", C3632R.string.DiscardVideoMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", C3632R.string.DiscardVideoMessageDescription));
        } else {
            builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", C3632R.string.DiscardVoiceMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", C3632R.string.DiscardVoiceMessageDescription));
        }
        builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", C3632R.string.DiscardVoiceMessageAction), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda51
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$checkRecordLocked$319(z, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Continue", C3632R.string.Continue), null);
        showDialog(builder.create());
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkRecordLocked$319(boolean z, DialogInterface dialogInterface, int i) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            if (z) {
                finishFragment();
            } else {
                chatActivityEnterView.cancelRecordingAudioVideo();
            }
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean onBackPressed() {
        SecretVoicePlayer secretVoicePlayer = this.secretVoicePlayer;
        if (secretVoicePlayer != null && secretVoicePlayer.isShown()) {
            this.secretVoicePlayer.dismiss();
            return false;
        } else if (closeStoryViewer()) {
            return false;
        } else {
            ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
            if (chatSelectionReactionMenuOverlay == null || chatSelectionReactionMenuOverlay.onBackPressed()) {
                if (ContentPreviewViewer.getInstance().isVisible()) {
                    ContentPreviewViewer.getInstance().closeWithMenu();
                    return false;
                }
                MessagePreviewView messagePreviewView = this.forwardingPreviewView;
                if (messagePreviewView != null && messagePreviewView.isShowing()) {
                    this.forwardingPreviewView.dismiss(true);
                    return false;
                } else if (this.messagesSearchListView.getTag() != null) {
                    showMessagesSearchListView(false);
                    return false;
                } else if (this.scrimPopupWindow != null) {
                    closeMenu();
                    return false;
                } else if (checkRecordLocked(false)) {
                    return false;
                } else {
                    if (this.textSelectionHelper.isInSelectionMode()) {
                        this.textSelectionHelper.clear();
                        return false;
                    }
                    C3704ActionBar c3704ActionBar = this.actionBar;
                    if (c3704ActionBar != null && c3704ActionBar.isActionModeShowed()) {
                        clearSelectionMode();
                        return false;
                    }
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
                        return !this.chatActivityEnterView.hidePopup(true);
                    }
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null && chatActivityEnterView2.hasBotWebView() && this.chatActivityEnterView.botCommandsMenuIsShowing() && this.chatActivityEnterView.onBotWebViewBackPressed()) {
                        return false;
                    }
                    ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                    if (chatActivityEnterView3 != null && chatActivityEnterView3.botCommandsMenuIsShowing()) {
                        this.chatActivityEnterView.hideBotCommands();
                        return false;
                    }
                    ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                    if (chatActivityEnterView4 == null || !chatActivityEnterView4.closeCreationLinkDialog()) {
                        ChatActivity chatActivity = this.backToPreviousFragment;
                        if (chatActivity != null) {
                            INavigationLayout iNavigationLayout = this.parentLayout;
                            iNavigationLayout.addFragmentToStack(chatActivity, iNavigationLayout.getFragmentStack().size() - 1);
                            this.backToPreviousFragment = null;
                        }
                        InstantCameraView instantCameraView = this.instantCameraView;
                        if (instantCameraView != null) {
                            instantCameraView.cancel(false);
                        }
                        return true;
                    }
                    return false;
                }
            }
            return false;
        }
    }

    public void clearSelectionMode() {
        clearSelectionMode(false);
    }

    public void clearSelectionMode(boolean z) {
        for (int i = 1; i >= 0; i--) {
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows(z);
        updateSelectedMessageReactions();
    }

    public void onListItemAnimatorTick() {
        View view;
        invalidateMessagesVisiblePart();
        if (this.scrimView == null || (view = this.fragmentView) == null) {
            return;
        }
        view.invalidate();
    }

    public void setSavedDialog(long j) {
        this.threadMessageId = j;
    }

    public void setThreadMessages(ArrayList<MessageObject> arrayList, TLRPC$Chat tLRPC$Chat, int i, int i2, int i3, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        this.forumTopic = tLRPC$TL_forumTopic;
        this.threadMessageObjects = arrayList;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        this.threadMessageObject = messageObject;
        this.replyingMessageObject = messageObject;
        this.threadMaxInboxReadId = i2;
        this.threadMaxOutboxReadId = i3;
        this.replyMaxReadId = Math.max(1, i2);
        this.threadMessageId = this.threadMessageObject.getId();
        this.replyOriginalMessageId = i;
        this.replyOriginalChat = tLRPC$Chat;
        boolean z = tLRPC$TL_forumTopic != null;
        this.isTopic = z;
        MessageObject messageObject2 = this.replyingMessageObject;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from;
        this.isComments = (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.channel_post == 0 || z) ? false : true;
        if (z) {
            messageObject2.isTopicMainMessage = true;
        }
        updatePinnedTopicStarterMessage();
        updateTopPanel(false);
        lambda$didReceivedNotification$183();
    }

    private void updatePinnedTopicStarterMessage() {
        TLRPC$Message tLRPC$Message;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        MessageObject messageObject = (this.isTopic && !this.pinnedMessageObjects.isEmpty() && this.pinnedMessageIds.size() == 1 && ((long) this.pinnedMessageIds.get(0).intValue()) == getTopicId() + 1) ? this.pinnedMessageObjects.get(this.pinnedMessageIds.get(0)) : null;
        this.topicStarterMessageObject = messageObject;
        if (!this.isTopic || messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$TL_forumTopic = this.forumTopic) == null || MessageObject.peersEqual(tLRPC$TL_forumTopic.from_id, tLRPC$Message.from_id) || MessageObject.peersEqual(this.currentChat, this.topicStarterMessageObject.messageOwner.from_id)) {
            return;
        }
        this.topicStarterMessageObject = null;
    }

    public void setHighlightMessageId(int i) {
        this.highlightMessageId = i;
    }

    public void setHighlightQuote(int i, String str, int i2) {
        this.highlightMessageId = i;
        this.highlightMessageQuote = str;
        this.highlightMessageQuoteOffset = i2;
        this.showNoQuoteAlert = true;
    }

    public void showNoQuoteFound() {
        BulletinFactory.m65of(this).createSimpleBulletin(C3632R.raw.error, LocaleController.getString(C3632R.string.QuoteNotFound)).show(true);
    }

    public boolean isThreadChat() {
        return this.threadMessageObject != null;
    }

    public boolean isReplyChatComment() {
        return this.threadMessageObject != null && this.isComments;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateVisibleRows() {
        updateVisibleRows(false);
    }

    private void updateVisibleRows(boolean z) {
        int i;
        int i2;
        boolean z2;
        boolean z3;
        String str;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        boolean z4 = false;
        if (!this.wasManualScroll && this.unreadMessageObject != null) {
            int childCount = recyclerListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    MessageObject messageObject2 = this.unreadMessageObject;
                    if (messageObject == messageObject2) {
                        if (this.messages.indexOf(messageObject2) >= 0) {
                            i2 = this.chatAdapter.messagesStartRow + this.messages.indexOf(this.unreadMessageObject);
                            i = getScrollingOffsetForView(childAt);
                        }
                    }
                }
                i3++;
            }
        }
        i = 0;
        i2 = -1;
        int childCount2 = this.chatListView.getChildCount();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditingMessageObject();
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull != null ? tLRPC$ChatFull.linked_chat_id : 0L;
        int i4 = 0;
        while (i4 < childCount2) {
            View childAt2 = this.chatListView.getChildAt(i4);
            if (childAt2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (this.actionBar.isActionModeShowed() || this.reportType >= 0) {
                    this.highlightMessageQuote = null;
                    ArrayList<MessageObject> arrayList = this.threadMessageObjects;
                    chatMessageCell.setCheckBoxVisible((arrayList == null || !arrayList.contains(messageObject3)) ? true : z4, true);
                    int i5 = messageObject3.getDialogId() == this.dialog_id ? z4 : 1;
                    if (this.selectedMessagesIds[i5].indexOfKey(messageObject3.getId()) >= 0) {
                        setCellSelectionBackground(messageObject3, chatMessageCell, i5, true);
                        z2 = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(z4);
                        chatMessageCell.setChecked(z4, z4, true);
                        z2 = z4;
                    }
                    z3 = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(z4);
                    chatMessageCell.setCheckBoxVisible(z4, true);
                    chatMessageCell.setChecked(z4, z4, true);
                    z2 = z4;
                    z3 = z2;
                }
                if ((!chatMessageCell.getMessageObject().deleted || chatMessageCell.linkedChatId != j) && !z) {
                    chatMessageCell.setIsUpdating(true);
                    TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                    chatMessageCell.linkedChatId = tLRPC$ChatFull2 != null ? tLRPC$ChatFull2.linked_chat_id : 0L;
                    chatMessageCell.setMessageObject(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    chatMessageCell.setIsUpdating(false);
                }
                if (chatMessageCell != this.scrimView) {
                    chatMessageCell.setCheckPressed(!z3, z3 && z2);
                }
                chatMessageCell.setHighlighted((this.highlightMessageId == Integer.MAX_VALUE || messageObject3 == null || messageObject3.getId() != this.highlightMessageId) ? false : true);
                if (this.highlightMessageId != Integer.MAX_VALUE) {
                    startMessageUnselect(chatMessageCell);
                }
                if (chatMessageCell.isHighlighted() && (str = this.highlightMessageQuote) != null) {
                    if (!chatMessageCell.setHighlightedText(str, true, this.highlightMessageQuoteOffset) && this.showNoQuoteAlert) {
                        showNoQuoteFound();
                    }
                    this.showNoQuoteAlert = false;
                } else {
                    BlurredFrameLayout blurredFrameLayout = this.searchContainer;
                    if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() == 0) {
                        if (getMediaDataController().isMessageFound(messageObject3.getId(), messageObject3.getDialogId() == this.mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
                            chatMessageCell.setHighlightedText(getMediaDataController().getLastSearchQuery());
                        }
                    }
                    chatMessageCell.setHighlightedText(null);
                }
                chatMessageCell.setSpoilersSuppressed(this.chatListView.getScrollState() != 0);
            } else if (childAt2 instanceof ChatActionCell) {
                ChatActionCell chatActionCell = (ChatActionCell) childAt2;
                if (!z) {
                    chatActionCell.setMessageObject(chatActionCell.getMessageObject());
                }
                chatActionCell.setSpoilersSuppressed(this.chatListView.getScrollState() != 0);
            }
            i4++;
            z4 = false;
        }
        if (i2 != -1) {
            this.chatLayoutManager.scrollToPositionWithOffset(i2, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTimer() {
        MessageObject editingMessageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || (editingMessageObject = chatActivityEnterView.getEditingMessageObject()) == null || editingMessageObject.scheduled) {
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User == null || !tLRPC$User.self) {
            int abs = editingMessageObject.canEditMessageAnytime(this.currentChat) ? 360 : (getMessagesController().maxEditTime + 300) - Math.abs(getConnectionsManager().getCurrentTime() - editingMessageObject.messageOwner.date);
            if (abs > 0) {
                if (abs <= 300) {
                    this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", C3632R.string.TimeToEdit, AndroidUtilities.formatShortDuration(abs)));
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda195
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.checkEditTimer();
                    }
                }, 1000L);
                return;
            }
            this.chatActivityEnterView.onEditTimeExpired();
            this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", C3632R.string.TimeToEditExpired, new Object[0]));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject messageObject, boolean z) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(messageObject);
        int id = messageObject.getId();
        messageObject.getDialogId();
        if (id != 0) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if ((messageObject2.getDialogId() != this.mergeDialogId || messageObject.getDialogId() == this.mergeDialogId) && (((this.currentEncryptedChat == null && messageObject2.getId() > id) || (this.currentEncryptedChat != null && messageObject2.getId() < id)) && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && !messageObject2.isVoiceOnce() && !messageObject2.isRoundOnce() && (!z || (messageObject2.isContentUnread() && !messageObject2.isOut()))))) {
                    arrayList.add(messageObject2);
                }
            }
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void alertUserOpenError(MessageObject messageObject) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), null);
        if (messageObject.type == 3) {
            builder.setMessage(LocaleController.getString("NoPlayerInstalled", C3632R.string.NoPlayerInstalled));
        } else {
            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", C3632R.string.NoHandleAppInstalled, messageObject.getDocument().mime_type));
        }
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openSearchWithText(String str) {
        ActionBarMenuItem actionBarMenuItem;
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            if ((this.threadMessageId == 0 || this.chatMode == 3) && (actionBarMenuItem = this.searchItem) != null) {
                actionBarMenuItem.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.searchIconItem;
            if (actionBarMenuItem3 != null && this.showSearchAsIcon) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem3 = this.audioCallIconItem;
            if (lazyItem3 != null && this.showAudioCallAsIcon) {
                lazyItem3.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            lambda$didReceivedNotification$183();
            updateAlbumsItem();
        }
        if ((this.threadMessageId == 0 || this.isTopic || this.chatMode == 3) && !UserObject.isReplyUser(this.currentUser)) {
            boolean z = str == null;
            this.openSearchKeyboard = z;
            ActionBarMenuItem actionBarMenuItem4 = this.searchItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.openSearch(z);
            }
        }
        if (str != null) {
            ActionBarMenuItem actionBarMenuItem5 = this.searchItem;
            if (actionBarMenuItem5 != null) {
                actionBarMenuItem5.setSearchFieldText(str, false);
            }
            getMediaDataController().searchMessagesInChat(str, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages, this.searchingReaction);
        }
        updatePinnedMessageView(true);
    }

    @Override // org.telegram.p043ui.LocationActivity.LocationActivityDelegate
    public void didSelectLocation(TLRPC$MessageMedia tLRPC$MessageMedia, int i, boolean z, int i2, String str) {
        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m90of(tLRPC$MessageMedia, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i2, str));
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        if (i == 0 || i == 1) {
            afterMessageSend();
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isEditingMessageMedia() {
        ChatActivityEnterView chatActivityEnterView;
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return ((chatAttachAlert == null || chatAttachAlert.getEditingMessageObject() == null) && ((chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getEditingMessageObject() == null)) ? false : true;
    }

    @Override // org.telegram.p043ui.Components.InstantCameraView.Delegate
    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public boolean canScheduleMessage() {
        if ((!getMessagesController().isForum(getDialogId()) || this.isTopic) && this.currentEncryptedChat == null) {
            BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
            if (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) {
                return (!isThreadChat() || this.isTopic) && !isTemplatesChannel(true, false);
            }
            return false;
        }
        return false;
    }

    public boolean canSendMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0);
    }

    @Override // org.telegram.p043ui.Components.InstantCameraView.Delegate
    public boolean isInScheduleMode() {
        return this.chatMode == 1;
    }

    public int getChatMode() {
        return this.chatMode;
    }

    public MessageObject getThreadMessage() {
        return this.threadMessageObject;
    }

    public MessageObject getReplyMessage() {
        return this.replyingMessageObject;
    }

    public ReplyQuote getReplyQuote() {
        return this.replyingQuote;
    }

    public long getThreadId() {
        return this.threadMessageId;
    }

    public long getInlineReturn() {
        return this.inlineReturn;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public TLRPC$Chat getCurrentChat() {
        return this.currentChat;
    }

    public TLRPC$EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public TLRPC$ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public ChatObject.Call getGroupCall() {
        ChatObject.Call call;
        if (this.chatMode == 0 && (call = this.groupCall) != null && (call.call instanceof TLRPC$TL_groupCall)) {
            return call;
        }
        return null;
    }

    public TLRPC$UserFull getCurrentUserInfo() {
        return this.userInfo;
    }

    public void sendAudio(ArrayList<MessageObject> arrayList, CharSequence charSequence, boolean z, int i, String str, boolean z2, boolean z3) {
        if (checkSlowModeAlert()) {
            fillEditingMediaWithCaption(charSequence, null);
            if (z2) {
                this.presenter.checkAndSendReaction(arrayList, charSequence.toString(), this.replyingMessageObject);
                return;
            }
            SendMessagesHelper.prepareSendingAudioDocuments(getAccountInstance(), arrayList, charSequence != null ? charSequence : null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z, i, this.editingMessageObject, str, z3);
            afterMessageSend();
        }
    }

    public void sendContact(TLRPC$User tLRPC$User, boolean z, int i, String str) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m82of(tLRPC$User, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i, str));
            afterMessageSend();
        }
    }

    public void sendPoll(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap<String, String> hashMap, boolean z, int i, String str) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m85of(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, hashMap, z, i, str));
            afterMessageSend();
        }
    }

    @Override // org.telegram.p043ui.Components.InstantCameraView.Delegate
    public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean z, int i, boolean z2, String str) {
        if (photoEntry == null) {
            return;
        }
        if (videoEditedInfo != null && videoEditedInfo.roundVideo) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda179
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$sendMedia$320();
                }
            };
            this.closeInstantCameraAnimation = runnable;
            AndroidUtilities.runOnUIThread(runnable, C0483C.DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS);
        }
        fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
        if (photoEntry.isVideo) {
            if (videoEditedInfo != null) {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2, photoEntry.hasSpoiler, photoEntry.caption, str);
            } else {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2, photoEntry.hasSpoiler, photoEntry.caption, str);
            }
        } else if (photoEntry.imagePath != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.imagePath, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2, photoEntry.caption, str);
        } else if (photoEntry.path != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.path, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.replyingQuote, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2, photoEntry.caption, str);
        }
        afterMessageSend();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMedia$320() {
        this.closeInstantCameraAnimation = null;
        runCloseInstantCameraAnimation();
    }

    private void runCloseInstantCameraAnimation() {
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView == null) {
            return;
        }
        instantCameraView.cancelBlur();
        InstantCameraView.InstantViewCameraContainer cameraContainer = this.instantCameraView.getCameraContainer();
        AnimatorSet animatorSet = new AnimatorSet();
        animatorSet.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, 0.5f), ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, 0.5f), ObjectAnimator.ofFloat(cameraContainer, View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofFloat(this.instantCameraView.getSwitchButtonView(), View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofInt(this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(this.instantCameraView.getMuteImageView(), View.ALPHA, BitmapDescriptorFactory.HUE_RED));
        animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.137
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (ChatActivity.this.instantCameraView != null) {
                    ChatActivity.this.instantCameraView.setIsMessageTransition(false);
                    ChatActivity.this.instantCameraView.hideCamera(true);
                    ChatActivity.this.instantCameraView.setVisibility(4);
                }
            }
        });
        animatorSet.start();
    }

    public void sendAnimatedEmoji(TLRPC$Document tLRPC$Document, boolean z, int i) {
        String findAnimatedEmojiEmoticon;
        if (tLRPC$Document == null || (findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(tLRPC$Document, null)) == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji = new TLRPC$TL_messageEntityCustomEmoji();
        tLRPC$TL_messageEntityCustomEmoji.document = tLRPC$Document;
        tLRPC$TL_messageEntityCustomEmoji.document_id = tLRPC$Document.f1610id;
        tLRPC$TL_messageEntityCustomEmoji.offset = 0;
        tLRPC$TL_messageEntityCustomEmoji.length = findAnimatedEmojiEmoticon.length();
        arrayList.add(tLRPC$TL_messageEntityCustomEmoji);
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.m94of(findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, arrayList, null, null, z, i, null, false, null));
        afterMessageSend();
    }

    public void showOpenGameAlert(final TLRPC$TL_game tLRPC$TL_game, final MessageObject messageObject, final String str, boolean z, final long j) {
        String str2;
        TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
        str2 = "";
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("AppName", C3632R.string.AppName));
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", C3632R.string.BotPermissionGameAlert, user != null ? ContactsController.formatName(user.first_name, user.last_name) : ""));
            builder.setPositiveButton(LocaleController.getString("OK", C3632R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda48
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$showOpenGameAlert$321(tLRPC$TL_game, messageObject, str, j, dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
            showDialog(builder.create());
            return;
        }
        String publicUsername = UserObject.getPublicUsername(user);
        if (Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            if (this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) == this) {
                presentFragment(new WebviewActivity(str, (user == null || TextUtils.isEmpty(publicUsername)) ? "" : publicUsername, tLRPC$TL_game.title, tLRPC$TL_game.short_name, messageObject));
                return;
            }
            return;
        }
        Activity parentActivity = getParentActivity();
        String str3 = tLRPC$TL_game.short_name;
        if (user != null && publicUsername != null) {
            str2 = publicUsername;
        }
        WebviewActivity.openGameInBrowser(str, messageObject, parentActivity, str3, str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showOpenGameAlert$321(TLRPC$TL_game tLRPC$TL_game, MessageObject messageObject, String str, long j, DialogInterface dialogInterface, int i) {
        showOpenGameAlert(tLRPC$TL_game, messageObject, str, false, j);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putBoolean("askgame_" + j, false).commit();
    }

    /* JADX WARN: Code restructure failed: missing block: B:27:0x005a, code lost:
        if (r12 != r11.get(r11.size() - 1).f1626id) goto L10;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void processLoadedDiscussionMessage(boolean r21, org.telegram.tgnet.TLRPC$TL_messages_discussionMessage r22, boolean r23, org.telegram.tgnet.TLRPC$messages_Messages r24, final int r25, org.telegram.messenger.MessageObject r26, org.telegram.tgnet.TLRPC$TL_messages_getDiscussionMessage r27, org.telegram.tgnet.TLRPC$Chat r28, final int r29, org.telegram.messenger.MessageObject r30) {
        /*
            Method dump skipped, instructions count: 419
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.processLoadedDiscussionMessage(boolean, org.telegram.tgnet.TLRPC$TL_messages_discussionMessage, boolean, org.telegram.tgnet.TLRPC$messages_Messages, int, org.telegram.messenger.MessageObject, org.telegram.tgnet.TLRPC$TL_messages_getDiscussionMessage, org.telegram.tgnet.TLRPC$Chat, int, org.telegram.messenger.MessageObject):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$323(boolean[] zArr, int i, ChatActivity chatActivity) {
        ChatActivityEnterView chatActivityEnterView;
        if (zArr[0] || i != this.commentLoadingMessageId || !this.isFullyVisible || isFinishing()) {
            return;
        }
        zArr[0] = true;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda225
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$322();
            }
        }, 200L);
        presentFragment(chatActivity);
        if (!isKeyboardVisible() || chatActivity.hideKeyboardOnShow() || (chatActivityEnterView = chatActivity.chatActivityEnterView) == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        chatActivity.chatActivityEnterView.getEditField().requestFocus();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$322() {
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$138  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass138 implements NotificationCenter.NotificationCenterDelegate {
        final /* synthetic */ ChatActivity val$chatActivity;
        final /* synthetic */ int val$commentsClassGuid;
        final /* synthetic */ Runnable val$openCommentsChat;

        AnonymousClass138(int i, Runnable runnable, ChatActivity chatActivity) {
            this.val$commentsClassGuid = i;
            this.val$openCommentsChat = runnable;
            this.val$chatActivity = chatActivity;
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(final int i, final int i2, final Object... objArr) {
            int i3 = NotificationCenter.messagesDidLoad;
            if (i == i3 && ((Integer) objArr[10]).intValue() == this.val$commentsClassGuid) {
                this.val$openCommentsChat.run();
                final ChatActivity chatActivity = this.val$chatActivity;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$138$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.didReceivedNotification(i, i2, objArr);
                    }
                }, 50L);
                NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).removeObserver(this, i3);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$324(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, int i3, int i4, ArrayList arrayList) {
        getMessagesController().processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, 0L, 30, i > 0 ? i : i2, 0, false, i3, i4, 0, 0, 0, i > 0 ? 3 : 2, true, 0, ((MessageObject) arrayList.get(arrayList.size() - 1)).getId(), 1, false, 0, true, this.isTopic, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openDiscussionMessageChat(long j, final MessageObject messageObject, int i, final long j2, final int i2, final int i3, final MessageObject messageObject2) {
        int i4 = i;
        final TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(j));
        final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage = new TLRPC$TL_messages_getDiscussionMessage();
        tLRPC$TL_messages_getDiscussionMessage.peer = MessagesController.getInputPeer(chat);
        tLRPC$TL_messages_getDiscussionMessage.msg_id = i4;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.m105d("getDiscussionMessage chat = " + chat.f1602id + " msg_id = " + i4);
        }
        this.commentLoadingMessageId = 0;
        this.savedDiscussionMessage = null;
        this.savedNoDiscussion = false;
        this.savedNoHistory = false;
        this.savedHistory = null;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.invalidateViews();
        }
        if (this.commentMessagesRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentMessagesRequestId, false);
        }
        if (this.commentRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentRequestId, false);
        }
        if (messageObject2 != null) {
            i4 = messageObject2.getId();
        }
        this.commentLoadingMessageId = i4;
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null) {
            recyclerListView2.invalidateViews();
        }
        final int i5 = this.commentLoadingGuid + 1;
        this.commentLoadingGuid = i5;
        this.commentRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getDiscussionMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda324
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openDiscussionMessageChat$330(i5, i2, j2, i3, messageObject2, tLRPC$TL_messages_getDiscussionMessage, chat, messageObject, tLObject, tLRPC$TL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.commentRequestId, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$330(final int i, final int i2, final long j, final int i3, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final MessageObject messageObject2, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda239
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$328(i, i2, j, tLObject, i3, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, messageObject2);
            }
        };
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda252
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$329(runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$328(int i, final int i2, long j, TLObject tLObject, final int i3, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final MessageObject messageObject2) {
        if (i != this.commentLoadingGuid) {
            return;
        }
        this.commentRequestId = -1;
        if (tLObject instanceof TLRPC$TL_messages_discussionMessage) {
            this.savedDiscussionMessage = (TLRPC$TL_messages_discussionMessage) tLObject;
            getMessagesController().putUsers(this.savedDiscussionMessage.users, false);
            getMessagesController().putChats(this.savedDiscussionMessage.chats, false);
        } else {
            this.savedNoDiscussion = true;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC$TL_messages_discussionMessage tLRPC$TL_messages_discussionMessage = this.savedDiscussionMessage;
        if (tLRPC$TL_messages_discussionMessage != null && tLRPC$TL_messages_discussionMessage.messages != null) {
            for (int i4 = 0; i4 < this.savedDiscussionMessage.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = this.savedDiscussionMessage.messages.get(i4);
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    arrayList.add(tLRPC$Message);
                }
            }
        }
        if (arrayList.size() > 0) {
            TLRPC$Message tLRPC$Message2 = (TLRPC$Message) arrayList.get(0);
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getMessagesController().getInputPeer(tLRPC$Message2.peer_id);
            tLRPC$TL_messages_getReplies.msg_id = tLRPC$Message2.f1626id;
            tLRPC$TL_messages_getReplies.offset_date = 0;
            tLRPC$TL_messages_getReplies.limit = 30;
            if (i3 > 0) {
                tLRPC$TL_messages_getReplies.offset_id = i3;
                tLRPC$TL_messages_getReplies.add_offset = (-30) / 2;
            } else {
                tLRPC$TL_messages_getReplies.offset_id = i2 == 0 ? 1 : i2;
                tLRPC$TL_messages_getReplies.add_offset = (-30) + 10;
            }
            final int i5 = 1 + this.commentMessagesLoadingGuid;
            this.commentMessagesLoadingGuid = i5;
            this.commentMessagesRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda325
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$openDiscussionMessageChat$327(i5, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2, tLObject2, tLRPC$TL_error);
                }
            });
            return;
        }
        this.savedNoHistory = true;
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, true, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$326(final int i, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error, final int i2, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final int i3, final MessageObject messageObject2) {
        lambda$openDiscussionMessageChat$329(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda244
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$325(i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$327(final int i, final int i2, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final int i3, final MessageObject messageObject2, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda245
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$326(i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$325(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, int i2, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i3, MessageObject messageObject2) {
        if (i != this.commentMessagesLoadingGuid) {
            return;
        }
        this.commentMessagesRequestId = -1;
        if (tLObject != null) {
            this.savedHistory = (TLRPC$messages_Messages) tLObject;
        } else if ("CHANNEL_PRIVATE".equals(tLRPC$TL_error.text)) {
            MessagesController.showCantOpenAlert(this, LocaleController.getString("ChannelCantOpenBannedByAdmin", C3632R.string.ChannelCantOpenBannedByAdmin));
            this.commentLoadingMessageId = 0;
            this.chatListView.invalidateViews();
            return;
        } else {
            this.savedNoHistory = true;
        }
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, this.savedNoHistory, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openOriginalReplyChat(MessageObject messageObject) {
        if (UserObject.isUserSelf(this.currentUser)) {
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader.saved_from_peer.user_id == this.currentUser.f1751id) {
                scrollToMessageId(tLRPC$MessageFwdHeader.saved_from_msg_id, messageObject.getId(), true, 0, true, 0);
                return;
            }
        }
        Bundle bundle = new Bundle();
        TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.saved_from_peer;
        long j = tLRPC$Peer.channel_id;
        if (j != 0) {
            bundle.putLong("chat_id", j);
        } else {
            long j2 = tLRPC$Peer.chat_id;
            if (j2 != 0) {
                bundle.putLong("chat_id", j2);
            } else {
                long j3 = tLRPC$Peer.user_id;
                if (j3 != 0) {
                    bundle.putLong("user_id", j3);
                }
            }
        }
        bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    public void showRequestUrlAlert(final TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, final String str, final boolean z) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("OpenUrlTitle", C3632R.string.OpenUrlTitle));
        String string = LocaleController.getString("OpenUrlAlert2", C3632R.string.OpenUrlAlert2);
        int indexOf = string.indexOf("%");
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(String.format(string, str));
        if (indexOf >= 0) {
            spannableStringBuilder.setSpan(new URLSpan(str), indexOf, str.length() + indexOf, 33);
        }
        builder.setMessage(spannableStringBuilder);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString("Cancel", C3632R.string.Cancel), null);
        int i = 2;
        final CheckBoxCell[] checkBoxCellArr = new CheckBoxCell[2];
        LinearLayout linearLayout = new LinearLayout(getParentActivity());
        linearLayout.setOrientation(1);
        TLRPC$User currentUser = getUserConfig().getCurrentUser();
        int i2 = 0;
        while (true) {
            if (i2 < (tLRPC$TL_urlAuthResultRequest.request_write_access ? i : 1)) {
                checkBoxCellArr[i2] = new CheckBoxCell(getParentActivity(), 5, this.themeDelegate);
                checkBoxCellArr[i2].setBackgroundDrawable(Theme.getSelectorDrawable(false));
                checkBoxCellArr[i2].setMultiline(true);
                checkBoxCellArr[i2].setTag(Integer.valueOf(i2));
                if (i2 == 0) {
                    int i3 = C3632R.string.OpenUrlOption1;
                    Object[] objArr = new Object[i];
                    objArr[0] = tLRPC$TL_urlAuthResultRequest.domain;
                    objArr[1] = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
                    SpannableStringBuilder replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", i3, objArr));
                    int indexOf2 = TextUtils.indexOf(replaceTags, tLRPC$TL_urlAuthResultRequest.domain);
                    if (indexOf2 >= 0) {
                        replaceTags.setSpan(new URLSpan(""), indexOf2, tLRPC$TL_urlAuthResultRequest.domain.length() + indexOf2, 33);
                    }
                    checkBoxCellArr[i2].setText(replaceTags, "", true, false);
                } else {
                    checkBoxCellArr[i2].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", C3632R.string.OpenUrlOption2, UserObject.getFirstName(tLRPC$TL_urlAuthResultRequest.bot))), "", true, false);
                }
                checkBoxCellArr[i2].setPadding(LocaleController.isRTL ? AndroidUtilities.m107dp(16) : AndroidUtilities.m107dp(8), 0, LocaleController.isRTL ? AndroidUtilities.m107dp(8) : AndroidUtilities.m107dp(16), 0);
                linearLayout.addView(checkBoxCellArr[i2], LayoutHelper.createLinear(-1, -2));
                checkBoxCellArr[i2].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda118
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.lambda$showRequestUrlAlert$331(checkBoxCellArr, view);
                    }
                });
                i2++;
                i = 2;
            } else {
                builder.setView(linearLayout);
                builder.setPositiveButton(LocaleController.getString("Open", C3632R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda52
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        ChatActivity.this.lambda$showRequestUrlAlert$336(checkBoxCellArr, str, tLRPC$TL_messages_requestUrlAuth, tLRPC$TL_urlAuthResultRequest, z, dialogInterface, i4);
                    }
                });
                showDialog(builder.create());
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$showRequestUrlAlert$331(CheckBoxCell[] checkBoxCellArr, View view) {
        if (view.isEnabled()) {
            Integer num = (Integer) view.getTag();
            checkBoxCellArr[num.intValue()].setChecked(!checkBoxCellArr[num.intValue()].isChecked(), true);
            if (num.intValue() != 0 || checkBoxCellArr[1] == null) {
                return;
            }
            if (checkBoxCellArr[num.intValue()].isChecked()) {
                checkBoxCellArr[1].setEnabled(true);
                return;
            }
            checkBoxCellArr[1].setChecked(false, true);
            checkBoxCellArr[1].setEnabled(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$336(CheckBoxCell[] checkBoxCellArr, final String str, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, final boolean z, DialogInterface dialogInterface, int i) {
        if (!checkBoxCellArr[0].isChecked()) {
            Browser.openUrl((Context) getParentActivity(), str, false);
            return;
        }
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC$TL_messages_acceptUrlAuth tLRPC$TL_messages_acceptUrlAuth = new TLRPC$TL_messages_acceptUrlAuth();
        String str2 = tLRPC$TL_messages_requestUrlAuth.url;
        if (str2 != null) {
            tLRPC$TL_messages_acceptUrlAuth.url = str2;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 4;
        } else {
            tLRPC$TL_messages_acceptUrlAuth.button_id = tLRPC$TL_messages_requestUrlAuth.button_id;
            tLRPC$TL_messages_acceptUrlAuth.msg_id = tLRPC$TL_messages_requestUrlAuth.msg_id;
            tLRPC$TL_messages_acceptUrlAuth.peer = tLRPC$TL_messages_requestUrlAuth.peer;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 2;
        }
        if (tLRPC$TL_urlAuthResultRequest.request_write_access) {
            tLRPC$TL_messages_acceptUrlAuth.write_allowed = checkBoxCellArr[1].isChecked();
        }
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_acceptUrlAuth, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda327
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$showRequestUrlAlert$333(str, tLRPC$TL_messages_requestUrlAuth, z, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda292
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$335(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$333(final String str, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, final boolean z, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda272
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$332(tLObject, str, tLRPC$TL_messages_requestUrlAuth, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$332(TLObject tLObject, String str, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, boolean z) {
        if (tLObject instanceof TLRPC$TL_urlAuthResultAccepted) {
            Browser.openUrl((Context) getParentActivity(), ((TLRPC$TL_urlAuthResultAccepted) tLObject).url, false);
        } else if (tLObject instanceof TLRPC$TL_urlAuthResultDefault) {
            Browser.openUrl((Context) getParentActivity(), str, false);
        } else {
            String str2 = tLRPC$TL_messages_requestUrlAuth.url;
            if (str2 != null) {
                AlertsCreator.showOpenUrlAlert(this, str2, false, z, this.themeDelegate);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$335(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda26
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showRequestUrlAlert$334(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$334(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeMessageObject(MessageObject messageObject) {
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf == -1) {
            return;
        }
        this.messages.remove(indexOf);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + indexOf);
        }
    }

    public void openVCard(TLRPC$User tLRPC$User, String str, String str2, String str3, String str4) {
        File file;
        if (tLRPC$User != null) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", tLRPC$User.f1751id);
            bundle.putBoolean("show_add_to_contacts", true);
            bundle.putString("vcard", str2);
            bundle.putString("vcard_phone", str);
            bundle.putString("vcard_first_name", str3);
            bundle.putString("vcard_last_name", str4);
            presentFragment(new ProfileActivity(bundle));
            return;
        }
        try {
            if (TextUtils.isEmpty(str2)) {
                file = null;
            } else {
                File sharingDirectory = AndroidUtilities.getSharingDirectory();
                sharingDirectory.mkdirs();
                File file2 = new File(sharingDirectory, "vcard.vcf");
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file2));
                bufferedWriter.write(str2);
                bufferedWriter.close();
                file = file2;
            }
            showDialog(new PhonebookShareAlert(this, null, tLRPC$User, null, file, C3544PhoneFormat.stripExceptNumbers(str), str3, str4, this.themeDelegate));
        } catch (Exception e) {
            FileLog.m102e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setCellSelectionBackground(MessageObject messageObject, ChatMessageCell chatMessageCell, int i, boolean z) {
        boolean z2;
        MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject);
        if (validGroupedMessage != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= validGroupedMessage.messages.size()) {
                    z2 = false;
                    break;
                } else if (this.selectedMessagesIds[i].indexOfKey(validGroupedMessage.messages.get(i2).getId()) < 0) {
                    z2 = true;
                    break;
                } else {
                    i2++;
                }
            }
            if (!z2) {
                validGroupedMessage = null;
            }
        }
        chatMessageCell.setDrawSelectionBackground(validGroupedMessage == null);
        chatMessageCell.setChecked(true, validGroupedMessage == null, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0072 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0084  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x008f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void openClickableLink(final android.text.style.CharacterStyle r13, final java.lang.String r14, boolean r15, final org.telegram.p043ui.Cells.ChatMessageCell r16, final org.telegram.messenger.MessageObject r17) {
        /*
            Method dump skipped, instructions count: 356
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.openClickableLink(android.text.style.CharacterStyle, java.lang.String, boolean, org.telegram.ui.Cells.ChatMessageCell, org.telegram.messenger.MessageObject):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00ed A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ee  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public /* synthetic */ void lambda$openClickableLink$337(java.lang.String r7, android.text.style.CharacterStyle r8, org.telegram.messenger.MessageObject r9, org.telegram.p043ui.Cells.ChatMessageCell r10, int r11, android.content.DialogInterface r12, int r13) {
        /*
            Method dump skipped, instructions count: 304
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.lambda$openClickableLink$337(java.lang.String, android.text.style.CharacterStyle, org.telegram.messenger.MessageObject, org.telegram.ui.Cells.ChatMessageCell, int, android.content.DialogInterface, int):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openClickableLink$338(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    public void shakeContent() {
        AndroidUtilities.shakeViewSpring(getChatListView(), 5.0f);
        BotWebViewVibrationEffect.APP_ERROR.vibrate();
        ChatActivityEnterView chatActivityEnterView = getChatActivityEnterView();
        for (int i = 0; i < chatActivityEnterView.getChildCount(); i++) {
            AndroidUtilities.shakeViewSpring(chatActivityEnterView.getChildAt(i), 5.0f);
        }
        C3704ActionBar actionBar = getActionBar();
        for (int i2 = 0; i2 < actionBar.getChildCount(); i2++) {
            AndroidUtilities.shakeViewSpring(actionBar.getChildAt(i2), 5.0f);
        }
    }

    private Browser.Progress makeProgressForLink(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
        Browser.Progress progress = this.progressDialogCurrent;
        AnonymousClass139 anonymousClass139 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (characterStyle != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            anonymousClass139 = new AnonymousClass139(chatMessageCell, characterStyle);
        }
        this.progressDialogCurrent = anonymousClass139;
        return anonymousClass139;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$139  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass139 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ CharacterStyle val$span;

        AnonymousClass139(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
            this.val$cell = chatMessageCell;
            this.val$span = characterStyle;
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 1;
            ChatActivity.this.progressDialogLinkSpan = this.val$span;
            this.val$cell.invalidate();
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$139$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass139.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Browser.Progress makeProgressForBotButton(ChatMessageCell chatMessageCell, String str) {
        Browser.Progress progress = this.progressDialogCurrent;
        AnonymousClass140 anonymousClass140 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (str != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            anonymousClass140 = new AnonymousClass140(chatMessageCell, str);
        }
        this.progressDialogCurrent = anonymousClass140;
        return anonymousClass140;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$140  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass140 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ String val$url;

        AnonymousClass140(ChatMessageCell chatMessageCell, String str) {
            this.val$cell = chatMessageCell;
            this.val$url = str;
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 3;
            ChatActivity.this.progressDialogBotButtonUrl = this.val$url;
            this.val$cell.invalidate();
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$140$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass140.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0093 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ad  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void processExternalUrl(int r13, java.lang.String r14, android.text.style.CharacterStyle r15, org.telegram.p043ui.Cells.ChatMessageCell r16, boolean r17) {
        /*
            Method dump skipped, instructions count: 206
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.processExternalUrl(int, java.lang.String, android.text.style.CharacterStyle, org.telegram.ui.Cells.ChatMessageCell, boolean):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void logSponsoredClicked(MessageObject messageObject) {
        if (messageObject == null || !messageObject.isSponsored()) {
            return;
        }
        TLRPC$TL_channels_clickSponsoredMessage tLRPC$TL_channels_clickSponsoredMessage = new TLRPC$TL_channels_clickSponsoredMessage();
        tLRPC$TL_channels_clickSponsoredMessage.random_id = messageObject.sponsoredId;
        tLRPC$TL_channels_clickSponsoredMessage.channel = getMessagesController().getInputChannel(-getDialogId());
        getConnectionsManager().sendRequest(tLRPC$TL_channels_clickSponsoredMessage, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:132:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0287  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void didPressMessageUrl(final android.text.style.CharacterStyle r23, boolean r24, final org.telegram.messenger.MessageObject r25, final org.telegram.p043ui.Cells.ChatMessageCell r26) {
        /*
            Method dump skipped, instructions count: 865
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.didPressMessageUrl(android.text.style.CharacterStyle, boolean, org.telegram.messenger.MessageObject, org.telegram.ui.Cells.ChatMessageCell):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$342(final AlertDialog[] alertDialogArr, final String str, final ChatMessageCell chatMessageCell, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda294
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didPressMessageUrl$341(alertDialogArr, tLObject, str, chatMessageCell);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$341(AlertDialog[] alertDialogArr, TLObject tLObject, final String str, final ChatMessageCell chatMessageCell) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        if (!(tLObject instanceof TLRPC$TL_payments_bankCardData)) {
            if (chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
        } else if (getParentActivity() != null) {
            final TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData = (TLRPC$TL_payments_bankCardData) tLObject;
            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$TL_payments_bankCardData.open_urls.size();
            for (int i = 0; i < size; i++) {
                arrayList.add(tLRPC$TL_payments_bankCardData.open_urls.get(i).name);
            }
            arrayList.add(LocaleController.getString("CopyCardNumber", C3632R.string.CopyCardNumber));
            builder.setTitle(tLRPC$TL_payments_bankCardData.title);
            builder.setItems((CharSequence[]) arrayList.toArray(new CharSequence[0]), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda49
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i2) {
                    ChatActivity.this.lambda$didPressMessageUrl$339(tLRPC$TL_payments_bankCardData, str, dialogInterface, i2);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda54
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$didPressMessageUrl$340(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$339(TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData, String str, DialogInterface dialogInterface, int i) {
        if (i < tLRPC$TL_payments_bankCardData.open_urls.size()) {
            Browser.openUrl((Context) getParentActivity(), tLRPC$TL_payments_bankCardData.open_urls.get(i).url, this.inlineReturn == 0, false);
            return;
        }
        AndroidUtilities.addToClipboard(str);
        Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("CardNumberCopied", C3632R.string.CardNumberCopied), 0).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didPressMessageUrl$340(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$344(AlertDialog[] alertDialogArr, final int i, final ChatMessageCell chatMessageCell) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda28
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$didPressMessageUrl$343(i, chatMessageCell, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$343(int i, ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        chatMessageCell.resetPressedLink(-1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$345(MessageObject messageObject, String str, CharacterStyle characterStyle, ChatMessageCell chatMessageCell, DialogInterface dialogInterface, int i) {
        if (i == 0) {
            logSponsoredClicked(messageObject);
            processExternalUrl(1, str, characterStyle, chatMessageCell, false);
            return;
        }
        boolean z = true;
        if (i == 1) {
            boolean z2 = false;
            if (str.startsWith("mailto:")) {
                str = str.substring(7);
            } else if (str.startsWith("tel:")) {
                str = str.substring(4);
                z2 = true;
                z = false;
            } else {
                z = false;
            }
            AndroidUtilities.addToClipboard(str);
            createUndoView();
            UndoView undoView = this.undoView;
            if (undoView == null) {
                return;
            }
            if (z) {
                undoView.showWithAction(0L, 80, (Runnable) null);
            } else if (z2) {
                undoView.showWithAction(0L, 60, (Runnable) null);
            } else {
                undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didPressMessageUrl$346(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    void openPhotoViewerForMessage(ChatMessageCell chatMessageCell, MessageObject messageObject) {
        ChatMessageCell chatMessageCell2;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        if (chatMessageCell == null) {
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getMessageObject().equals(messageObject)) {
                        break;
                    }
                }
            }
        }
        chatMessageCell2 = chatMessageCell;
        if (messageObject.isVideo()) {
            sendSecretMessageRead(messageObject, true);
        }
        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (chatMessageCell2 != null && playingMessageObject != null && playingMessageObject.isVideo()) {
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            if (playingMessageObject.equals(messageObject) && (animation = chatMessageCell2.getPhotoImage().getAnimation()) != null && this.videoTextureView != null && this.videoPlayerContainer.getTag() != null && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                try {
                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                    new Canvas(animatedBitmap).drawBitmap(bitmap, BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, (Paint) null);
                    bitmap.recycle();
                } catch (Throwable th) {
                    FileLog.m102e(th);
                }
            }
            MediaController.getInstance().cleanupPlayer(true, true, false, playingMessageObject.equals(messageObject));
        }
        if (this.chatMode == 1 && (messageObject.isVideo() || messageObject.type == 1)) {
            PhotoViewer.getInstance().setParentChatActivity(this);
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            int size = this.messages.size();
            for (int i2 = 0; i2 < size; i2++) {
                MessageObject messageObject2 = this.messages.get(i2);
                if (messageObject2.isVideo() || messageObject2.type == 1) {
                    arrayList.add(0, messageObject2);
                }
            }
            PhotoViewer.getInstance().openPhoto(arrayList, arrayList.indexOf(messageObject), this.dialog_id, 0L, getTopicId(), this.photoViewerProvider);
        } else {
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i3 = messageObject.type;
            photoViewer.openPhoto(messageObject, this, i3 != 0 ? this.dialog_id : 0L, i3 != 0 ? this.mergeDialogId : 0L, i3 != 0 ? getTopicId() : 0L, this.photoViewerProvider);
        }
        hideHints(false);
        MediaController.getInstance().resetGoingToShowMessageObject();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMessageListAccessibilityVisibility() {
        ActionBarPopupWindow actionBarPopupWindow;
        if (this.currentEncryptedChat == null && Build.VERSION.SDK_INT >= 19) {
            RecyclerListView recyclerListView = this.chatListView;
            MentionsContainerView mentionsContainerView = this.mentionContainer;
            recyclerListView.setImportantForAccessibility(((mentionsContainerView == null || !mentionsContainerView.isOpen()) && ((actionBarPopupWindow = this.scrimPopupWindow) == null || !actionBarPopupWindow.isShowing())) ? 0 : 4);
        }
    }

    private void markSponsoredAsRead(MessageObject messageObject) {
        if (!messageObject.isSponsored() || messageObject.viewsReloaded) {
            return;
        }
        messageObject.viewsReloaded = true;
        TLRPC$TL_channels_viewSponsoredMessage tLRPC$TL_channels_viewSponsoredMessage = new TLRPC$TL_channels_viewSponsoredMessage();
        tLRPC$TL_channels_viewSponsoredMessage.channel = MessagesController.getInputChannel(this.currentChat);
        tLRPC$TL_channels_viewSponsoredMessage.random_id = messageObject.sponsoredId;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_viewSponsoredMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda336
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.lambda$markSponsoredAsRead$347(tLObject, tLRPC$TL_error);
            }
        });
        getMessagesController().markSponsoredAsRead(this.dialog_id, messageObject);
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean canBeginSlide() {
        return this.swipeBackEnabled && this.chatActivityEnterView.swipeToBackEnabled() && this.pullingDownOffset == BitmapDescriptorFactory.HUE_RED;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean isSwipeBackEnabled(MotionEvent motionEvent) {
        MessagePreviewView messagePreviewView;
        return this.swipeBackEnabled && ((messagePreviewView = this.forwardingPreviewView) == null || !messagePreviewView.isShowing());
    }

    /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter */
    /* loaded from: classes5.dex */
    public class ChatActivityAdapter extends RecyclerAnimationScrollHelper.AnimatableAdapter {
        public boolean filteredEndReached;
        private boolean isBot;
        public boolean isFiltered;
        public boolean isFrozen;
        private Context mContext;
        private int messagesEndRow;
        public int messagesStartRow;
        private int rowCount;
        private int botInfoRow = -5;
        private int botInfoEmptyRow = -5;
        private int loadingUpRow = -5;
        private int loadingDownRow = -5;
        public ArrayList<MessageObject> frozenMessages = new ArrayList<>();
        public ArrayList<MessageObject> filteredMessages = new ArrayList<>();

        @Override // org.telegram.p043ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        static /* synthetic */ int access$21300(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.messagesEndRow;
        }

        static /* synthetic */ int access$26900(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.botInfoRow;
        }

        static /* synthetic */ int access$44500(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingDownRow;
        }

        static /* synthetic */ int access$44600(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingUpRow;
        }

        static /* synthetic */ void access$44700(ChatActivityAdapter chatActivityAdapter) {
            chatActivityAdapter.updateRowsInternal();
        }

        public ChatActivityAdapter(Context context) {
            this.mContext = context;
            TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
            this.isBot = tLRPC$User != null && tLRPC$User.bot;
            setHasStableIds(true);
        }

        public void updateRowsSafe() {
            int i = this.rowCount;
            int i2 = this.botInfoRow;
            int i3 = this.loadingUpRow;
            int i4 = this.loadingDownRow;
            int i5 = this.messagesStartRow;
            int i6 = this.messagesEndRow;
            updateRowsInternal();
            if (i == this.rowCount && i2 == this.botInfoRow && i3 == this.loadingUpRow && i4 == this.loadingDownRow && i5 == this.messagesStartRow && i6 == this.messagesEndRow) {
                return;
            }
            notifyDataSetChanged(false);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void updateRowsInternal() {
            ArrayList<MessageObject> arrayList;
            TLRPC$User tLRPC$User;
            TLRPC$User tLRPC$User2;
            this.rowCount = 0;
            if (this.isFrozen) {
                arrayList = this.frozenMessages;
            } else if (this.isFiltered) {
                arrayList = this.filteredMessages;
            } else {
                arrayList = ChatActivity.this.messages;
            }
            if (!arrayList.isEmpty()) {
                if (!this.isFiltered && ((!ChatActivity.this.forwardEndReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.forwardEndReached[1])) && !ChatActivity.this.hideForwardEndReached)) {
                    int i = this.rowCount;
                    this.rowCount = i + 1;
                    this.loadingDownRow = i;
                } else {
                    this.loadingDownRow = -5;
                }
                int i2 = this.rowCount;
                this.messagesStartRow = i2;
                int size = i2 + arrayList.size();
                this.rowCount = size;
                this.messagesEndRow = size;
                if (((UserObject.isReplyUser(ChatActivity.this.currentUser) || ((tLRPC$User2 = ChatActivity.this.currentUser) != null && tLRPC$User2.bot && !MessagesController.isSupportUser(tLRPC$User2) && ChatActivity.this.chatMode == 0)) && ChatActivity.this.endReached[0]) || (ChatActivity.this.isTemplatesChannel(true, false) && ChatActivity.this.endReached[0])) {
                    int i3 = this.rowCount;
                    this.rowCount = i3 + 1;
                    this.botInfoRow = i3;
                } else {
                    this.botInfoRow = -5;
                }
                if (!this.isFiltered ? (!ChatActivity.this.endReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.endReached[1])) && (AndroidUtilities.isTablet() || ChatActivity.this.isComments || ChatActivity.this.currentUser != null) : !this.filteredEndReached) {
                    int i4 = this.rowCount;
                    this.rowCount = i4 + 1;
                    this.loadingUpRow = i4;
                } else {
                    this.loadingUpRow = -5;
                }
            } else {
                this.loadingUpRow = -5;
                this.loadingDownRow = -5;
                this.messagesStartRow = -5;
                this.messagesEndRow = -5;
                if (UserObject.isReplyUser(ChatActivity.this.currentUser) || (((tLRPC$User = ChatActivity.this.currentUser) != null && tLRPC$User.bot && !MessagesController.isSupportUser(tLRPC$User) && ChatActivity.this.chatMode == 0) || ChatActivity.this.isTemplatesChannel(true, false))) {
                    int i5 = this.rowCount;
                    this.rowCount = i5 + 1;
                    this.botInfoRow = i5;
                } else {
                    this.botInfoRow = -5;
                }
            }
            if (ChatActivity.this.isAllowCombineMessages()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityAdapter.this.lambda$updateRowsInternal$0();
                    }
                }, 150L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$updateRowsInternal$0() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.updateCombineMessages();
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            this.botInfoEmptyRow = -5;
            if (ChatActivity.this.clearingHistory) {
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$User tLRPC$User = chatActivity.currentUser;
                if ((tLRPC$User == null || !tLRPC$User.bot || chatActivity.chatMode != 0 || ((ChatActivity.this.botInfo.size() <= 0 || (((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.f1751id)).description == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.f1751id)).description_photo == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.f1751id)).description_document == null)) && !UserObject.isReplyUser(ChatActivity.this.currentUser))) && !ChatActivity.this.isTemplatesChannel(true, false)) {
                    return 0;
                }
                this.botInfoEmptyRow = 0;
                return 1;
            }
            return this.rowCount;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public long getItemId(int i) {
            ArrayList<MessageObject> arrayList;
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 1L;
            }
            if (this.isFrozen) {
                arrayList = this.frozenMessages;
            } else if (this.isFiltered) {
                arrayList = this.filteredMessages;
            } else {
                arrayList = ChatActivity.this.messages;
            }
            int i2 = this.messagesStartRow;
            if (i >= i2 && i < this.messagesEndRow) {
                return arrayList.get(i - i2).stableId;
            }
            if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                return 1L;
            }
            if (i == this.loadingUpRow) {
                return 2L;
            }
            return i == this.loadingDownRow ? 3L : 4L;
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            ChatMessageCell chatMessageCell;
            ChatActionCell chatActionCell = null;
            if (i == 0) {
                if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                    chatMessageCell = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                } else {
                    Context context = this.mContext;
                    ChatActivity chatActivity = ChatActivity.this;
                    chatMessageCell = new ChatMessageCell(context, true, chatActivity.sharedResources, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount);
                }
                ChatMessageCell chatMessageCell2 = (ChatMessageCell) chatMessageCell;
                chatMessageCell2.setResourcesProvider(ChatActivity.this.themeDelegate);
                chatMessageCell2.shouldCheckVisibleOnScreen = false;
                chatMessageCell2.setDelegate(new ChatMessageCellDelegate(ChatActivity.this, null));
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell2.setAllowAssistant(true);
                }
                chatActionCell = chatMessageCell;
            } else if (i == 1) {
                Context context2 = this.mContext;
                ChatActivity chatActivity2 = ChatActivity.this;
                ChatActionCell chatActionCell2 = new ChatActionCell(this, context2, true, chatActivity2.themeDelegate, ((BaseFragment) chatActivity2).currentAccount) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1
                    @Override // org.telegram.p043ui.Cells.ChatActionCell, android.view.View
                    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
                        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
                        accessibilityNodeInfo.setVisibleToUser(true);
                    }
                };
                chatActionCell2.setInvalidateColors(true);
                chatActionCell2.setDelegate(new C43012());
                chatActionCell = chatActionCell2;
            } else if (i == 2) {
                chatActionCell = new ChatUnreadCell(this.mContext, ChatActivity.this.themeDelegate);
            } else if (i == 3) {
                BotHelpCell botHelpCell = new BotHelpCell(this.mContext, ChatActivity.this.themeDelegate);
                botHelpCell.setDelegate(new BotHelpCell.BotHelpCellDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda1
                    @Override // org.telegram.p043ui.Cells.BotHelpCell.BotHelpCellDelegate
                    public final void didPressUrl(String str) {
                        ChatActivity.ChatActivityAdapter.this.lambda$onCreateViewHolder$1(str);
                    }
                });
                chatActionCell = botHelpCell;
            } else if (i == 4) {
                Context context3 = this.mContext;
                ChatActivity chatActivity3 = ChatActivity.this;
                chatActionCell = new ChatLoadingCell(context3, chatActivity3.contentView, chatActivity3.themeDelegate);
            }
            chatActionCell.setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder(chatActionCell);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$2 */
        /* loaded from: classes5.dex */
        public class C43012 implements ChatActionCell.ChatActionCellDelegate {
            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean canDrawOutboundsContent() {
                return false;
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public /* synthetic */ long getDialogId() {
                return ChatActionCell.ChatActionCellDelegate.CC.$default$getDialogId(this);
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public /* synthetic */ void needOpenInviteLink(TLRPC$TL_chatInviteExported tLRPC$TL_chatInviteExported) {
                ChatActionCell.ChatActionCellDelegate.CC.$default$needOpenInviteLink(this, tLRPC$TL_chatInviteExported);
            }

            C43012() {
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean isInPreviewMode() {
                return ((BaseFragment) ChatActivity.this).inPreviewMode;
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didOpenPremiumGift(ChatActionCell chatActionCell, TLRPC$TL_premiumGiftOption tLRPC$TL_premiumGiftOption, String str, boolean z) {
                if (str != null) {
                    initGiftProgressDialog(chatActionCell);
                    PremiumPreviewGiftLinkBottomSheet.show(str, tLRPC$TL_premiumGiftOption, ChatActivity.this.getCurrentUser(), ChatActivity.this.progressDialogCurrent);
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new PremiumPreviewBottomSheet(chatActivity2, ((BaseFragment) chatActivity2).currentAccount, ChatActivity.this.getCurrentUser(), new GiftPremiumBottomSheet.GiftTier(tLRPC$TL_premiumGiftOption), ChatActivity.this.themeDelegate).setAnimateConfetti(z).setOutboundGift(chatActionCell.getMessageObject().isOut()));
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didOpenPremiumGiftChannel(ChatActionCell chatActionCell, String str, boolean z) {
                initGiftProgressDialog(chatActionCell);
                GiftInfoBottomSheet.show(getBaseFragment(), str, ChatActivity.this.progressDialogCurrent);
            }

            private void initGiftProgressDialog(ChatActionCell chatActionCell) {
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = (chatActionCell == null || chatActionCell.getMessageObject() == null) ? null : new C43021(chatActionCell);
            }

            /* JADX INFO: Access modifiers changed from: package-private */
            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1 */
            /* loaded from: classes5.dex */
            public class C43021 extends Browser.Progress {
                final /* synthetic */ ChatActionCell val$cell;

                C43021(ChatActionCell chatActionCell) {
                    this.val$cell = chatActionCell;
                }

                @Override // org.telegram.messenger.browser.Browser.Progress
                public void init() {
                    ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                    ChatActivity.this.progressDialogAtMessageType = 4;
                    ChatActivity.this.progressDialogLinkSpan = null;
                    this.val$cell.getMessageObject().flickerLoading = true;
                    this.val$cell.invalidate();
                }

                @Override // org.telegram.messenger.browser.Browser.Progress
                public void end(boolean z) {
                    if (z) {
                        return;
                    }
                    final ChatActionCell chatActionCell = this.val$cell;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatActivityAdapter.C43012.C43021.this.lambda$end$0(chatActionCell);
                        }
                    }, 250L);
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$end$0(ChatActionCell chatActionCell) {
                    ChatActivity.this.resetProgressDialogLoading();
                    chatActionCell.getMessageObject().flickerLoading = false;
                    chatActionCell.invalidate();
                }
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needShowEffectOverlay(ChatActionCell chatActionCell, TLRPC$Document tLRPC$Document, TLRPC$VideoSize tLRPC$VideoSize) {
                ChatActivity.this.emojiAnimationsOverlay.showAnimationForActionCell(chatActionCell, tLRPC$Document, tLRPC$VideoSize);
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didClickButton(ChatActionCell chatActionCell) {
                MessageObject messageObject;
                if (chatActionCell != null && (messageObject = chatActionCell.getMessageObject()) != null && messageObject.type == 22 && !chatActionCell.getMessageObject().isOutOwner() && chatActionCell.getMessageObject().isWallpaperForBoth() && chatActionCell.getMessageObject().isCurrentWallpaper()) {
                    AlertDialog create = new AlertDialog.Builder(ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider()).setTitle(LocaleController.getString(C3632R.string.RemoveWallpaperTitle)).setMessage(LocaleController.getString(C3632R.string.RemoveWallpaperMessage)).setPositiveButton(LocaleController.getString(C3632R.string.Remove), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$$ExternalSyntheticLambda0
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            ChatActivity.ChatActivityAdapter.C43012.this.lambda$didClickButton$0(dialogInterface, i);
                        }
                    }).setNegativeButton(LocaleController.getString(C3632R.string.Cancel), null).create();
                    ChatActivity.this.showDialog(create);
                    TextView textView = (TextView) create.getButton(-1);
                    if (textView != null) {
                        textView.setTextColor(ChatActivity.this.getThemedColor(Theme.key_text_RedBold));
                    }
                }
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$didClickButton$0(DialogInterface dialogInterface, int i) {
                ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clearWallpaper(ChatActivity.this.dialog_id, true, true);
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didClickImage(ChatActionCell chatActionCell) {
                TLRPC$VideoSize tLRPC$VideoSize;
                String str;
                MessageObject messageObject = chatActionCell.getMessageObject();
                PhotoViewer photoViewer = PhotoViewer.getInstance();
                ChatActivity chatActivity = ChatActivity.this;
                photoViewer.setParentActivity(chatActivity, chatActivity.themeDelegate);
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 640);
                if (chatActionCell.getMessageObject().type == 24) {
                    StoryViewer orCreateStoryViewer = ChatActivity.this.getOrCreateStoryViewer();
                    ChatActivity chatActivity2 = ChatActivity.this;
                    orCreateStoryViewer.openFor(chatActivity2, chatActivity2.chatListView, chatActionCell);
                } else if (chatActionCell.getMessageObject().type == 22) {
                    MessagesController messagesController = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount);
                    if (chatActionCell.showingCancelButton() && messageObject.getId() < 0 && (str = messagesController.uploadingWallpaper) != null && TextUtils.equals(messageObject.messageOwner.action.wallpaper.uploadingImage, str)) {
                        messagesController.cancelUploadWallpaper();
                        ChatActivity.this.removeMessageObject(messageObject);
                    } else if (chatActionCell.hasButton()) {
                        ThemePreviewActivity.showFor(ChatActivity.this, messageObject);
                    } else {
                        TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
                        if (tLRPC$Chat == null || ChatObject.canChangeChatInfo(tLRPC$Chat)) {
                            ChatActivity.this.showChatThemeBottomSheet();
                        }
                    }
                } else {
                    ArrayList<TLRPC$VideoSize> arrayList = messageObject.messageOwner.action.photo.video_sizes;
                    TLRPC$VideoSize tLRPC$VideoSize2 = null;
                    if (arrayList == null || arrayList.isEmpty()) {
                        tLRPC$VideoSize = null;
                    } else {
                        tLRPC$VideoSize2 = FileLoader.getClosestVideoSizeWithSize(messageObject.messageOwner.action.photo.video_sizes, 1000);
                        tLRPC$VideoSize = FileLoader.getEmojiMarkup(messageObject.messageOwner.action.photo.video_sizes);
                    }
                    if (chatActionCell.getMessageObject().type != 21 || messageObject.isOutOwner()) {
                        if (tLRPC$VideoSize2 != null) {
                            PhotoViewer.getInstance().openPhoto(tLRPC$VideoSize2.location, ImageLocation.getForPhoto(tLRPC$VideoSize2, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                            if (chatActionCell.getMessageObject().type == 21) {
                                PhotoViewer.getInstance().setTitle(LocaleController.getString("SuggestedVideo", C3632R.string.SuggestedVideo));
                            }
                        } else if (closestPhotoSizeWithSize != null) {
                            PhotoViewer.getInstance().openPhoto(closestPhotoSizeWithSize.location, ImageLocation.getForPhoto(closestPhotoSizeWithSize, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                            if (chatActionCell.getMessageObject().type == 21) {
                                PhotoViewer.getInstance().setTitle(LocaleController.getString("SuggestedPhoto", C3632R.string.SuggestedPhoto));
                            }
                        } else {
                            PhotoViewer.getInstance().openPhoto(messageObject, (ChatActivity) null, 0L, 0L, 0L, ChatActivity.this.photoViewerProvider);
                        }
                    } else if (messageObject.settingAvatar) {
                    } else {
                        if (tLRPC$VideoSize != null) {
                            PhotoUtilities.showAvatartConstructorForUpdateUserPhoto(ChatActivity.this, tLRPC$VideoSize);
                            return;
                        }
                        ArrayList<Object> arrayList2 = new ArrayList<>();
                        ImageLocation.getForPhoto(tLRPC$VideoSize2, messageObject.messageOwner.action.photo);
                        FileLoader fileLoader = ChatActivity.this.getFileLoader();
                        File pathToAttach = tLRPC$VideoSize2 == null ? fileLoader.getPathToAttach(messageObject.messageOwner.action.photo) : fileLoader.getPathToAttach(tLRPC$VideoSize2);
                        File file = new File(FileLoader.getDirectory(4), pathToAttach.getName());
                        if (!pathToAttach.exists()) {
                            if (!file.exists()) {
                                return;
                            }
                            pathToAttach = file;
                        }
                        MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, pathToAttach.getAbsolutePath(), 0, false, 0, 0, 0L);
                        photoEntry.caption = ChatActivity.this.chatActivityEnterView.getFieldText();
                        photoEntry.isVideo = tLRPC$VideoSize2 != null;
                        arrayList2.add(photoEntry);
                        PhotoViewer.getInstance().openPhotoForSelect(arrayList2, 0, 1, false, new C43032(messageObject, photoEntry), null);
                        if (photoEntry.isVideo) {
                            PhotoViewer.getInstance().setTitle(LocaleController.getString(C3632R.string.SuggestedVideo));
                        } else {
                            PhotoViewer.getInstance().setTitle(LocaleController.getString(C3632R.string.SuggestedPhoto));
                        }
                        ImageUpdater.AvatarFor avatarFor = new ImageUpdater.AvatarFor(ChatActivity.this.getUserConfig().getCurrentUser(), 1);
                        avatarFor.isVideo = tLRPC$VideoSize2 != null;
                        avatarFor.fromObject = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.dialog_id));
                        PhotoViewer.getInstance().setAvatarFor(avatarFor);
                    }
                }
            }

            /* JADX INFO: Access modifiers changed from: package-private */
            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2 */
            /* loaded from: classes5.dex */
            public class C43032 extends PhotoViewer.EmptyPhotoViewerProvider {
                final /* synthetic */ MediaController.PhotoEntry val$entry;
                final /* synthetic */ MessageObject val$message;

                C43032(MessageObject messageObject, MediaController.PhotoEntry photoEntry) {
                    this.val$message = messageObject;
                    this.val$entry = photoEntry;
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                    return ChatActivity.this.photoViewerProvider.getPlaceForPhoto(this.val$message, tLRPC$FileLocation, i, z);
                }

                @Override // org.telegram.p043ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.p043ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2, String str, boolean z3) {
                    final MessageObject messageObject = this.val$message;
                    messageObject.settingAvatar = true;
                    MediaController.PhotoEntry photoEntry = this.val$entry;
                    if (photoEntry.imagePath != null || photoEntry.isVideo) {
                        PhotoUtilities.setImageAsAvatar(photoEntry, ChatActivity.this, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda0
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessageObject.this.settingAvatar = false;
                            }
                        });
                        return;
                    }
                    TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
                    TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                    tLRPC$TL_photos_updateProfilePhoto.f1732id = tLRPC$TL_inputPhoto;
                    TLRPC$Photo tLRPC$Photo = this.val$message.messageOwner.action.photo;
                    tLRPC$TL_inputPhoto.f1624id = tLRPC$Photo.f1632id;
                    tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
                    tLRPC$TL_inputPhoto.file_reference = tLRPC$Photo.file_reference;
                    ConnectionsManager connectionsManager = ChatActivity.this.getConnectionsManager();
                    final MessageObject messageObject2 = this.val$message;
                    connectionsManager.sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda3
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            ChatActivity.ChatActivityAdapter.C43012.C43032.this.lambda$sendButtonPressed$3(messageObject2, tLObject, tLRPC$TL_error);
                        }
                    });
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$3(final MessageObject messageObject, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatActivityAdapter.C43012.C43032.this.lambda$sendButtonPressed$2(tLObject, messageObject);
                        }
                    });
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$2(TLObject tLObject, MessageObject messageObject) {
                    if (tLObject instanceof TLRPC$TL_photos_photo) {
                        TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                        ChatActivity.this.getMessagesController().putUsers(tLRPC$TL_photos_photo.users, false);
                        TLRPC$User user = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.getUserConfig().clientUserId));
                        if ((tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) && user != null) {
                            PhotoUtilities.applyPhotoToUser(messageObject.messageOwner.action.photo, user, false);
                            ChatActivity.this.getUserConfig().setCurrentUser(user);
                            ChatActivity.this.getUserConfig().saveConfig(true);
                            BulletinFactory.m65of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user), AndroidUtilities.replaceTags(LocaleController.getString("ApplyAvatarHintTitle", C3632R.string.ApplyAvatarHintTitle)), AndroidUtilities.replaceSingleTag(LocaleController.getString("ApplyAvatarHint", C3632R.string.ApplyAvatarHint), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$2$$ExternalSyntheticLambda1
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatActivityAdapter.C43012.C43032.this.lambda$sendButtonPressed$1();
                                }
                            }), null).show();
                        }
                    }
                    messageObject.settingAvatar = false;
                }

                /* JADX INFO: Access modifiers changed from: private */
                public /* synthetic */ void lambda$sendButtonPressed$1() {
                    Bundle bundle = new Bundle();
                    bundle.putLong("user_id", UserConfig.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clientUserId);
                    ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                }
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public BaseFragment getBaseFragment() {
                return ChatActivity.this;
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public long getTopicId() {
                return ChatActivity.this.getTopicId();
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public boolean didLongPress(ChatActionCell chatActionCell, float f, float f2) {
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    return false;
                }
                return ChatActivity.this.createMenu(chatActionCell, false, false, f, f2);
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void needOpenUserProfile(long j) {
                ChatActivity.this.openUserProfile(j);
            }

            @Override // org.telegram.p043ui.Cells.ChatActionCell.ChatActionCellDelegate
            public void didPressReplyMessage(ChatActionCell chatActionCell, int i) {
                MessageObject messageObject = chatActionCell.getMessageObject();
                ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateViewHolder$1(String str) {
            if (str.startsWith("@")) {
                ChatActivity.this.getMessagesController().openByUserName(str.substring(1), ChatActivity.this, 0);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                DialogsActivity dialogsActivity = new DialogsActivity(null);
                dialogsActivity.setSearchString(str);
                ChatActivity.this.presentFragment(dialogsActivity);
            } else if (!str.startsWith("/")) {
                ChatActivity.this.processExternalUrl(0, str, null, null, false);
            } else {
                ChatActivity.this.chatActivityEnterView.setCommand(null, str, false, false);
                if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                    ChatActivity.this.hideFieldPanel(false);
                }
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:158:0x02a2, code lost:
            if (r19.this$0.currentChat.megagroup != false) goto L117;
         */
        /* JADX WARN: Code restructure failed: missing block: B:170:0x02cf, code lost:
            if (r4.getSenderId() == r3.getSenderId()) goto L129;
         */
        /* JADX WARN: Code restructure failed: missing block: B:171:0x02d1, code lost:
            r10 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:188:0x0323, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r4) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L129;
         */
        /* JADX WARN: Code restructure failed: missing block: B:236:0x03d4, code lost:
            if (r5 != (r4.replyToForumTopic == null ? org.telegram.messenger.MessageObject.getTopicId(((org.telegram.p043ui.ActionBar.BaseFragment) r19.this$0).currentAccount, r4.messageOwner, r11) : r12.f1658id)) goto L189;
         */
        /* JADX WARN: Code restructure failed: missing block: B:249:0x0404, code lost:
            if (r4.getSenderId() == r3.getSenderId()) goto L204;
         */
        /* JADX WARN: Code restructure failed: missing block: B:250:0x0406, code lost:
            r15 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:267:0x0458, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r4) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L204;
         */
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Removed duplicated region for block: B:102:0x0195  */
        /* JADX WARN: Removed duplicated region for block: B:103:0x0197  */
        /* JADX WARN: Removed duplicated region for block: B:106:0x019c  */
        /* JADX WARN: Removed duplicated region for block: B:129:0x0226  */
        /* JADX WARN: Removed duplicated region for block: B:133:0x0243  */
        /* JADX WARN: Removed duplicated region for block: B:142:0x0270  */
        /* JADX WARN: Removed duplicated region for block: B:193:0x032d  */
        /* JADX WARN: Removed duplicated region for block: B:272:0x0466  */
        /* JADX WARN: Removed duplicated region for block: B:281:0x0486  */
        /* JADX WARN: Removed duplicated region for block: B:283:0x0489  */
        /* JADX WARN: Removed duplicated region for block: B:287:0x0492  */
        /* JADX WARN: Removed duplicated region for block: B:293:0x04b0  */
        /* JADX WARN: Removed duplicated region for block: B:295:0x04b5  */
        /* JADX WARN: Removed duplicated region for block: B:298:0x04c9  */
        /* JADX WARN: Removed duplicated region for block: B:299:0x04cb  */
        /* JADX WARN: Removed duplicated region for block: B:302:0x04d8  */
        /* JADX WARN: Removed duplicated region for block: B:308:0x04ee  */
        /* JADX WARN: Removed duplicated region for block: B:313:0x0500  */
        /* JADX WARN: Removed duplicated region for block: B:316:0x050e  */
        /* JADX WARN: Removed duplicated region for block: B:339:0x0592  */
        /* JADX WARN: Removed duplicated region for block: B:343:0x05b7  */
        /* JADX WARN: Removed duplicated region for block: B:346:0x05ca  */
        /* JADX WARN: Removed duplicated region for block: B:397:? A[RETURN, SYNTHETIC] */
        /* JADX WARN: Removed duplicated region for block: B:85:0x012f  */
        /* JADX WARN: Removed duplicated region for block: B:96:0x0176  */
        /* JADX WARN: Type inference failed for: r4v36 */
        /* JADX WARN: Type inference failed for: r4v37, types: [int] */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder r20, int r21) {
            /*
                Method dump skipped, instructions count: 1727
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityAdapter.onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder, int):void");
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$3 */
        /* loaded from: classes5.dex */
        class ViewTreeObserver$OnPreDrawListenerC43043 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            ViewTreeObserver$OnPreDrawListenerC43043(ChatMessageCell chatMessageCell) {
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                if (pipRoundVideoView != null) {
                    pipRoundVideoView.showTemporary(true);
                }
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                ImageReceiver photoImage = this.val$messageCell.getPhotoImage();
                float imageWidth = photoImage.getImageWidth();
                org.telegram.p043ui.Components.Rect cameraRect = ChatActivity.this.instantCameraView.getCameraRect();
                float f = imageWidth / cameraRect.width;
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.val$messageCell.setTimeAlpha(BitmapDescriptorFactory.HUE_RED);
                this.val$messageCell.getLocationOnScreen(r5);
                int[] iArr = {(int) (iArr[0] + (photoImage.getImageX() - this.val$messageCell.getAnimationOffsetX())), (int) (iArr[1] + (photoImage.getImageY() - this.val$messageCell.getTranslationY()))};
                final InstantCameraView.InstantViewCameraContainer cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                cameraContainer.setPivotX(BitmapDescriptorFactory.HUE_RED);
                cameraContainer.setPivotY(BitmapDescriptorFactory.HUE_RED);
                AnimatorSet animatorSet = new AnimatorSet();
                cameraContainer.setImageReceiver(photoImage);
                ChatActivity.this.instantCameraView.cancelBlur();
                AnimatorSet animatorSet2 = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, f), ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, f), ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_Y, iArr[1] - cameraRect.f1943y), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, BitmapDescriptorFactory.HUE_RED));
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_X, iArr[0] - cameraRect.f1942x);
                ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                animatorSet2.playTogether(ofFloat, animatorSet);
                animatorSet2.setDuration(300L);
                if (ChatActivity.this.instantCameraView != null) {
                    ChatActivity.this.instantCameraView.setIsMessageTransition(true);
                }
                animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ViewTreeObserver$OnPreDrawListenerC43043.this.val$messageCell.setAlpha(1.0f);
                        ViewTreeObserver$OnPreDrawListenerC43043.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                        AnimationProperties.FloatProperty<ChatMessageCell> floatProperty = new AnimationProperties.FloatProperty<ChatMessageCell>(this, "alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.1
                            @Override // org.telegram.p043ui.Components.AnimationProperties.FloatProperty
                            public void setValue(ChatMessageCell chatMessageCell, float f2) {
                                chatMessageCell.setTimeAlpha(f2);
                            }

                            @Override // android.util.Property
                            public Float get(ChatMessageCell chatMessageCell) {
                                return Float.valueOf(chatMessageCell.getTimeAlpha());
                            }
                        };
                        AnimatorSet animatorSet3 = new AnimatorSet();
                        animatorSet3.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.ALPHA, BitmapDescriptorFactory.HUE_RED), ObjectAnimator.ofFloat(ViewTreeObserver$OnPreDrawListenerC43043.this.val$messageCell, floatProperty, 1.0f));
                        animatorSet3.setDuration(100L);
                        animatorSet3.setInterpolator(new DecelerateInterpolator());
                        animatorSet3.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator2) {
                                if (ChatActivity.this.instantCameraView != null) {
                                    ChatActivity.this.instantCameraView.setIsMessageTransition(false);
                                    ChatActivity.this.instantCameraView.hideCamera(true);
                                    ChatActivity.this.instantCameraView.setVisibility(4);
                                }
                            }
                        });
                        animatorSet3.start();
                    }
                });
                animatorSet2.start();
                return true;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            ArrayList<MessageObject> arrayList;
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 3;
            }
            int i2 = this.messagesStartRow;
            if (i < i2 || i >= this.messagesEndRow) {
                return i == this.botInfoRow ? 3 : 4;
            }
            if (this.isFrozen) {
                arrayList = this.frozenMessages;
            } else if (this.isFiltered) {
                arrayList = this.filteredMessages;
            } else {
                arrayList = ChatActivity.this.messages;
            }
            return arrayList.get(i - i2).contentType;
        }

        /* JADX WARN: Removed duplicated region for block: B:91:0x01c6  */
        /* JADX WARN: Removed duplicated region for block: B:97:0x01d9  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void onViewAttachedToWindow(androidx.recyclerview.widget.RecyclerView.ViewHolder r12) {
            /*
                Method dump skipped, instructions count: 678
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityAdapter.onViewAttachedToWindow(androidx.recyclerview.widget.RecyclerView$ViewHolder):void");
        }

        public void updateRowAtPosition(int i) {
            int i2;
            if (ChatActivity.this.chatLayoutManager == null || this.isFrozen || this.isFiltered) {
                return;
            }
            int i3 = 0;
            if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                int i4 = 0;
                while (true) {
                    if (i4 >= childCount) {
                        break;
                    }
                    View childAt = ChatActivity.this.chatListView.getChildAt(i4);
                    if ((childAt instanceof ChatMessageCell) && ((ChatMessageCell) childAt).getMessageObject() == ChatActivity.this.unreadMessageObject) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.messages.indexOf(chatActivity.unreadMessageObject) >= 0) {
                            int i5 = this.messagesStartRow;
                            ChatActivity chatActivity2 = ChatActivity.this;
                            i2 = i5 + chatActivity2.messages.indexOf(chatActivity2.unreadMessageObject);
                            i3 = ChatActivity.this.getScrollingOffsetForView(childAt);
                        }
                    } else {
                        i4++;
                    }
                }
            }
            i2 = -1;
            notifyItemChanged(i);
            if (i2 != -1) {
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i2, i3);
            }
        }

        public void invalidateRowWithMessageObject(MessageObject messageObject) {
            int childCount = ChatActivity.this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getMessageObject() == messageObject) {
                        chatMessageCell.invalidate();
                        return;
                    }
                }
            }
        }

        public View updateRowWithMessageObject(MessageObject messageObject, boolean z, boolean z2) {
            ArrayList<MessageObject> arrayList;
            if (z) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.getMessageObject() == messageObject && !chatMessageCell.isAdminLayoutChanged()) {
                            chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            return chatMessageCell;
                        }
                    }
                }
            }
            if (this.isFrozen) {
                arrayList = this.frozenMessages;
            } else if (this.isFiltered) {
                arrayList = this.filteredMessages;
            } else {
                arrayList = ChatActivity.this.messages;
            }
            int indexOf = arrayList.indexOf(messageObject);
            if (indexOf == -1) {
                return null;
            }
            if (z2) {
                messageObject.stableId = ChatActivity.access$51908();
                notifyDataSetChanged(true);
            } else {
                updateRowAtPosition(indexOf + this.messagesStartRow);
            }
            return null;
        }

        /* JADX WARN: Can't wrap try/catch for region: R(13:1|(1:3)|(2:5|(10:7|(1:9)|10|11|12|13|(2:14|(2:16|(1:18)(3:19|20|(2:22|(1:26)(0))(0)))(1:39))|38|27|(1:37)(2:33|34)))|43|10|11|12|13|(3:14|(0)(0)|18)|38|27|(2:29|31)|37) */
        /* JADX WARN: Code restructure failed: missing block: B:15:0x0055, code lost:
            r6 = move-exception;
         */
        /* JADX WARN: Code restructure failed: missing block: B:16:0x0056, code lost:
            org.telegram.messenger.FileLog.m102e(r6);
         */
        /* JADX WARN: Removed duplicated region for block: B:20:0x0066  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x0087 A[EDGE_INSN: B:43:0x0087->B:30:0x0087 ?: BREAK  , SYNTHETIC] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void notifyDataSetChanged(boolean r6) {
            /*
                r5 = this;
                boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
                if (r0 == 0) goto L1c
                java.lang.StringBuilder r0 = new java.lang.StringBuilder
                r0.<init>()
                java.lang.String r1 = "notify data set changed fragmentOpened="
                r0.append(r1)
                org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                boolean r1 = r1.fragmentOpened
                r0.append(r1)
                java.lang.String r0 = r0.toString()
                org.telegram.messenger.FileLog.m105d(r0)
            L1c:
                if (r6 == 0) goto L44
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                boolean r0 = r6.fragmentOpened
                if (r0 == 0) goto L44
                org.telegram.ui.Components.RecyclerListView r6 = org.telegram.p043ui.ChatActivity.access$3700(r6)
                androidx.recyclerview.widget.RecyclerView$ItemAnimator r6 = r6.getItemAnimator()
                org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                androidx.recyclerview.widget.ChatListItemAnimator r0 = org.telegram.p043ui.ChatActivity.access$5000(r0)
                if (r6 == r0) goto L4e
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                org.telegram.ui.Components.RecyclerListView r6 = org.telegram.p043ui.ChatActivity.access$3700(r6)
                org.telegram.ui.ChatActivity r0 = org.telegram.p043ui.ChatActivity.this
                androidx.recyclerview.widget.ChatListItemAnimator r0 = org.telegram.p043ui.ChatActivity.access$5000(r0)
                r6.setItemAnimator(r0)
                goto L4e
            L44:
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                org.telegram.ui.Components.RecyclerListView r6 = org.telegram.p043ui.ChatActivity.access$3700(r6)
                r0 = 0
                r6.setItemAnimator(r0)
            L4e:
                r5.updateRowsInternal()
                super.notifyDataSetChanged()     // Catch: java.lang.Exception -> L55
                goto L59
            L55:
                r6 = move-exception
                org.telegram.messenger.FileLog.m102e(r6)
            L59:
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                java.util.ArrayList<org.telegram.messenger.MessageObject> r6 = r6.messages
                int r6 = r6.size()
                r0 = 1
                int r6 = r6 - r0
            L63:
                r1 = 0
                if (r6 < 0) goto L87
                org.telegram.ui.ChatActivity r2 = org.telegram.p043ui.ChatActivity.this
                java.util.ArrayList<org.telegram.messenger.MessageObject> r2 = r2.messages
                java.lang.Object r2 = r2.get(r6)
                org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
                boolean r3 = r2.isDateObject
                if (r3 == 0) goto L77
                int r6 = r6 + (-1)
                goto L63
            L77:
                org.telegram.tgnet.TLRPC$Message r6 = r2.messageOwner
                if (r6 == 0) goto L87
                org.telegram.tgnet.TLRPC$MessageAction r6 = r6.action
                boolean r2 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate
                if (r2 != 0) goto L85
                boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
                if (r6 == 0) goto L87
            L85:
                r6 = r0
                goto L88
            L87:
                r6 = r1
            L88:
                org.telegram.ui.ChatActivity r2 = org.telegram.p043ui.ChatActivity.this
                boolean[] r2 = org.telegram.p043ui.ChatActivity.access$48400(r2)
                boolean r1 = r2[r1]
                if (r1 == 0) goto La8
                org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                long r1 = org.telegram.p043ui.ChatActivity.access$16400(r1)
                r3 = 0
                int r1 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
                if (r1 == 0) goto Laa
                org.telegram.ui.ChatActivity r1 = org.telegram.p043ui.ChatActivity.this
                boolean[] r1 = org.telegram.p043ui.ChatActivity.access$48400(r1)
                boolean r0 = r1[r0]
                if (r0 != 0) goto Laa
            La8:
                if (r6 == 0) goto Lb3
            Laa:
                org.telegram.ui.ChatActivity r6 = org.telegram.p043ui.ChatActivity.this
                boolean r0 = org.telegram.p043ui.ChatActivity.access$52000(r6)
                org.telegram.p043ui.ChatActivity.access$18000(r6, r0)
            Lb3:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatActivityAdapter.notifyDataSetChanged(boolean):void");
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyDataSetChanged() {
            notifyDataSetChanged(false);
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemChanged(int i) {
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemChanged(i);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeChanged(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item range changed " + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeChanged(i, i2);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemInserted(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item inserted " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemInserted(i);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemMoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item moved" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemMoved(i, i2);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeInserted(int i, int i2) {
            int i3;
            int i4;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item range inserted" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            if (i == 1 && i2 > 0 && (i3 = i + i2) >= (i4 = this.messagesStartRow) && i3 < this.messagesEndRow) {
                MessageObject messageObject = ChatActivity.this.messages.get(i3 - i4);
                MessageObject messageObject2 = ChatActivity.this.messages.get((i3 - this.messagesStartRow) - 1);
                if ((ChatActivity.this.currentChat != null && messageObject.getFromChatId() == messageObject2.getFromChatId()) || (ChatActivity.this.currentUser != null && messageObject.isOutOwner() == messageObject2.isOutOwner())) {
                    notifyItemChanged(i);
                }
            }
            try {
                super.notifyItemRangeInserted(i, i2);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRemoved(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item removed " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRemoved(i);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        public void notifyItemRemoved(int i, boolean z) {
            if (BuildVars.LOGS_ENABLED) {
                StringBuilder sb = new StringBuilder();
                sb.append("notify item removed ");
                sb.append(i);
                sb.append(z ? " with thanos effect" : "");
                FileLog.m105d(sb.toString());
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            if (z && ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListView.getItemAnimator() == ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListItemAnimator.prepareThanos(ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i));
            }
            updateRowsInternal();
            try {
                super.notifyItemRemoved(i);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeRemoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m105d("notify item range removed" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeRemoved(i, i2);
            } catch (Exception e) {
                FileLog.m102e(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showActionBarSearchTags(final boolean z) {
        if (this.actionBarSearchTags == null) {
            return;
        }
        ValueAnimator valueAnimator = this.actionBarTagsAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        this.actionBarSearchTags.setVisibility(0);
        float[] fArr = new float[2];
        fArr[0] = this.actionBarTagsT;
        fArr[1] = z ? 1.0f : BitmapDescriptorFactory.HUE_RED;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(fArr);
        this.actionBarTagsAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda9
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$showActionBarSearchTags$348(valueAnimator2);
            }
        });
        this.actionBarTagsAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        this.actionBarTagsAnimator.setDuration(320L);
        this.actionBarTagsAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.141
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatActivity.this.actionBarTagsT = z ? 1.0f : BitmapDescriptorFactory.HUE_RED;
                ChatActivity chatActivity = ChatActivity.this;
                SearchTagsList searchTagsList = chatActivity.actionBarSearchTags;
                if (searchTagsList != null) {
                    searchTagsList.setBackgroundColor(((BaseFragment) chatActivity).actionBar.getBackgroundColor());
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.actionBarSearchTags.setShown(chatActivity2.actionBarTagsT);
                    if (!z) {
                        ChatActivity.this.actionBarSearchTags.setVisibility(8);
                    }
                }
                ChatActivity.this.invalidateChatListViewTopPadding = true;
                ChatActivity.this.updateChatListViewTopPadding();
            }
        });
        this.actionBarTagsAnimator.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showActionBarSearchTags$348(ValueAnimator valueAnimator) {
        this.actionBarTagsT = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        SearchTagsList searchTagsList = this.actionBarSearchTags;
        if (searchTagsList != null) {
            searchTagsList.setBackgroundColor(this.actionBar.getBackgroundColor());
            this.actionBarSearchTags.setShown(this.actionBarTagsT);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$SearchItemListener */
    /* loaded from: classes5.dex */
    public class SearchItemListener extends ActionBarMenuItem.ActionBarMenuItemSearchListener {
        private float searchAnimationProgress;
        private boolean whiteActionBar;

        private SearchItemListener() {
        }

        /* synthetic */ SearchItemListener(ChatActivity chatActivity, C41961 c41961) {
            this();
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canCollapseSearch() {
            if (ChatActivity.this.messagesSearchListView.getTag() != null) {
                ChatActivity.this.showMessagesSearchListView(false);
                return false;
            }
            return true;
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchFilterCleared(FiltersView.MediaFilterData mediaFilterData) {
            super.onSearchFilterCleared(mediaFilterData);
            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.clear();
            }
            ChatActivity.this.searchingReaction = null;
            ChatActivity.this.showSearchShowOther(false);
            ChatActivity.this.setFilterMessages(false);
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchCollapse() {
            TLRPC$Chat tLRPC$Chat;
            if (ChatActivity.this.searchCalendarButton != null) {
                ChatActivity.this.searchCalendarButton.setVisibility(0);
            }
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
            }
            ChatActivity.this.mentionContainer.setReversed(false);
            ChatActivity.this.mentionContainer.getAdapter().setSearchingMentions(false);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", C3632R.string.Search));
            ChatActivity.this.searchItem.setSearchFieldCaption(null);
            AndroidUtilities.updateViewVisibilityAnimated(ChatActivity.this.avatarContainer, true, 0.95f, true);
            if (ChatActivity.this.editTextItem != null && ChatActivity.this.editTextItem.getTag() != null) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(0);
                    ChatActivity.this.checkEditTextItemMenu();
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            } else if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer()) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && !ChatObject.canSendPlain(tLRPC$Chat))) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            } else {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            }
            if (ChatActivity.this.chatMode == 3 || ((ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser)) || (ChatActivity.this.threadMessageObject != null && ChatActivity.this.threadMessageObject.getRepliesCount() < 10))) {
                ChatActivity.this.searchItem.setVisibility(8);
            }
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.lambda$didReceivedNotification$183();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
            this.whiteActionBar = ChatActivity.this.getDialogId() == ChatActivity.this.getUserConfig().getClientUserId();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchAnimationProgress, BitmapDescriptorFactory.HUE_RED);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda0
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.SearchItemListener.this.lambda$onSearchCollapse$0(valueAnimator);
                }
            });
            ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            ofFloat.setDuration(320L);
            ofFloat.start();
            ChatActivity.this.searchingReaction = null;
            ChatActivity.this.showSearchShowOther(false);
            SearchTagsList searchTagsList = ChatActivity.this.actionBarSearchTags;
            if (searchTagsList != null) {
                searchTagsList.clear();
            }
            ChatActivity.this.showActionBarSearchTags(false);
            ChatActivity.this.setFilterMessages(false);
            ChatActivity.this.lockMultiPanel(false);
            ChatActivity.this.updateAlbumsItem();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchCollapse$0(ValueAnimator valueAnimator) {
            setSearchAnimationProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchExpand() {
            if (ChatActivity.this.threadMessageId != 0 || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                ChatActivity.this.openSearchWithText(null);
            }
            if (ChatActivity.this.openSearchKeyboard) {
                ChatActivity.this.saveKeyboardPositionBeforeTransition();
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.SearchItemListener.this.lambda$onSearchExpand$1();
                    }
                }, 500L);
                ChatActivity.this.hideSendButtonHints();
                this.whiteActionBar = ChatActivity.this.getDialogId() == ChatActivity.this.getUserConfig().getClientUserId();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchAnimationProgress, 1.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.SearchItemListener.this.lambda$onSearchExpand$2(valueAnimator);
                    }
                });
                ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ofFloat.setDuration(320L);
                ofFloat.start();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchExpand$1() {
            ChatActivity.this.searchItem.getSearchField().requestFocus();
            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            ChatActivity.this.removeKeyboardPositionBeforeTransition();
            ChatActivity.this.lockMultiPanel(true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchExpand$2(ValueAnimator valueAnimator) {
            setSearchAnimationProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        public void setSearchAnimationProgress(float f) {
            this.searchAnimationProgress = f;
            if (this.whiteActionBar) {
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultIcon);
                C3704ActionBar c3704ActionBar = ((BaseFragment) ChatActivity.this).actionBar;
                ChatActivity chatActivity = ChatActivity.this;
                int i = Theme.key_actionBarActionModeDefaultIcon;
                c3704ActionBar.setItemsColor(ColorUtils.blendARGB(themedColor, chatActivity.getThemedColor(i), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setItemsColor(ColorUtils.blendARGB(ChatActivity.this.getThemedColor(i), ChatActivity.this.getThemedColor(i), this.searchAnimationProgress), true);
                ((BaseFragment) ChatActivity.this).actionBar.setItemsBackgroundColor(ColorUtils.blendARGB(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSelector), ChatActivity.this.getThemedColor(Theme.key_actionBarActionModeDefaultSelector), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setBackgroundColor(ColorUtils.blendARGB(ChatActivity.this.getThemedColor(Theme.key_actionBarDefault), ChatActivity.this.getThemedColor(Theme.key_actionBarActionModeDefault), this.searchAnimationProgress));
                C3704ActionBar c3704ActionBar2 = ((BaseFragment) ChatActivity.this).actionBar;
                int i2 = Theme.key_actionBarDefaultSearch;
                c3704ActionBar2.setSearchTextColor(ColorUtils.blendARGB(Theme.getColor(i2), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlackText), this.searchAnimationProgress), false);
                ((BaseFragment) ChatActivity.this).actionBar.setSearchTextColor(ColorUtils.blendARGB(Theme.getColor(Theme.key_actionBarDefaultSearchPlaceholder), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteGrayText), this.searchAnimationProgress), true);
                ((BaseFragment) ChatActivity.this).actionBar.setSearchCursorColor(ColorUtils.blendARGB(Theme.getColor(i2), ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueText), this.searchAnimationProgress));
                ChatActivity chatActivity2 = ChatActivity.this;
                AndroidUtilities.setLightStatusBar(chatActivity2.fragmentView, chatActivity2.isLightStatusBar());
            }
            View view = ChatActivity.this.fragmentView;
            if (view != null) {
                view.invalidate();
            }
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchPressed(EditText editText) {
            ChatActivity.this.updateSearchButtons(0, 0, -1);
            ChatActivity.this.getMediaDataController().searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ((BaseFragment) ChatActivity.this).classGuid, 0, ChatActivity.this.threadMessageId, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages, ChatActivity.this.searchingReaction);
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onTextChanged(EditText editText) {
            ChatActivity.this.showMessagesSearchListView(false);
            ChatActivity.this.createSearchContainer();
            if (!ChatActivity.this.searchingForUser) {
                if (ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchingChatMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", C3632R.string.SearchFrom))) {
                    ChatActivity.this.searchUserButton.callOnClick();
                    return;
                }
                return;
            }
            MentionsAdapter adapter = ChatActivity.this.mentionContainer.getAdapter();
            adapter.lambda$searchUsernameOrHashtag$7("@" + editText.getText().toString(), 0, ChatActivity.this.messages, true, true);
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onCaptionCleared() {
            ChatActivity.this.createSearchContainer();
            if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null) {
                ChatActivity.this.searchUserButton.callOnClick();
                return;
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().lambda$searchUsernameOrHashtag$7(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
                ChatActivity.this.searchItem.setSearchFieldText("", true);
            }
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", C3632R.string.Search));
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            ChatActivity.this.searchUserButton.setVisibility(0);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
        }

        @Override // org.telegram.p043ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean forceShowClear() {
            return ChatActivity.this.searchingForUser;
        }
    }

    private SearchItemListener getSearchItemListener() {
        if (this.searchItemListener == null) {
            this.searchItemListener = new SearchItemListener(this, null);
        }
        return this.searchItemListener;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate */
    /* loaded from: classes5.dex */
    public class ChatMessageCellDelegate implements ChatMessageCell.ChatMessageCellDelegate {
        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canDrawOutboundsContent() {
            return false;
        }

        private ChatMessageCellDelegate() {
        }

        /* synthetic */ ChatMessageCellDelegate(ChatActivity chatActivity, C41961 c41961) {
            this();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean needDrawTranslateButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (ChatActivity.this.reportType >= 0 || messageObject == null || messageObject.translated || TextUtils.isEmpty(ChatActivity.this.getMessageCaptionSafe(messageObject, chatMessageCell.getCurrentMessagesGroup()))) {
                return false;
            }
            return SharedConfig.isMessageQuickTranslateEnabled || ChatActivity.this.dialogTranslationSettings.isInTextTranslateEnabled();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isAllowForkTranscribe() {
            return (ChatActivity.this.isReport() || ChatActivity.this.isSecretChat()) ? false : true;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isInPreviewMode() {
            return ((BaseFragment) ChatActivity.this).inPreviewMode;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressAdditionalSideButton(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.isForwardingEditor()) {
                if (chatMessageCell.getCurrentMessagesGroup() == null || chatMessageCell.getCurrentMessagesGroup().isDocuments) {
                    ChatActivity.this.lambda$startMessageUnselect$162(chatMessageCell.getMessageObject());
                    return;
                }
                ChatActivity.this.editingGroupedMessages = chatMessageCell.getCurrentMessagesGroup();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.openAttachMenu(0, chatActivity.editingGroupedMessages);
                return;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.closeKeyboard();
            }
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.showDialog(chatActivity2.createTranslateIncomingDialog(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup()));
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressForkTranscribeButton(ChatMessageCell chatMessageCell) {
            ChatActivity.this.voiceToText(chatMessageCell.getMessageObject());
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void runWithActivationCheck(Callbacks$Callback callbacks$Callback) {
            WalletHelper.safeRunWithActivationCheck(ChatActivity.this, callbacks$Callback);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isReplyOrSelf() {
            return UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHint(ChatMessageCell chatMessageCell, int i) {
            if (i == 0) {
                ChatActivity.this.showPollSolution(chatMessageCell.getMessageObject(), ((TLRPC$TL_messageMediaPoll) chatMessageCell.getMessageObject().messageOwner.media).results);
            } else if (i == 1) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader == null || TextUtils.isEmpty(tLRPC$MessageFwdHeader.psa_type)) {
                    return;
                }
                String string = LocaleController.getString("PsaMessageInfo_" + messageObject.messageOwner.fwd_from.psa_type);
                if (TextUtils.isEmpty(string)) {
                    string = LocaleController.getString("PsaMessageInfoDefault", C3632R.string.PsaMessageInfoDefault);
                }
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                MessageObject.addLinks(false, spannableStringBuilder);
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentMessagesGroup != null) {
                    int size = currentMessagesGroup.posArray.size();
                    int i2 = 0;
                    while (true) {
                        if (i2 >= size) {
                            break;
                        } else if ((currentMessagesGroup.posArray.get(i2).flags & 1) != 0) {
                            MessageObject messageObject2 = currentMessagesGroup.messages.get(i2);
                            if (messageObject2 != messageObject) {
                                int childCount = ChatActivity.this.chatListView.getChildCount();
                                for (int i3 = 0; i3 < childCount; i3++) {
                                    View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                                    if (childAt instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                                        if (messageObject2.equals(chatMessageCell2.getMessageObject())) {
                                            chatMessageCell = chatMessageCell2;
                                        }
                                    }
                                }
                                messageObject = messageObject2;
                            }
                        } else {
                            i2++;
                        }
                    }
                }
                ChatActivity.this.showInfoHint(messageObject, spannableStringBuilder, 1);
            }
            chatMessageCell.showHintButton(false, true, i);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell) {
            MessageObject messageObject;
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                messageObject = currentMessagesGroup.messages.get(0);
            } else {
                messageObject = chatMessageCell.getMessageObject();
            }
            return messageObject != null && messageObject.getId() == ChatActivity.this.commentLoadingMessageId;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSideButton(ChatMessageCell chatMessageCell) {
            TLRPC$Message tLRPC$Message;
            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
            int i;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
            MessageObject.GroupedMessages groupedMessages;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.closeKeyboard();
            }
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (ChatActivity.this.chatMode == 2) {
                ChatActivity.this.chatActivityDelegate.openReplyMessage(messageObject.getId());
                ChatActivity.this.finishFragment();
            } else if (ChatActivity.this.chatMode == 3 || ((UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser)) && (tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from) != null && tLRPC$MessageFwdHeader.saved_from_peer != null)) {
                if (!UserObject.isReplyUser(ChatActivity.this.currentUser) || (tLRPC$MessageReplyHeader = (tLRPC$Message = messageObject.messageOwner).reply_to) == null || (i = tLRPC$MessageReplyHeader.reply_to_top_id) == 0) {
                    ChatActivity.this.openOriginalReplyChat(messageObject);
                } else {
                    ChatActivity.this.openDiscussionMessageChat(tLRPC$MessageReplyHeader.reply_to_peer_id.channel_id, null, i, 0L, -1, tLRPC$Message.fwd_from.saved_from_msg_id, messageObject);
                }
            } else {
                ArrayList<MessageObject> arrayList = null;
                if (messageObject.getGroupId() != 0 && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                    arrayList = groupedMessages.messages;
                }
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    arrayList.add(messageObject);
                }
                ArrayList<MessageObject> arrayList2 = arrayList;
                boolean z = ChatActivity.this.getMessagesController().storiesEnabled() && StoryEntry.canRepostMessage(messageObject);
                ChatActivity chatActivity = ChatActivity.this;
                Context context = ChatActivity.this.getContext();
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new DialogC43181(context, chatActivity2, arrayList2, null, null, ChatObject.isChannel(chatActivity2.currentChat), null, null, false, false, z, ChatActivity.this.themeDelegate, z, messageObject));
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ChatActivity.this.fragmentView.requestLayout();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$1 */
        /* loaded from: classes5.dex */
        public class DialogC43181 extends ShareAlert {
            final /* synthetic */ boolean val$includeStory;
            final /* synthetic */ MessageObject val$messageObject;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            DialogC43181(Context context, ChatActivity chatActivity, ArrayList arrayList, String str, String str2, boolean z, String str3, String str4, boolean z2, boolean z3, boolean z4, Theme.ResourcesProvider resourcesProvider, boolean z5, MessageObject messageObject) {
                super(context, chatActivity, arrayList, str, str2, z, str3, str4, z2, z3, z4, resourcesProvider);
                this.val$includeStory = z5;
                this.val$messageObject = messageObject;
                this.includeStoryFromMessage = z5;
            }

            @Override // org.telegram.p043ui.Components.ShareAlert, org.telegram.p043ui.ActionBar.BottomSheet
            public void dismissInternal() {
                super.dismissInternal();
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                    ChatActivity.this.fragmentView.requestLayout();
                }
            }

            @Override // org.telegram.p043ui.Components.ShareAlert
            protected void onShareStory(final View view) {
                StoryRecorder.SourceView fromShareCell = view instanceof ShareDialogCell ? StoryRecorder.SourceView.fromShareCell((ShareDialogCell) view) : null;
                ArrayList arrayList = new ArrayList();
                MessageObject.GroupedMessages groupedMessages = this.val$messageObject.getGroupId() != 0 ? (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(this.val$messageObject.getGroupId()) : null;
                if (groupedMessages != null) {
                    arrayList.addAll(groupedMessages.messages);
                } else {
                    arrayList.add(this.val$messageObject);
                }
                final StoryRecorder storyRecorder = StoryRecorder.getInstance(ChatActivity.this.getParentActivity(), this.currentAccount);
                storyRecorder.setOnPrepareCloseListener(new Utilities.Callback4() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$1$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.Utilities.Callback4
                    public final void run(Object obj, Object obj2, Object obj3, Object obj4) {
                        ChatActivity.ChatMessageCellDelegate.DialogC43181.this.lambda$onShareStory$1(storyRecorder, view, (Long) obj, (Runnable) obj2, (Boolean) obj3, (Long) obj4);
                    }
                });
                storyRecorder.openRepost(fromShareCell, StoryEntry.repostMessage(arrayList));
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onShareStory$1(StoryRecorder storyRecorder, View view, Long l, Runnable runnable, Boolean bool, final Long l2) {
                boolean booleanValue = bool.booleanValue();
                StoryRecorder.SourceView sourceView = null;
                if (booleanValue) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.DialogC43181.this.lambda$onShareStory$0(l2);
                        }
                    });
                    dismiss();
                    storyRecorder.replaceSourceView(null);
                } else {
                    if ((view instanceof ShareDialogCell) && view.isAttachedToWindow()) {
                        sourceView = StoryRecorder.SourceView.fromShareCell((ShareDialogCell) view);
                    }
                    storyRecorder.replaceSourceView(sourceView);
                }
                AndroidUtilities.runOnUIThread(runnable);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onShareStory$0(Long l) {
                String formatString;
                TLRPC$Chat chat;
                String str = (l.longValue() >= 0 || (chat = ChatActivity.this.getMessagesController().getChat(Long.valueOf(-l.longValue()))) == null) ? "" : chat.title;
                BulletinFactory m65of = BulletinFactory.m65of(ChatActivity.this);
                int i = C3632R.raw.contact_check;
                if (TextUtils.isEmpty(str)) {
                    formatString = LocaleController.getString(C3632R.string.RepostedToProfile);
                } else {
                    formatString = LocaleController.formatString(C3632R.string.RepostedToChannelProfile, str);
                }
                m65of.createSimpleBulletin(i, AndroidUtilities.replaceTags(formatString)).show();
            }

            @Override // org.telegram.p043ui.Components.ShareAlert
            protected void onSend(LongSparseArray<TLRPC$Dialog> longSparseArray, int i, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                if (longSparseArray.size() == 1) {
                    ChatActivity.this.undoView.showWithAction(longSparseArray.valueAt(0).f1608id, 53, Integer.valueOf(i), tLRPC$TL_forumTopic, (Runnable) null, (Runnable) null);
                } else {
                    ChatActivity.this.undoView.showWithAction(0L, 53, Integer.valueOf(i), Integer.valueOf(longSparseArray.size()), (Runnable) null, (Runnable) null);
                }
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean needPlayMessage(ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z) {
            if (messageObject.isVoiceOnce() || messageObject.isRoundOnce()) {
                if (ChatActivity.this.secretVoicePlayer == null || !ChatActivity.this.secretVoicePlayer.isShown()) {
                    try {
                        AudioManager audioManager = (AudioManager) ApplicationLoader.applicationContext.getSystemService("audio");
                        int streamVolume = audioManager.getStreamVolume(3);
                        if (streamVolume == 0) {
                            audioManager.adjustStreamVolume(3, streamVolume, 1);
                            if (!messageObject.isOutOwner()) {
                                BulletinFactory.m65of(ChatActivity.this).createImageBulletin(C3632R.C3634drawable.tooltip_sound, LocaleController.getString(C3632R.string.VoiceOnceTurnOnSound)).show(true);
                                return false;
                            }
                        }
                    } catch (Exception unused) {
                    }
                    ChatActivity.this.secretVoicePlayer = new SecretVoicePlayer(ChatActivity.this.getContext());
                    ChatActivity.this.secretVoicePlayer.setCell(chatMessageCell, !messageObject.isOutOwner() ? ChatActivity.this.sendSecretMessageRead(messageObject, true) : null, messageObject.isOutOwner() ? null : ChatActivity.this.sendSecretMediaDelete(messageObject));
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.showDialog(chatActivity.secretVoicePlayer);
                    return false;
                }
                return false;
            } else if (messageObject.isVoice() || messageObject.isRoundVideo()) {
                boolean playMessage = MediaController.getInstance().playMessage(messageObject, z);
                MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return playMessage;
            } else if (messageObject.isMusic()) {
                MediaController mediaController = MediaController.getInstance();
                ChatActivity chatActivity2 = ChatActivity.this;
                return mediaController.setPlaylist(chatActivity2.messages, messageObject, chatActivity2.mergeDialogId);
            } else {
                return false;
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void videoTimerReached() {
            ChatActivity.this.showNoSoundHint();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTime(ChatMessageCell chatMessageCell) {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(ChatActivity.this.dialog_id, 47, (Runnable) null);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            if (tLRPC$Chat == null) {
                return;
            }
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else {
                openChat(chatMessageCell, tLRPC$Chat, i);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHiddenForward(ChatMessageCell chatMessageCell) {
            if (!chatMessageCell.getMessageObject().isImportedForward()) {
                ChatActivity.this.showForwardHint(chatMessageCell);
            } else {
                didPressTime(chatMessageCell);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressOther(ChatMessageCell chatMessageCell, float f, float f2) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.type != 16) {
                ChatActivity.this.createMenu(chatMessageCell, true, false, f, f2, messageObject.isMusic());
                return;
            }
            TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
            if (tLRPC$User != null) {
                boolean isVideoCall = messageObject.isVideoCall();
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$UserFull tLRPC$UserFull = chatActivity.userInfo;
                VoIPHelper.startCall(tLRPC$User, isVideoCall, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.f1751id), ChatActivity.this.getAccountInstance());
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSponsoredClose() {
            ChatActivity.this.showDialog(new PremiumFeatureBottomSheet(ChatActivity.this, 3, true));
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUserStatus(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, TLRPC$Document tLRPC$Document) {
            ImageLocation forDocument;
            if (chatMessageCell == null) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            PremiumPreviewBottomSheet premiumPreviewBottomSheet = new PremiumPreviewBottomSheet(chatActivity, ((BaseFragment) chatActivity).currentAccount, tLRPC$User, ChatActivity.this.themeDelegate);
            chatMessageCell.getLocationOnScreen(new int[2]);
            premiumPreviewBottomSheet.startEnterFromX = chatMessageCell.getNameStatusX();
            premiumPreviewBottomSheet.startEnterFromY = chatMessageCell.getNameStatusY();
            premiumPreviewBottomSheet.startEnterFromScale = chatMessageCell.getScaleX();
            premiumPreviewBottomSheet.startEnterFromX1 = chatMessageCell.getLeft();
            premiumPreviewBottomSheet.startEnterFromY1 = chatMessageCell.getTop();
            premiumPreviewBottomSheet.startEnterFromView = chatMessageCell;
            int colorId = UserObject.getColorId(tLRPC$User);
            if (colorId >= 7) {
                MessagesController.PeerColors peerColors = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).peerColors;
                MessagesController.PeerColor color = peerColors != null ? peerColors.getColor(colorId) : null;
                premiumPreviewBottomSheet.accentColor = color != null ? Integer.valueOf(color.getColor1()) : null;
            } else {
                premiumPreviewBottomSheet.accentColor = Integer.valueOf(ChatActivity.this.getThemedColor(Theme.keys_avatar_nameInMessage[colorId]));
            }
            AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = chatMessageCell.currentNameStatusDrawable;
            if (swapAnimatedEmojiDrawable != null && (swapAnimatedEmojiDrawable.getDrawable() instanceof AnimatedEmojiDrawable)) {
                premiumPreviewBottomSheet.startEnterFromScale *= 0.95f;
                if (tLRPC$Document != null) {
                    BackupImageView backupImageView = new BackupImageView(ChatActivity.this.getContext());
                    String str = "160_160";
                    SvgHelper.SvgDrawable svgThumb = DocumentObject.getSvgThumb(tLRPC$Document.thumbs, Theme.key_windowBackgroundWhiteGrayIcon, 0.2f);
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 90);
                    if (MimeTypes.VIDEO_WEBM.equals(tLRPC$Document.mime_type)) {
                        forDocument = ImageLocation.getForDocument(tLRPC$Document);
                        str = "160_160_" + ImageLoader.AUTOPLAY_FILTER;
                        if (svgThumb != null) {
                            svgThumb.overrideWidthAndHeight(512, 512);
                        }
                    } else {
                        if (svgThumb != null && MessageObject.isAnimatedStickerDocument(tLRPC$Document, false)) {
                            svgThumb.overrideWidthAndHeight(512, 512);
                        }
                        forDocument = ImageLocation.getForDocument(tLRPC$Document);
                    }
                    String str2 = str;
                    backupImageView.setLayerNum(7);
                    backupImageView.setRoundRadius(AndroidUtilities.m107dp(4));
                    backupImageView.setImage(forDocument, str2, ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$Document), "140_140", svgThumb, tLRPC$Document);
                    if (MessageObject.isTextColorEmoji(tLRPC$Document)) {
                        Integer num = premiumPreviewBottomSheet.accentColor;
                        backupImageView.setColorFilter(new PorterDuffColorFilter(num != null ? num.intValue() : ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon), PorterDuff.Mode.SRC_IN));
                        premiumPreviewBottomSheet.statusStickerSet = MessageObject.getInputStickerSet(tLRPC$Document);
                    } else {
                        premiumPreviewBottomSheet.statusStickerSet = MessageObject.getInputStickerSet(tLRPC$Document);
                    }
                    premiumPreviewBottomSheet.overrideTitleIcon = backupImageView;
                    premiumPreviewBottomSheet.isEmojiStatus = true;
                }
            }
            ChatActivity.this.showDialog(premiumPreviewBottomSheet);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
            boolean z = true;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else if (chatMessageCell != null && chatMessageCell.getMessageObject() != null && chatMessageCell.getMessageObject().isSponsored()) {
                didPressInstantButton(chatMessageCell, 10);
            } else {
                if (!ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isThreadChat()) {
                    z = false;
                }
                openProfile(tLRPC$User, z);
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:152:0x0216 A[SYNTHETIC] */
        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean didLongPressUserAvatar(final org.telegram.p043ui.Cells.ChatMessageCell r19, final org.telegram.tgnet.TLRPC$User r20, final float r21, final float r22, boolean r23) {
            /*
                Method dump skipped, instructions count: 646
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatMessageCellDelegate.didLongPressUserAvatar(org.telegram.ui.Cells.ChatMessageCell, org.telegram.tgnet.TLRPC$User, float, float, boolean):boolean");
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$1(final TLRPC$User tLRPC$User, final ChatMessageCell chatMessageCell, final float f, final float f2, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda12
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressUserAvatar$0(tLObject, tLRPC$User, chatMessageCell, f, f2);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$0(TLObject tLObject, TLRPC$User tLRPC$User, ChatMessageCell chatMessageCell, float f, float f2) {
            if (ChatActivity.this.progressDialog != null) {
                ChatActivity.this.progressDialog.dismiss();
            }
            if (tLObject != null) {
                TLRPC$TL_chatChannelParticipant tLRPC$TL_chatChannelParticipant = new TLRPC$TL_chatChannelParticipant();
                tLRPC$TL_chatChannelParticipant.channelParticipant = ((TLRPC$TL_channels_channelParticipant) tLObject).participant;
                tLRPC$TL_chatChannelParticipant.user_id = tLRPC$User.f1751id;
                ChatActivity.this.chatInfo.participants.participants.add(0, tLRPC$TL_chatChannelParticipant);
            }
            didLongPressUserAvatar(chatMessageCell, tLRPC$User, f, f2, true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$2(int i, DialogInterface dialogInterface) {
            ChatActivity.this.getConnectionsManager().cancelRequest(i, true);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$4(int i, final TLRPC$User tLRPC$User, ChatMessageCell chatMessageCell, DialogInterface dialogInterface, int i2) {
            if (i2 == i - 1) {
                ChatActivity.this.presentFragment(new ExtendedAvatarPreviewerSettingsActivity());
                return;
            }
            ExtendedAvatarPreviewerItem extendedAvatarPreviewerItem = SharedConfig.selectedExtendedAvatarPreviewerItems.get(i2);
            if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.MENTION_BY_NAME) {
                appendMention(tLRPC$User, true);
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.COPY_ID) {
                AndroidUtilities.addToClipboard(String.valueOf(tLRPC$User.f1751id));
                ChatActivity.this.checkTopUndoView();
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.showWithAction(0L, 18, LocaleController.getString("TextCopied", C3632R.string.TextCopied));
                }
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.COPY_USERNAME) {
                AndroidUtilities.addToClipboard("@" + tLRPC$User.username);
                ChatActivity.this.checkTopUndoView();
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.showWithAction(0L, 18, LocaleController.getString("UsernameCopied", C3632R.string.UsernameCopied));
                }
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.USER_MESSAGES) {
                ChatActivity.this.openSearchWithText("");
                ChatActivity.this.isNeedHideKeyboardOnOpenSearchUserMessages = false;
                ChatActivity.this.searchUserButton.callOnClick();
                ChatActivity.this.isNeedHideKeyboardOnOpenSearchUserMessages = true;
                ChatActivity.this.searchUserMessages(tLRPC$User, null, true);
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.TRANSFER) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", tLRPC$User.f1751id);
                bundle.putBoolean("open_wallet", true);
                ChatActivity.this.presentFragment(new ChatActivity(bundle));
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.ADD_TO_CONTACTS) {
                Bundle bundle2 = new Bundle();
                bundle2.putLong("user_id", tLRPC$User.f1751id);
                bundle2.putBoolean("addContact", true);
                ChatActivity.this.presentFragment(new ContactAddActivity(bundle2));
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.REMOVE_CONTACT) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.showDialog(AlertsCreator.showConfirmationDialog(chatActivity, chatActivity.getParentActivity(), LocaleController.getString("DeleteContact", C3632R.string.DeleteContact), LocaleController.getString("AreYouSureDeleteContact", C3632R.string.AreYouSureDeleteContact), LocaleController.getString("Delete", C3632R.string.Delete), true, ChatActivity.this.themeDelegate, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda4
                    @Override // com.iMe.fork.utils.Callbacks$Callback1
                    public final void invoke(Object obj) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressUserAvatar$3(tLRPC$User, (Boolean) obj);
                    }
                }));
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.REMOVE_FROM_GROUP) {
                ChatActivity.this.getMessagesController().deleteParticipantFromChat(-ChatActivity.this.dialog_id, tLRPC$User);
                ChatActivity chatActivity2 = ChatActivity.this;
                if (chatActivity2.currentChat == null || !BulletinFactory.canShowBulletin(chatActivity2)) {
                    return;
                }
                ChatActivity chatActivity3 = ChatActivity.this;
                BulletinFactory.createRemoveFromChatBulletin(chatActivity3, tLRPC$User, chatActivity3.currentChat.title).show();
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.OPEN_PROFILE) {
                openProfile(tLRPC$User);
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.SEND_MESSAGE) {
                openDialog(chatMessageCell, tLRPC$User);
            } else if (extendedAvatarPreviewerItem == ExtendedAvatarPreviewerItem.MENTION) {
                appendMention(tLRPC$User, false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$3(TLRPC$User tLRPC$User, Boolean bool) {
            if (bool.booleanValue()) {
                ArrayList<TLRPC$User> arrayList = new ArrayList<>();
                arrayList.add(tLRPC$User);
                ChatActivity.this.getContactsController().deleteContact(arrayList, true);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$5(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, AvatarPreviewer.MenuItem menuItem) {
            int i = AnonymousClass145.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(tLRPC$User);
            } else if (i == 4) {
                openDialog(chatMessageCell, tLRPC$User);
            } else if (i != 5) {
            } else {
                appendMention(tLRPC$User, false);
            }
        }

        private void appendMention(TLRPC$User tLRPC$User, boolean z) {
            SpannableStringBuilder spannableStringBuilder;
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                CharSequence fieldText = chatActivityEnterView.getFieldText();
                if (fieldText != null) {
                    spannableStringBuilder = new SpannableStringBuilder(fieldText);
                    if (fieldText.charAt(fieldText.length() - 1) != ' ') {
                        spannableStringBuilder.append((CharSequence) " ");
                    }
                } else {
                    spannableStringBuilder = new SpannableStringBuilder();
                }
                if (spannableStringBuilder.length() > 0 && spannableStringBuilder.charAt(spannableStringBuilder.length() - 1) != ' ') {
                    spannableStringBuilder.append(' ');
                }
                String publicUsername = UserObject.getPublicUsername(tLRPC$User);
                if (publicUsername != null && !z) {
                    spannableStringBuilder.append((CharSequence) "@").append((CharSequence) publicUsername).append((CharSequence) " ");
                } else {
                    String firstName = UserObject.getFirstName(tLRPC$User, false);
                    SpannableString spannableString = new SpannableString(firstName + " ");
                    spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.f1751id, 3), 0, spannableString.length(), 33);
                    spannableStringBuilder.append((CharSequence) spannableString);
                }
                ChatActivity.this.chatActivityEnterView.setFieldText(spannableStringBuilder);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda7
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$appendMention$6();
                    }
                }, 200L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$appendMention$6() {
            ChatActivity.this.chatActivityEnterView.openKeyboard();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didLongPressChannelAvatar(final ChatMessageCell chatMessageCell, final TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            AvatarPreviewer.Data m72of;
            if (isAvatarPreviewerEnabled()) {
                AvatarPreviewer.MenuItem[] menuItemArr = {AvatarPreviewer.MenuItem.OPEN_PROFILE};
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
                if (tLRPC$Chat2 == null || tLRPC$Chat2.f1602id != tLRPC$Chat.f1602id || chatActivity.isThreadChat()) {
                    menuItemArr = (AvatarPreviewer.MenuItem[]) Arrays.copyOf(menuItemArr, 2);
                    menuItemArr[1] = tLRPC$Chat.broadcast ? AvatarPreviewer.MenuItem.OPEN_CHANNEL : AvatarPreviewer.MenuItem.OPEN_GROUP;
                }
                TLRPC$ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(tLRPC$Chat.f1602id);
                if (chatFull == null) {
                    m72of = AvatarPreviewer.Data.m72of(tLRPC$Chat, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                } else {
                    m72of = AvatarPreviewer.Data.m71of(tLRPC$Chat, chatFull, menuItemArr);
                }
                if (AvatarPreviewer.canPreview(m72of)) {
                    AvatarPreviewer.getInstance().show((ViewGroup) ChatActivity.this.fragmentView, m72of, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda19
                        @Override // org.telegram.p043ui.AvatarPreviewer.Callback
                        public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressChannelAvatar$7(tLRPC$Chat, chatMessageCell, menuItem);
                        }
                    });
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressChannelAvatar$7(TLRPC$Chat tLRPC$Chat, ChatMessageCell chatMessageCell, AvatarPreviewer.MenuItem menuItem) {
            int i = AnonymousClass145.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(tLRPC$Chat);
            } else if (i == 2 || i == 3) {
                openChat(chatMessageCell, tLRPC$Chat, 0);
            }
        }

        private void openProfile(TLRPC$User tLRPC$User) {
            openProfile(tLRPC$User, false);
        }

        private void openProfile(TLRPC$User tLRPC$User, boolean z) {
            if (tLRPC$User == null || tLRPC$User.f1751id == ChatActivity.this.getUserConfig().getClientUserId()) {
                return;
            }
            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
            int i = 0;
            if (tLRPC$UserProfilePhoto == null || (tLRPC$UserProfilePhoto instanceof TLRPC$TL_userProfilePhotoEmpty)) {
                z = false;
            }
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", tLRPC$User.f1751id);
            bundle.putBoolean("expandPhoto", z);
            ProfileActivity profileActivity = new ProfileActivity(bundle);
            TLRPC$User tLRPC$User2 = ChatActivity.this.currentUser;
            if (tLRPC$User2 != null && tLRPC$User2.f1751id == tLRPC$User.f1751id) {
                i = 1;
            }
            profileActivity.setPlayProfileAnimation(i);
            AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            ChatActivity.this.presentFragment(profileActivity);
        }

        private void openProfile(TLRPC$Chat tLRPC$Chat) {
            openProfile(tLRPC$Chat, false);
        }

        private void openProfile(TLRPC$Chat tLRPC$Chat, boolean z) {
            if (tLRPC$Chat != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", tLRPC$Chat.f1602id);
                bundle.putBoolean("expandPhoto", z);
                ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            }
        }

        private void openDialog(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User) {
            if (tLRPC$User != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", tLRPC$User.f1751id);
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        private void openChat(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i) {
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
            if (tLRPC$Chat2 != null && tLRPC$Chat.f1602id == tLRPC$Chat2.f1602id) {
                if (chatActivity.avatarContainer != null && i == 0) {
                    ChatActivity.this.avatarContainer.openProfile(false);
                } else {
                    ChatActivity.this.scrollToMessageId(i, chatMessageCell.getMessageObject().getId(), true, 0, true, 0);
                }
            } else if (tLRPC$Chat2 == null || tLRPC$Chat.f1602id != tLRPC$Chat2.f1602id || chatActivity.isThreadChat()) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", tLRPC$Chat.f1602id);
                if (i != 0) {
                    bundle.putInt("message_id", i);
                }
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        private boolean isAvatarPreviewerEnabled() {
            TLRPC$Chat tLRPC$Chat;
            return UserObject.isUserSelf(ChatActivity.this.currentUser) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && (!ChatObject.isChannel(tLRPC$Chat) || ChatActivity.this.currentChat.megagroup));
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            if (ChatActivity.this.getParentActivity() != null) {
                if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonRequestPeer)) {
                    ChatActivity.this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, chatMessageCell.getMessageObject(), chatMessageCell.getMessageObject(), ChatActivity.this.makeProgressForBotButton(chatMessageCell, tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl ? tLRPC$KeyboardButton.url : null));
                }
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needShowPremiumBulletin(int i) {
            String replaceSingleTag;
            try {
                if (i == 0) {
                    ChatActivity.this.checkTopUndoView();
                    if (ChatActivity.this.topUndoView == null) {
                        return;
                    }
                    ChatActivity.this.topUndoView.showWithAction(0L, 84, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda8
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$8();
                        }
                    });
                    ChatActivity.this.topUndoView.performHapticFeedback(3, 2);
                } else if (i != 1) {
                    if (i == 2 || i == 3) {
                        String formatDateTime = LocaleController.formatDateTime(ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil);
                        BulletinFactory m65of = BulletinFactory.m65of(ChatActivity.this);
                        int i2 = C3632R.raw.transcribe;
                        SpannableStringBuilder append = new SpannableStringBuilder().append((CharSequence) AndroidUtilities.replaceTags(LocaleController.formatPluralString("TranscriptionTrialEnd", ChatActivity.this.getMessagesController().transcribeAudioTrialWeeklyNumber, new Object[0]))).append((CharSequence) " ");
                        if (i == 2) {
                            replaceSingleTag = AndroidUtilities.replaceSingleTag(LocaleController.getString(C3632R.string.TranscriptionTrialEndBuy), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda9
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$9();
                                }
                            });
                        } else {
                            replaceSingleTag = ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil <= 0 ? "" : AndroidUtilities.replaceSingleTag(LocaleController.formatString(C3632R.string.TranscriptionTrialEndWaitOrBuy, formatDateTime), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda5
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$10();
                                }
                            });
                        }
                        m65of.createSimpleBulletin(i2, append.append(replaceSingleTag), 6, AacUtil.AAC_HE_V2_MAX_RATE_BYTES_PER_SECOND).show(true);
                        BotWebViewVibrationEffect.APP_ERROR.vibrate();
                    }
                } else {
                    BulletinFactory.m65of(ChatActivity.this).createSimpleBulletin(C3632R.raw.transcribe, ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil > 0 ? AndroidUtilities.replaceTags(LocaleController.formatPluralString("TranscriptionTrialLeftUntil", TranscribeButton.getTranscribeTrialCount(((BaseFragment) ChatActivity.this).currentAccount), LocaleController.formatDateTime(ChatActivity.this.getMessagesController().transcribeAudioTrialCooldownUntil))) : AndroidUtilities.replaceTags(LocaleController.formatPluralString("TranscriptionTrialLeft", TranscribeButton.getTranscribeTrialCount(((BaseFragment) ChatActivity.this).currentAccount), new Object[0])), 6).show(true);
                    ChatActivity.this.fragmentView.performHapticFeedback(3, 2);
                }
            } catch (Exception unused) {
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$8() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$9() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$10() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            if (ChatActivity.this.getParentActivity() != null) {
                if ((ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUpdateApp) && (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl)) {
                    ChatActivity.this.openClickableLink(null, tLRPC$KeyboardButton.url, true, chatMessageCell, chatMessageCell.getMessageObject());
                    try {
                        chatMessageCell.performHapticFeedback(0, 1);
                    } catch (Exception unused) {
                    }
                }
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressReaction(final ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z) {
            int i;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            if (!z) {
                if (tLRPC$ReactionCount != null) {
                    ChatActivity.this.selectReaction(chatMessageCell.getPrimaryMessageObject(), null, null, BitmapDescriptorFactory.HUE_RED, BitmapDescriptorFactory.HUE_RED, ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(tLRPC$ReactionCount.reaction), false, false, false);
                }
            } else if (!ChatObject.isChannelAndNotMegaGroup(ChatActivity.this.currentChat) || ChatActivity.this.dialog_id >= 0) {
                chatMessageCell.performHapticFeedback(0);
                FrameLayout frameLayout = new FrameLayout(ChatActivity.this.getParentActivity()) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.2
                    Path path = new Path();

                    @Override // android.view.ViewGroup, android.view.View
                    public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                            ChatActivity.this.closeMenu();
                        }
                        return super.dispatchKeyEvent(keyEvent);
                    }

                    @Override // android.widget.FrameLayout, android.view.View
                    protected void onMeasure(int i2, int i3) {
                        int min = Math.min(View.MeasureSpec.getSize(i3), AndroidUtilities.m107dp(300));
                        if (min == 0) {
                            min = AndroidUtilities.m107dp(300);
                        }
                        super.onMeasure(i2, View.MeasureSpec.makeMeasureSpec(min, Integer.MIN_VALUE));
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        if (Build.VERSION.SDK_INT >= 21) {
                            canvas.save();
                            this.path.rewind();
                            this.path.addRoundRect(AndroidUtilities.m107dp(8), AndroidUtilities.m107dp(8), getWidth() - AndroidUtilities.m107dp(8), getHeight() - AndroidUtilities.m107dp(8), AndroidUtilities.m107dp(6), AndroidUtilities.m107dp(6), Path.Direction.CW);
                            canvas.clipPath(this.path);
                            super.dispatchDraw(canvas);
                            canvas.restore();
                            return;
                        }
                        super.dispatchDraw(canvas);
                    }
                };
                frameLayout.setLayoutParams(LayoutHelper.createFrame(-2, -2));
                Rect rect = new Rect();
                Drawable mutate = ContextCompat.getDrawable(ChatActivity.this.getParentActivity(), C3632R.C3634drawable.popup_fixed_alert).mutate();
                mutate.setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                mutate.getPadding(rect);
                frameLayout.setBackground(mutate);
                ReactionsLayoutInBubble.ReactionButton reactionButton = chatMessageCell.getReactionButton(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(tLRPC$ReactionCount.reaction));
                if (reactionButton == null) {
                    return;
                }
                int i2 = chatMessageCell.reactionsLayoutInBubble.f1939y;
                AndroidUtilities.m107dp(28);
                float f = chatMessageCell.reactionsLayoutInBubble.f1938x + reactionButton.f1940x;
                chatMessageCell.getLocationInWindow(new int[2]);
                Activity parentActivity = ChatActivity.this.getParentActivity();
                ChatActivity chatActivity = ChatActivity.this;
                frameLayout.addView(new ReactedUsersListView(parentActivity, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, chatMessageCell.getPrimaryMessageObject(), tLRPC$ReactionCount, false).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda21
                    @Override // org.telegram.p043ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                    public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$11(reactedUsersListView, arrayList);
                    }
                }).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda22
                    @Override // org.telegram.p043ui.Components.ReactedUsersListView.OnProfileSelectedListener
                    public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$12(chatMessageCell, reactedUsersListView, j, tLRPC$MessagePeerReaction);
                    }
                }), LayoutHelper.createFrame((int) PsExtractor.VIDEO_STREAM_MASK, -2));
                ChatActivity.this.scrimPopupWindow = new ActionBarPopupWindow(frameLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.4
                    @Override // org.telegram.p043ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                    public void dismiss() {
                        super.dismiss();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        if (chatActivity2.scrimPopupWindow != this) {
                            return;
                        }
                        chatActivity2.scrimPopupWindow = null;
                        chatActivity2.menuDeleteItem = null;
                        ChatActivity.this.scrimPopupWindowItems = null;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                            ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                        } else {
                            ChatActivity.this.dimBehindView(false);
                        }
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                    }
                };
                ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(220);
                ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                ChatActivity.this.scrimPopupWindow.setAnimationStyle(C3632R.style.PopupContextAnimation);
                ChatActivity.this.scrimPopupWindow.setFocusable(true);
                frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.m107dp(1000), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.m107dp(1000), Integer.MIN_VALUE));
                ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                int height = ChatActivity.this.contentView.getHeight();
                int measuredHeight = frameLayout.getMeasuredHeight();
                int measureKeyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                if (measureKeyboardHeight > AndroidUtilities.m107dp(20)) {
                    height += measureKeyboardHeight;
                }
                int max = Math.max(AndroidUtilities.m107dp(6), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.m107dp(6)) - frameLayout.getMeasuredWidth(), (int) (f - AndroidUtilities.m107dp(28))));
                if (AndroidUtilities.isTablet()) {
                    int[] iArr = new int[2];
                    ChatActivity.this.fragmentView.getLocationInWindow(iArr);
                    max += iArr[0];
                }
                if (measuredHeight < height) {
                    float f2 = measuredHeight;
                    float f3 = height / 2.0f;
                    i = (int) ((f2 >= f3 || ((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + ((float) chatMessageCell.reactionsLayoutInBubble.f1939y)) + ((float) reactionButton.f1941y) <= f3) ? ChatActivity.this.chatListView.getY() + chatMessageCell.getY() + chatMessageCell.reactionsLayoutInBubble.f1939y + reactionButton.f1941y + reactionButton.height : (((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + chatMessageCell.reactionsLayoutInBubble.f1939y) + reactionButton.f1941y) - f2);
                } else {
                    i = ((BaseFragment) ChatActivity.this).inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                }
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity2.scrimPopupWindow.showAtLocation(chatActivity2.chatListView, 51, ChatActivity.this.scrimPopupX = max, ChatActivity.this.scrimPopupY = i);
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity chatActivity3 = ChatActivity.this;
                TLRPC$Reaction tLRPC$Reaction = tLRPC$ReactionCount.reaction;
                chatActivity3.scrimViewReaction = tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon : null;
                ChatActivity.this.dimBehindView((View) chatMessageCell, true);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.hide(true, 1);
                }
                if (ChatActivity.this.undoView != null) {
                    ChatActivity.this.undoView.hide(true, 1);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$11(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.3
                @Override // org.telegram.p043ui.Components.EmojiPacksAlert, org.telegram.p043ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$12(ChatMessageCell chatMessageCell, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
            Bundle bundle = new Bundle();
            if (j > 0) {
                bundle.putLong("user_id", j);
            } else {
                bundle.putLong("chat_id", -j);
            }
            bundle.putInt("report_reaction_message_id", chatMessageCell.getMessageObject().getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$TL_pollAnswer> arrayList, int i, int i2, int i3) {
            int i4;
            int i5;
            int i6;
            int i7;
            if (i >= 0 || arrayList.isEmpty()) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                if (ChatActivity.this.pollHintView == null) {
                    ChatActivity.this.pollHintView = new HintView(ChatActivity.this.getParentActivity(), 5, ChatActivity.this.themeDelegate);
                    ChatActivity.this.pollHintView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                    ChatActivity.this.pollHintView.setVisibility(4);
                    ChatActivity chatActivity = ChatActivity.this;
                    int indexOfChild = chatActivity.contentView.indexOfChild(chatActivity.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.contentView.addView(chatActivity2.pollHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2, 51, 19, 0, 19, 0));
                }
                if (!arrayList.isEmpty() || i >= 0) {
                    i4 = i2;
                    i5 = i3;
                } else {
                    ArrayList<ChatMessageCell.PollButton> pollButtons = chatMessageCell.getPollButtons();
                    int size = pollButtons.size();
                    float f = 0.0f;
                    int i8 = 0;
                    while (true) {
                        if (i8 >= size) {
                            i6 = i2;
                            i7 = i3;
                            break;
                        }
                        ChatMessageCell.PollButton pollButton = pollButtons.get(i8);
                        float y = (chatMessageCell.getY() + pollButton.f1800y) - AndroidUtilities.m107dp(4);
                        ChatActivity chatActivity3 = ChatActivity.this;
                        float f2 = y - chatActivity3.chatListViewPaddingTop;
                        chatActivity3.pollHintX = pollButton.f1799x + AndroidUtilities.m108dp(13.3f);
                        ChatActivity.this.pollHintY = (pollButton.f1800y - AndroidUtilities.m107dp(6)) + i3;
                        if (f2 > BitmapDescriptorFactory.HUE_RED) {
                            i6 = ChatActivity.this.pollHintX;
                            i7 = ChatActivity.this.pollHintY;
                            f = 0.0f;
                            break;
                        }
                        i8++;
                        f = f2;
                    }
                    if (f != BitmapDescriptorFactory.HUE_RED) {
                        ChatActivity.this.chatListView.smoothScrollBy(0, (int) f);
                        ChatActivity.this.pollHintCell = chatMessageCell;
                        return;
                    }
                    i4 = i6;
                    i5 = i7;
                }
                ChatActivity.this.pollHintView.showForMessageCell(chatMessageCell, Integer.valueOf(i), i4, i5, true);
                return;
            }
            ChatActivity.this.getSendMessagesHelper().sendVote(chatMessageCell.getMessageObject(), arrayList, null);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCancelSendButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.messageOwner.send_state != 0) {
                ChatActivity.this.getSendMessagesHelper().cancelSendingMessage(messageObject);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPress(ChatMessageCell chatMessageCell, float f, float f2) {
            ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.startMultiselect(chatActivity.chatListView.getChildAdapterPosition(chatMessageCell));
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canPerformActions() {
            return (((BaseFragment) ChatActivity.this).actionBar == null || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0 || ((BaseFragment) ChatActivity.this).inPreviewMode) ? false : true;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            ChatActivity.this.didPressMessageUrl(characterStyle, z, chatMessageCell.getMessageObject(), chatMessageCell);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCodeCopy(ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock) {
            StaticLayout staticLayout;
            if (textLayoutBlock == null || (staticLayout = textLayoutBlock.textLayout) == null || staticLayout.getText() == null) {
                return;
            }
            String charSequence = textLayoutBlock.textLayout.getText().toString();
            SpannableString spannableString = new SpannableString(charSequence);
            spannableString.setSpan(new CodeHighlighting.Span(false, 0, null, textLayoutBlock.language, charSequence), 0, spannableString.length(), 33);
            AndroidUtilities.addToClipboard(spannableString);
            BulletinFactory.m65of(ChatActivity.this).createCopyBulletin(LocaleController.getString(C3632R.string.CodeCopied)).show();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressMoreChannelRecommendations(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.getUserConfig().isPremium()) {
                Bundle bundle = new Bundle();
                bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                bundle.putInt("start_from", 13);
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.presentFragment(new MediaActivity(bundle, chatActivity.avatarContainer.getSharedMediaPreloader()));
                return;
            }
            BulletinFactory.m65of(ChatActivity.this).createSimpleBulletin(C3632R.raw.star_premium_2, AndroidUtilities.replaceSingleTag(LocaleController.formatPluralStringComma("UnlockSimilarChannelsPremium", ChatActivity.this.getMessagesController().recommendedChannelsLimitPremium), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressMoreChannelRecommendations$13();
                }
            })).show();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressMoreChannelRecommendations$13() {
            ChatActivity.this.presentFragment(new PremiumPreviewFragment("similar_channels"));
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelRecommendation(final ChatMessageCell chatMessageCell, final TLRPC$Chat tLRPC$Chat, boolean z) {
            if (tLRPC$Chat != null) {
                if (((BaseFragment) ChatActivity.this).parentLayout == null || !((BaseFragment) ChatActivity.this).parentLayout.isInPreviewMode()) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", tLRPC$Chat.f1602id);
                    if (z) {
                        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(ChatActivity.this.getParentActivity(), C3632R.C3634drawable.popup_fixed_alert, ChatActivity.this.getResourceProvider(), 2);
                        actionBarPopupWindowLayout.setBackgroundColor(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(C3632R.string.OpenChannel2), C3632R.C3634drawable.msg_channel);
                        actionBarMenuSubItem.setMinimumWidth(160);
                        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda2
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$14(view);
                            }
                        });
                        actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
                        ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem(ChatActivity.this.getParentActivity(), false, false);
                        actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString(C3632R.string.ProfileJoinChannel), C3632R.C3634drawable.msg_addbot);
                        actionBarMenuSubItem2.setMinimumWidth(160);
                        actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda3
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$16(tLRPC$Chat, chatMessageCell, view);
                            }
                        });
                        actionBarPopupWindowLayout.addView(actionBarMenuSubItem2);
                        ChatActivity chatActivity = new ChatActivity(bundle);
                        chatActivity.allowExpandPreviewByClick = true;
                        ChatActivity.this.presentFragmentAsPreviewWithMenu(chatActivity, actionBarPopupWindowLayout);
                        ChatActivity.this.checkShowBlur(true);
                        return;
                    }
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$14(View view) {
            if (((BaseFragment) ChatActivity.this).parentLayout != null) {
                ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$16(final TLRPC$Chat tLRPC$Chat, ChatMessageCell chatMessageCell, View view) {
            ChatActivity.this.finishPreviewFragment();
            tLRPC$Chat.left = false;
            if (chatMessageCell != null && chatMessageCell.channelRecommendationsCell != null) {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRecommendationsLoaded, Long.valueOf(chatMessageCell.channelRecommendationsCell.chatId));
            }
            ChatActivity.this.getMessagesController().addUserToChat(tLRPC$Chat.f1602id, ChatActivity.this.getUserConfig().getCurrentUser(), 0, null, ChatActivity.this, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda13
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressChannelRecommendation$15(tLRPC$Chat);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressChannelRecommendation$15(TLRPC$Chat tLRPC$Chat) {
            BulletinFactory m65of = BulletinFactory.m65of(ChatActivity.this);
            int i = C3632R.raw.contact_check;
            int i2 = C3632R.string.YouJoinedChannel;
            Object[] objArr = new Object[1];
            objArr[0] = tLRPC$Chat == null ? "" : tLRPC$Chat.title;
            m65of.createSimpleBulletin(i, LocaleController.formatString(i2, objArr)).show(true);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelRecommendationsClose(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject == null || messageObject.type != 27) {
                return;
            }
            messageObject.toggleChannelRecommendations();
            messageObject.forceUpdate = true;
            chatMessageCell.forceResetMessageObject();
            chatMessageCell.requestLayout();
            ChatActivity.this.chatAdapter.updateRowWithMessageObject(messageObject, false, false);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
            Bulletin createContainsEmojiBulletin;
            if (!ChatActivity.this.getMessagesController().premiumFeaturesBlocked() && animatedEmojiSpan != null && !animatedEmojiSpan.standard) {
                long documentId = animatedEmojiSpan.getDocumentId();
                TLRPC$Document tLRPC$Document = animatedEmojiSpan.document;
                if (tLRPC$Document == null) {
                    tLRPC$Document = AnimatedEmojiDrawable.findDocument(((BaseFragment) ChatActivity.this).currentAccount, documentId);
                }
                if (tLRPC$Document != null && (createContainsEmojiBulletin = BulletinFactory.m65of(ChatActivity.this).createContainsEmojiBulletin(tLRPC$Document, 0, new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda16
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressAnimatedEmoji$17((TLRPC$InputStickerSet) obj);
                    }
                })) != null) {
                    createContainsEmojiBulletin.show();
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressAnimatedEmoji$17(TLRPC$InputStickerSet tLRPC$InputStickerSet) {
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(tLRPC$InputStickerSet);
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTopicButton(ChatMessageCell chatMessageCell) {
            TLRPC$TL_forumTopic findTopic;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject != null) {
                long topicId = MessageObject.getTopicId(messageObject.currentAccount, messageObject.messageOwner, true);
                if (topicId == 0 || (findTopic = ChatActivity.this.getMessagesController().getTopicsController().findTopic(ChatActivity.this.currentChat.f1602id, topicId)) == null) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                ForumUtilities.openTopic(chatActivity, chatActivity.currentChat.f1602id, findTopic, messageObject.getId());
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldShowTopicButton() {
            return ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isTopic;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            ChatActivity.this.getSendMessagesHelper().sendCallback(true, chatMessageCell.getMessageObject(), tLRPC$KeyboardButton, ChatActivity.this);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            try {
                ChatActivity chatActivity = ChatActivity.this;
                EmbedBottomSheet.show(chatActivity, messageObject, chatActivity.photoViewerProvider, str2, str3, str4, str, i, i2, ChatActivity.this.isKeyboardVisible());
            } catch (Throwable th) {
                FileLog.m102e(th);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressWebPage(ChatMessageCell chatMessageCell, TLRPC$WebPage tLRPC$WebPage, String str, boolean z) {
            Uri parse;
            if (str == null || (parse = Uri.parse(str)) == null) {
                return;
            }
            if (!z && Browser.isTelegraphUrl(str, false)) {
                z = true;
            }
            if (ChatActivity.this.progressDialogCurrent != null) {
                ChatActivity.this.progressDialogCurrent.cancel(true);
            }
            ChatActivity.this.progressDialogCurrent = (chatMessageCell == null || chatMessageCell.getMessageObject() == null) ? null : new C43225(chatMessageCell);
            if (z || Browser.isInternalUri(parse, null)) {
                Browser.openUrl(ChatActivity.this.getContext(), parse, true, true, false, ChatActivity.this.progressDialogCurrent);
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            AlertsCreator.showOpenUrlAlert(chatActivity, str, true, true, true, !z, chatActivity.progressDialogCurrent, ChatActivity.this.themeDelegate);
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$5 */
        /* loaded from: classes5.dex */
        class C43225 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            C43225(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$5$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$48100(ChatActivity.this);
                    }
                }, 250L);
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:43:0x00d6, code lost:
            if (org.telegram.messenger.DialogObject.getPeerDialogId(r10) != r19.this$0.dialog_id) goto L124;
         */
        /* JADX WARN: Removed duplicated region for block: B:100:0x01c2  */
        /* JADX WARN: Removed duplicated region for block: B:113:0x01e9  */
        /* JADX WARN: Removed duplicated region for block: B:126:0x0208  */
        /* JADX WARN: Removed duplicated region for block: B:131:0x0215  */
        /* JADX WARN: Removed duplicated region for block: B:132:0x0218  */
        /* JADX WARN: Removed duplicated region for block: B:60:0x00fd  */
        /* JADX WARN: Removed duplicated region for block: B:61:0x010d  */
        /* JADX WARN: Removed duplicated region for block: B:64:0x0112  */
        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void didPressReplyMessage(org.telegram.p043ui.Cells.ChatMessageCell r20, int r21) {
            /*
                Method dump skipped, instructions count: 576
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatMessageCellDelegate.didPressReplyMessage(org.telegram.ui.Cells.ChatMessageCell, int):void");
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$6 */
        /* loaded from: classes5.dex */
        class C43236 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            C43236(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 0;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$6$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$48100(ChatActivity.this);
                    }
                }, 250L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReplyMessage$18(MessageObject messageObject) {
            ChatActivity.this.progressDialogAtMessageId = messageObject.getId();
            ChatActivity.this.progressDialogAtMessageType = 0;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isProgressLoading(ChatMessageCell chatMessageCell, int i) {
            return ChatActivity.this.progressDialogAtMessageId != 0 && chatMessageCell.getMessageObject() != null && ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId() && ChatActivity.this.progressDialogAtMessageType == i;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 1) {
                return null;
            }
            return ChatActivity.this.progressDialogLinkSpan;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getProgressLoadingBotButtonUrl(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 3) {
                return null;
            }
            return ChatActivity.this.progressDialogBotButtonUrl;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", j);
            if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                ChatActivity.this.presentFragment(new ChatActivity(bundle));
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBot(ChatMessageCell chatMessageCell, String str) {
            if (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                if ((ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0) && ChatActivity.this.chatActivityEnterView != null && str != null && str.length() > 0) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    chatActivityEnterView.setFieldText("@" + str + " ");
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didStartVideoStream(MessageObject messageObject) {
            if (messageObject.isVideo()) {
                ChatActivity.this.sendSecretMessageRead(messageObject, true);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needReloadPolls() {
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        /* JADX WARN: Code restructure failed: missing block: B:127:0x02fb, code lost:
            if (r13.exists() != false) goto L138;
         */
        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void didPressImage(org.telegram.p043ui.Cells.ChatMessageCell r13, float r14, float r15) {
            /*
                Method dump skipped, instructions count: 944
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.p043ui.ChatActivity.ChatMessageCellDelegate.didPressImage(org.telegram.ui.Cells.ChatMessageCell, float, float):void");
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressImage$19(MessageObject messageObject) {
            if (ChatActivity.this.checkSlowModeAlert()) {
                ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.m94of(messageObject.getDiceEmoji(), ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, false, null, null, null, true, 0, null, false, null));
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressInstantButton(ChatMessageCell chatMessageCell, int i) {
            TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory;
            TL_stories$StoryItem tL_stories$StoryItem;
            TLRPC$Message tLRPC$Message;
            TLRPC$MessageMedia tLRPC$MessageMedia;
            int i2;
            final TLRPC$User user;
            String string;
            TLRPC$WebPage tLRPC$WebPage;
            final MessageObject messageObject = chatMessageCell.getMessageObject();
            if (i == 19) {
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new C43247(chatMessageCell) : null;
                BoostDialogs.openGiveAwayStatusDialog(messageObject, ChatActivity.this.progressDialogCurrent, ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider());
            } else if (i == 8) {
                PollVotesAlert.showForPoll(ChatActivity.this, messageObject);
            } else if (i == 0) {
                TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                if (tLRPC$MessageMedia2 == null || (tLRPC$WebPage = tLRPC$MessageMedia2.webpage) == null || tLRPC$WebPage.cached_page == null) {
                    return;
                }
                ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                ArticleViewer.getInstance().open(messageObject);
            } else if (i == 5) {
                long j = messageObject.messageOwner.media.user_id;
                TLRPC$User user2 = j != 0 ? MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j)) : null;
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject.messageOwner.media;
                chatActivity.openVCard(user2, tLRPC$MessageMedia3.phone_number, tLRPC$MessageMedia3.vcard, tLRPC$MessageMedia3.first_name, tLRPC$MessageMedia3.last_name);
            } else if (i == 30) {
                long j2 = messageObject.messageOwner.media.user_id;
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", j2);
                ChatActivity.this.presentFragment(new ChatActivity(bundle));
            } else if (i == 31) {
                long j3 = messageObject.messageOwner.media.user_id;
                TLRPC$User user3 = j3 != 0 ? MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j3)) : null;
                if (user3 != null) {
                    if (!TextUtils.isEmpty(messageObject.vCardData)) {
                        string = messageObject.vCardData.toString();
                    } else if (!TextUtils.isEmpty(user3.phone)) {
                        C3544PhoneFormat c3544PhoneFormat = C3544PhoneFormat.getInstance();
                        string = c3544PhoneFormat.format("+" + user3.phone);
                    } else {
                        String str = MessageObject.getMedia(messageObject.messageOwner).phone_number;
                        if (!TextUtils.isEmpty(str)) {
                            string = C3544PhoneFormat.getInstance().format(str);
                        } else {
                            string = LocaleController.getString("NumberUnknown", C3632R.string.NumberUnknown);
                        }
                    }
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("user_id", user3.f1751id);
                    bundle2.putString("phone", string);
                    bundle2.putBoolean("addContact", true);
                    ChatActivity.this.presentFragment(new ContactAddActivity(bundle2));
                }
            } else {
                if (messageObject.isSponsored()) {
                    ChatActivity.this.logSponsoredClicked(messageObject);
                    Bundle bundle3 = new Bundle();
                    if (messageObject.sponsoredBotApp != null) {
                        TLRPC$TL_messages_getBotApp tLRPC$TL_messages_getBotApp = new TLRPC$TL_messages_getBotApp();
                        TLRPC$TL_inputBotAppShortName tLRPC$TL_inputBotAppShortName = new TLRPC$TL_inputBotAppShortName();
                        TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                        if (tLRPC$Message2 == null || tLRPC$Message2.from_id == null || (user = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(messageObject.messageOwner.from_id.user_id))) == null) {
                            return;
                        }
                        tLRPC$TL_inputBotAppShortName.bot_id = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getInputUser(user);
                        tLRPC$TL_inputBotAppShortName.short_name = messageObject.sponsoredBotApp.short_name;
                        tLRPC$TL_messages_getBotApp.app = tLRPC$TL_inputBotAppShortName;
                        ConnectionsManager.getInstance(((BaseFragment) ChatActivity.this).currentAccount).sendRequest(tLRPC$TL_messages_getBotApp, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda17
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$22(user, messageObject, tLObject, tLRPC$TL_error);
                            }
                        });
                        return;
                    } else if (messageObject.sponsoredWebPage != null) {
                        Browser.openUrl(ChatActivity.this.getContext(), messageObject.sponsoredWebPage.url, true, false);
                        return;
                    } else if (messageObject.sponsoredChatInvite != null) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        Context context = ChatActivity.this.getContext();
                        TLRPC$ChatInvite tLRPC$ChatInvite = messageObject.sponsoredChatInvite;
                        String str2 = messageObject.sponsoredChatInviteHash;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity2.showDialog(new JoinGroupAlert(context, tLRPC$ChatInvite, str2, chatActivity3, chatActivity3.themeDelegate));
                        return;
                    } else {
                        long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                        if (peerId == ChatActivity.this.getDialogId() && (i2 = messageObject.sponsoredChannelPost) != 0) {
                            ChatActivity.this.scrollToMessageId(i2, 0, true, 0, false, 0);
                            return;
                        }
                        if (peerId < 0) {
                            bundle3.putLong("chat_id", -peerId);
                        } else {
                            bundle3.putLong("user_id", peerId);
                        }
                        int i3 = messageObject.sponsoredChannelPost;
                        if (i3 != 0) {
                            bundle3.putInt("message_id", i3);
                        }
                        String str3 = messageObject.botStartParam;
                        if (str3 != null) {
                            bundle3.putString("inline_query", str3);
                        }
                        if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle3, ChatActivity.this)) {
                            ChatActivity.this.presentFragment(new ChatActivity(bundle3));
                            return;
                        }
                        return;
                    }
                }
                TLRPC$WebPage storyMentionWebpage = messageObject.getStoryMentionWebpage();
                if (storyMentionWebpage == null && (tLRPC$Message = messageObject.messageOwner) != null && (tLRPC$MessageMedia = tLRPC$Message.media) != null) {
                    storyMentionWebpage = tLRPC$MessageMedia.webpage;
                }
                TLRPC$WebPage tLRPC$WebPage2 = storyMentionWebpage;
                if (tLRPC$WebPage2 == null) {
                    return;
                }
                if (tLRPC$WebPage2.attributes != null) {
                    for (int i4 = 0; i4 < tLRPC$WebPage2.attributes.size(); i4++) {
                        if ((tLRPC$WebPage2.attributes.get(i4) instanceof TLRPC$TL_webPageAttributeStory) && (tL_stories$StoryItem = (tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$WebPage2.attributes.get(i4)).storyItem) != null) {
                            tL_stories$StoryItem.dialogId = DialogObject.getPeerDialogId(tLRPC$TL_webPageAttributeStory.peer);
                            tLRPC$TL_webPageAttributeStory.storyItem.messageId = messageObject.getId();
                            tLRPC$TL_webPageAttributeStory.storyItem.messageType = 1;
                            ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), tLRPC$TL_webPageAttributeStory.storyItem, StoriesListPlaceProvider.m52of(ChatActivity.this.chatListView));
                            return;
                        }
                    }
                }
                if (ChatActivity.this.openLinkInternally(tLRPC$WebPage2.url, chatMessageCell, null, messageObject.getId(), 2)) {
                    return;
                }
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new C43258(chatMessageCell) : null;
                Browser.openUrl(ChatActivity.this.getParentActivity(), Uri.parse(tLRPC$WebPage2.url), true, true, false, ChatActivity.this.progressDialogCurrent);
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$7 */
        /* loaded from: classes5.dex */
        public class C43247 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            C43247(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$7$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$48100(ChatActivity.this);
                    }
                }, 250L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$22(final TLRPC$User tLRPC$User, final MessageObject messageObject, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            if (tLRPC$TL_error != null) {
                BulletinFactory.m65of(ChatActivity.this).createErrorBulletin(LocaleController.getString(C3632R.string.UnknownError)).show(true);
                return;
            }
            final TLRPC$TL_messages_botApp tLRPC$TL_messages_botApp = (TLRPC$TL_messages_botApp) tLObject;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda15
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$21(tLRPC$User, tLRPC$TL_messages_botApp, messageObject);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$21(final TLRPC$User tLRPC$User, final TLRPC$TL_messages_botApp tLRPC$TL_messages_botApp, final MessageObject messageObject) {
            final AtomicBoolean atomicBoolean = new AtomicBoolean();
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda14
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatMessageCellDelegate.this.lambda$didPressInstantButton$20(tLRPC$User, tLRPC$TL_messages_botApp, atomicBoolean, messageObject);
                }
            };
            if (tLRPC$TL_messages_botApp.request_write_access) {
                AlertsCreator.createBotLaunchAlert(ChatActivity.this, atomicBoolean, tLRPC$User, runnable);
            } else {
                runnable.run();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressInstantButton$20(TLRPC$User tLRPC$User, TLRPC$TL_messages_botApp tLRPC$TL_messages_botApp, AtomicBoolean atomicBoolean, MessageObject messageObject) {
            BotWebViewSheet botWebViewSheet = new BotWebViewSheet(ChatActivity.this.getContext(), ChatActivity.this.getResourceProvider());
            botWebViewSheet.setParentActivity(ChatActivity.this.getParentActivity());
            int i = ((BaseFragment) ChatActivity.this).currentAccount;
            long j = tLRPC$User.f1751id;
            botWebViewSheet.requestWebView(i, j, j, null, null, 3, 0, false, ChatActivity.this, tLRPC$TL_messages_botApp.app, atomicBoolean.get(), messageObject.botStartParam, tLRPC$User);
            ChatActivity.this.showDialog(botWebViewSheet);
            if (tLRPC$TL_messages_botApp.inactive) {
                botWebViewSheet.showJustAddedBulletin();
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$8 */
        /* loaded from: classes5.dex */
        public class C43258 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            C43258(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$8$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$48100(ChatActivity.this);
                    }
                }, 250L);
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressGiveawayChatButton(ChatMessageCell chatMessageCell, int i) {
            if (chatMessageCell.getMessageObject().messageOwner.media instanceof TLRPC$TL_messageMediaGiveaway) {
                long j = -((TLRPC$TL_messageMediaGiveaway) chatMessageCell.getMessageObject().messageOwner.media).channels.get(i).longValue();
                if (ChatActivity.this.dialog_id != j) {
                    ChatActivity.this.presentFragment(ChatActivity.m68of(j));
                } else {
                    AndroidUtilities.shakeViewSpring(ChatActivity.this.getChatListView(), 5.0f);
                    BotWebViewVibrationEffect.APP_ERROR.vibrate();
                }
            }
            if (chatMessageCell.getMessageObject().messageOwner.media instanceof TLRPC$TL_messageMediaGiveawayResults) {
                ChatActivity.this.presentFragment(ProfileActivity.m54of(((TLRPC$TL_messageMediaGiveawayResults) chatMessageCell.getMessageObject().messageOwner.media).winners.get(i).longValue()));
            }
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCommentButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject;
            int i;
            long j;
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                messageObject = currentMessagesGroup.messages.get(0);
            } else {
                messageObject = chatMessageCell.getMessageObject();
            }
            MessageObject messageObject2 = messageObject;
            TLRPC$MessageReplies tLRPC$MessageReplies = messageObject2.messageOwner.replies;
            if (tLRPC$MessageReplies != null) {
                i = tLRPC$MessageReplies.read_max_id;
                j = tLRPC$MessageReplies.channel_id;
            } else {
                i = -1;
                j = 0;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.openDiscussionMessageChat(chatActivity.currentChat.f1602id, messageObject2, messageObject2.getId(), j, i, 0, null);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getAdminRank(long j) {
            String adminRank;
            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.currentChat.megagroup && (adminRank = chatActivity.getMessagesController().getAdminRank(ChatActivity.this.currentChat.f1602id, j)) != null) {
                    return adminRank;
                }
            }
            if (ChatActivity.this.forumTopic == null || ChatActivity.this.forumTopic.from_id == null) {
                return null;
            }
            if (ChatActivity.this.forumTopic.from_id.user_id == j || ChatActivity.this.forumTopic.from_id.channel_id == j || ChatActivity.this.forumTopic.from_id.chat_id == j) {
                return LocaleController.getString("TopicCreator", C3632R.string.TopicCreator);
            }
            return null;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldRepeatSticker(MessageObject messageObject) {
            return !ChatActivity.this.alreadyPlayedStickers.containsKey(messageObject);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void setShouldNotRepeatSticker(MessageObject messageObject) {
            ChatActivity.this.alreadyPlayedStickers.put(messageObject, Boolean.TRUE);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper() {
            return ChatActivity.this.textSelectionHelper;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean hasSelectedMessages() {
            return ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() > 0;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void onDiceFinished() {
            if (ChatActivity.this.fireworksOverlay.isStarted()) {
                return;
            }
            ChatActivity.this.fireworksOverlay.start();
            ChatActivity.this.fireworksOverlay.performHapticFeedback(3, 2);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public PinchToZoomHelper getPinchToZoomHelper() {
            return ChatActivity.this.pinchToZoomHelper;
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean keyboardIsOpened() {
            return ChatActivity.this.contentView.getKeyboardHeight() + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.m107dp(20);
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isLandscape() {
            return ChatActivity.this.contentView.getMeasuredWidth() > ChatActivity.this.contentView.getMeasuredHeight();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void invalidateBlur() {
            ChatActivity.this.contentView.invalidateBlur();
        }

        @Override // org.telegram.p043ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean onAccessibilityAction(int i, Bundle bundle) {
            if (i == 16 || i == C3632R.C3635id.acc_action_small_button || i == C3632R.C3635id.acc_action_msg_options) {
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.allowExpandPreviewByClick) {
                        if (((BaseFragment) chatActivity).parentLayout != null) {
                            ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                        }
                        return true;
                    }
                }
                return !canPerformActions();
            }
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$145  reason: invalid class name */
    /* loaded from: classes5.dex */
    public static /* synthetic */ class AnonymousClass145 {
        static final /* synthetic */ int[] $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem;

        static {
            int[] iArr = new int[AvatarPreviewer.MenuItem.values().length];
            $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem = iArr;
            try {
                iArr[AvatarPreviewer.MenuItem.OPEN_PROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_GROUP.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_CHANNEL.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEND_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError unused4) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.MENTION.ordinal()] = 5;
            } catch (NoSuchFieldError unused5) {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openUserProfile(long j) {
        if (j < 0) {
            Bundle bundle = new Bundle();
            bundle.putLong("chat_id", -j);
            if (getMessagesController().checkCanOpenChat(bundle, this)) {
                presentFragment(new ChatActivity(bundle));
            }
        } else if (j != getUserConfig().getClientUserId()) {
            Bundle bundle2 = new Bundle();
            bundle2.putLong("user_id", j);
            if (this.currentEncryptedChat != null && j == this.currentUser.f1751id) {
                bundle2.putLong("dialog_id", this.dialog_id);
            }
            ProfileActivity profileActivity = new ProfileActivity(bundle2);
            TLRPC$User tLRPC$User = this.currentUser;
            profileActivity.setPlayProfileAnimation((tLRPC$User == null || tLRPC$User.f1751id != j) ? 0 : 1);
            presentFragment(profileActivity);
        }
    }

    private boolean openLinkInternally(String str, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, int i) {
        return openLinkInternally(str, chatMessageCell, characterStyle, i, 1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean openLinkInternally(String str, final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final int i, final int i2) {
        int parseInt;
        int i3;
        if (this.currentChat != null && str != null && !isForwardingEditor()) {
            Runnable runnable = (chatMessageCell == null || (characterStyle == null && i2 == 1)) ? null : new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda240
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$openLinkInternally$349(i, i2, characterStyle, chatMessageCell);
                }
            };
            if (str.startsWith("tg:privatepost") || str.startsWith("tg://privatepost")) {
                Uri parse = Uri.parse(str.replace("tg:privatepost", "tg://telegram.org").replace("tg://privatepost", "tg://telegram.org"));
                int intValue = Utilities.parseInt((CharSequence) parse.getQueryParameter("post")).intValue();
                long longValue = Utilities.parseLong(parse.getQueryParameter("channel")).longValue();
                int intValue2 = Utilities.parseInt((CharSequence) parse.getQueryParameter("thread")).intValue();
                long j = this.currentChat.f1602id;
                if (longValue == j && intValue != 0) {
                    if (intValue2 != 0) {
                        openDiscussionMessageChat(j, null, intValue2, 0L, -1, 0, null);
                    } else {
                        this.showScrollToMessageError = true;
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue, i, true, 0, false, 0, runnable);
                        }
                    }
                    return true;
                }
            } else if (ChatObject.getPublicUsername(this.currentChat) != null) {
                try {
                    if (publicMsgUrlPattern == null) {
                        publicMsgUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)/([0-9]+)/?([0-9]+)?");
                        voiceChatUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)\\?(voicechat+)");
                    }
                    Matcher matcher = publicMsgUrlPattern.matcher(str);
                    if (matcher.find(2) && matcher.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher.group(2))) {
                        Uri parse2 = Uri.parse(str);
                        int intValue3 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("thread")).intValue();
                        int intValue4 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("comment")).intValue();
                        if (intValue3 == 0 && intValue4 == 0) {
                            if (matcher.group(4) != null) {
                                i3 = Integer.parseInt(matcher.group(3));
                                parseInt = Integer.parseInt(matcher.group(4));
                            } else {
                                parseInt = Integer.parseInt(matcher.group(3));
                                i3 = 0;
                            }
                            if (!ChatObject.isForum(this.currentChat) || i3 == getTopicId()) {
                                this.showScrollToMessageError = true;
                                if (this.chatMode == 2) {
                                    this.chatActivityDelegate.openReplyMessage(parseInt);
                                    finishFragment();
                                } else {
                                    int timestampFromLink = LaunchActivity.getTimestampFromLink(parse2);
                                    this.startFromVideoTimestamp = timestampFromLink;
                                    if (timestampFromLink >= 0) {
                                        this.startFromVideoMessageId = parseInt;
                                    }
                                    scrollToMessageId(parseInt, i, true, 0, false, 0, runnable);
                                }
                                return true;
                            }
                            return false;
                        }
                        return false;
                    }
                    if (!str.startsWith("tg:resolve") && !str.startsWith("tg://resolve")) {
                        Matcher matcher2 = voiceChatUrlPattern.matcher(str);
                        try {
                            if (matcher2.find(2) && matcher2.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher2.group(2))) {
                                String queryParameter = Uri.parse(str).getQueryParameter("voicechat");
                                if (!TextUtils.isEmpty(queryParameter)) {
                                    this.voiceChatHash = queryParameter;
                                    checkGroupCallJoin(true);
                                    return true;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.m102e(e);
                        }
                    }
                    Uri parse3 = Uri.parse(str.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org"));
                    String lowerCase = parse3.getQueryParameter("domain").toLowerCase();
                    int intValue5 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("post")).intValue();
                    int intValue6 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("thread")).intValue();
                    int intValue7 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("comment")).intValue();
                    if (ChatObject.hasPublicLink(this.currentChat, lowerCase) && intValue5 != 0 && intValue6 == 0 && intValue7 == 0) {
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue5);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue5, i, true, 0, false, 0, runnable);
                        }
                        return true;
                    }
                    return false;
                } catch (Exception e2) {
                    FileLog.m102e(e2);
                }
            } else {
                try {
                    if (privateMsgUrlPattern == null) {
                        privateMsgUrlPattern = Pattern.compile("(https://)?t.me/c/([0-9]+)/([0-9]+)/?([0-9]+)?");
                    }
                    Matcher matcher3 = privateMsgUrlPattern.matcher(str);
                    if (matcher3.find(2) && matcher3.find(3) && matcher3.group(4) == null) {
                        long parseLong = Long.parseLong(matcher3.group(2));
                        int parseInt2 = Integer.parseInt(matcher3.group(3));
                        if (parseLong == this.currentChat.f1602id && parseInt2 != 0) {
                            Uri parse4 = Uri.parse(str);
                            int intValue8 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("thread")).intValue();
                            int intValue9 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("topic")).intValue();
                            int intValue10 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("comment")).intValue();
                            if (intValue8 == 0 && intValue9 == 0 && intValue10 == 0) {
                                this.showScrollToMessageError = true;
                                if (this.chatMode == 2) {
                                    this.chatActivityDelegate.openReplyMessage(parseInt2);
                                    finishFragment();
                                } else {
                                    scrollToMessageId(parseInt2, i, true, 0, false, 0, runnable);
                                }
                                return true;
                            }
                            return false;
                        }
                    }
                } catch (Exception e3) {
                    FileLog.m102e(e3);
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openLinkInternally$349(int i, int i2, CharacterStyle characterStyle, ChatMessageCell chatMessageCell) {
        this.progressDialogAtMessageId = i;
        this.progressDialogAtMessageType = i2;
        this.progressDialogLinkSpan = characterStyle;
        chatMessageCell.invalidate();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public void setInMenuMode(boolean z) {
        super.setInMenuMode(z);
        C3704ActionBar c3704ActionBar = this.actionBar;
        if (c3704ActionBar != null) {
            c3704ActionBar.createMenu().setVisibility(this.inMenuMode ? 8 : 0);
        }
    }

    public void setPreloadedSticker(TLRPC$Document tLRPC$Document, boolean z) {
        this.preloadedGreetingsSticker = tLRPC$Document;
        this.forceHistoryEmpty = z;
    }

    /* renamed from: org.telegram.ui.ChatActivity$ChatScrollCallback */
    /* loaded from: classes5.dex */
    public class ChatScrollCallback extends RecyclerAnimationScrollHelper.AnimationCallback {
        private boolean lastBottom;
        private int lastItemOffset;
        private int lastPadding;
        private MessageObject scrollTo;
        private int position = 0;
        private boolean bottom = true;
        private int offset = 0;

        public ChatScrollCallback() {
        }

        static /* synthetic */ int access$1002(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastPadding = i;
            return i;
        }

        static /* synthetic */ int access$34502(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.position = i;
            return i;
        }

        static /* synthetic */ int access$34602(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.offset = i;
            return i;
        }

        static /* synthetic */ boolean access$34702(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.bottom = z;
            return z;
        }

        static /* synthetic */ MessageObject access$702(ChatScrollCallback chatScrollCallback, MessageObject messageObject) {
            chatScrollCallback.scrollTo = messageObject;
            return messageObject;
        }

        static /* synthetic */ boolean access$802(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.lastBottom = z;
            return z;
        }

        static /* synthetic */ int access$902(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastItemOffset = i;
            return i;
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onStartAnimation() {
            super.onStartAnimation();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollCallbackAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollCallbackAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations);
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                ChatActivity.this.pinchToZoomHelper.finishZoom();
            }
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onEndAnimation() {
            if (this.scrollTo != null) {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                int indexOf = ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(this.scrollTo);
                if (indexOf >= 0) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(indexOf, (int) ((this.lastItemOffset + this.lastPadding) - ChatActivity.this.chatListViewPaddingTop), this.lastBottom);
                }
            } else {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(this.position, this.offset, this.bottom);
            }
            this.scrollTo = null;
            ChatActivity.this.checkTextureViewPosition = true;
            ChatActivity.this.updateVisibleRows();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatScrollCallback$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatScrollCallback.this.lambda$onEndAnimation$0();
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onEndAnimation$0() {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollCallbackAnimationIndex);
        }

        @Override // org.telegram.p043ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void recycleView(View view) {
            if (view instanceof ChatMessageCell) {
                ChatActivity.this.chatMessageCellsCache.add((ChatMessageCell) view);
            }
        }
    }

    public static boolean isClickableLink(String str) {
        return str.startsWith("https://") || str.startsWith("@") || str.startsWith("#") || str.startsWith("$") || str.startsWith("video?");
    }

    public SimpleTextView getReplyNameTextView() {
        return this.replyNameTextView;
    }

    public SimpleTextView getReplyObjectTextView() {
        return this.replyObjectTextView;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public ArrayList<ThemeDescription> getThemeDescriptions() {
        int i;
        if (this.forceDisallowRedrawThemeDescriptions) {
            return null;
        }
        if (this.isPauseOnThemePreview) {
            this.isPauseOnThemePreview = false;
            return null;
        }
        ThemeDescription.ThemeDescriptionDelegate themeDescriptionDelegate = new ThemeDescription.ThemeDescriptionDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda338
            @Override // org.telegram.p043ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public final void didSetColor() {
                ChatActivity.this.lambda$getThemeDescriptions$350();
            }

            @Override // org.telegram.p043ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public /* synthetic */ void onAnimationProgress(float f) {
                ThemeDescription.ThemeDescriptionDelegate.CC.$default$onAnimationProgress(this, f);
            }
        };
        ArrayList<ThemeDescription> arrayList = new ArrayList<>();
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachWalletBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachWalletIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachWalletText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachBinanceBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachBinanceIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachBinanceText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachTemplatesBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachTemplatesIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachTemplatesText));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"openMusicButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerClose));
        Drawable[] drawableArr = {Theme.chat_translateIconDrawable};
        int i2 = Theme.key_chat_serviceIcon;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr, null, i2));
        if (this.multiPanelView != null) {
            arrayList.add(new ThemeDescription(this.multiPanelView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground));
        }
        Drawable[] drawableArr2 = {Theme.chat_msgInSpoilerDrawable};
        int i3 = Theme.key_chat_inInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr2, null, i3));
        Drawable[] drawableArr3 = {Theme.chat_msgOutSpoilerDrawable};
        int i4 = Theme.key_chat_outInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr3, null, i4));
        arrayList.add(new ThemeDescription(this.forwardSettingsHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintText));
        arrayList.add(new ThemeDescription(this.forwardSettingsHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to1));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to2));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to3));
        arrayList.add(new ThemeDescription(this.messagesSearchListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite));
        if (this.reportType < 0) {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultSubtitle));
        } else {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
            C3704ActionBar c3704ActionBar = this.actionBar;
            int i5 = ThemeDescription.FLAG_AB_ITEMSCOLOR;
            int i6 = Theme.key_actionBarActionModeDefaultIcon;
            arrayList.add(new ThemeDescription(c3704ActionBar, i5, null, null, null, null, i6));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, i6));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, i6));
        }
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuBackground));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItem));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItemIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault));
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer != null ? chatAvatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        SimpleTextView titleTextView = chatAvatarContainer2 != null ? chatAvatarContainer2.getTitleTextView() : null;
        int i7 = ThemeDescription.FLAG_IMAGECOLOR;
        int i8 = Theme.key_actionBarDefaultSubtitle;
        arrayList.add(new ThemeDescription(titleTextView, i7, null, null, null, null, i8));
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer3 != null ? chatAvatarContainer3.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_status, (Object) null));
        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer4 != null ? chatAvatarContainer4.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i8, (Object) null));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch));
        C3704ActionBar c3704ActionBar2 = this.actionBar;
        int i9 = ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER;
        int i10 = Theme.key_actionBarDefaultSearchPlaceholder;
        arrayList.add(new ThemeDescription(c3704ActionBar2, i9, null, null, null, null, i10));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, i10));
        C3704ActionBar c3704ActionBar3 = this.actionBar;
        int i11 = ThemeDescription.FLAG_AB_AM_ITEMSCOLOR;
        int i12 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(c3704ActionBar3, i11, null, null, null, null, i12));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
        arrayList.add(new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i12));
        ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer5 != null ? chatAvatarContainer5.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon));
        ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer6 != null ? chatAvatarContainer6.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink));
        Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
        Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
        Theme.MessageDrawable messageDrawable3 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
        Theme.MessageDrawable messageDrawable4 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
        Theme.MessageDrawable messageDrawable5 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
        Theme.MessageDrawable messageDrawable6 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{messageDrawable, messageDrawable2}, null, Theme.key_chat_inBubble));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{(Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected"), (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected")}, null, Theme.key_chat_inBubbleSelected));
        if (messageDrawable != null) {
            Drawable[] shadowDrawables = messageDrawable.getShadowDrawables();
            int i13 = Theme.key_chat_inBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables, null, i13));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable2.getShadowDrawables(), null, i13));
            Drawable[] shadowDrawables2 = messageDrawable3.getShadowDrawables();
            int i14 = Theme.key_chat_outBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables2, null, i14));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable4.getShadowDrawables(), null, i14));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubble));
        if (!this.themeDelegate.isThemeChangeAvailable(false)) {
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient1));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient2));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient3));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleGradientSelectedOverlay));
        Paint themedPaint = getThemedPaint("paintChatActionText");
        int i15 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, themedPaint, null, null, i15));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint("paintChatActionText"), null, null, Theme.key_chat_serviceLink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_botCardDrawable, getThemedDrawable("drawableShareIcon"), getThemedDrawable("drawableReplyIcon"), getThemedDrawable("drawableBotInline"), getThemedDrawable("drawableBotLink"), getThemedDrawable("drawable_botInvite"), getThemedDrawable("drawableGoIcon"), getThemedDrawable("drawableCommentSticker")}, null, i2));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkIn, (Object) null));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkOut, (Object) null));
        Drawable[] drawableArr4 = {Theme.chat_msgNoSoundDrawable};
        int i16 = Theme.key_chat_mediaTimeText;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr4, null, i16));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheck")}, null, Theme.key_chat_outSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckSelected")}, null, Theme.key_chat_outSentCheckSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckRead"), getThemedDrawable("drawableMsgOutHalfCheck")}, null, Theme.key_chat_outSentCheckRead));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckReadSelected"), getThemedDrawable("drawableMsgOutHalfCheckSelected")}, null, Theme.key_chat_outSentCheckReadSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgStickerHalfCheck"), getThemedDrawable("drawableMsgStickerCheck"), getThemedDrawable("drawableMsgStickerClock"), getThemedDrawable("drawableMsgStickerViews"), getThemedDrawable("drawableMsgStickerReplies"), getThemedDrawable("drawableMsgStickerPinned")}, null, i15));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViews"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinned")}, null, Theme.key_chat_outViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViewsSelected"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinnedSelected")}, null, Theme.key_chat_outViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable, Theme.chat_msgInRepliesDrawable, Theme.chat_msgInPinnedDrawable}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable, Theme.chat_msgInRepliesSelectedDrawable, Theme.chat_msgInPinnedSelectedDrawable}, null, Theme.key_chat_inViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable, Theme.chat_msgMediaRepliesDrawable, Theme.chat_msgMediaPinnedDrawable}, null, Theme.key_chat_mediaViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenu")}, null, Theme.key_chat_outMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenuSelected")}, null, Theme.key_chat_outMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutInstant")}, null, i4));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInInstantDrawable, Theme.chat_commentDrawable, Theme.chat_commentArrowDrawable}, null, i3));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudio"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i4));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudioSelected"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i4));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallDrawable, null, i3));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallSelectedDrawable, null, Theme.key_chat_inInstantSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable}, null, Theme.key_chat_outGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownRedDrawable}, null, Theme.key_fill_RedNormal));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_chat_inGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, themeDescriptionDelegate, Theme.key_chat_selectedBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatBotButton"), null, null, Theme.key_chat_botButtonText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatTimeBackground"), null, null, Theme.key_chat_mediaTimeBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText));
        int i17 = Theme.key_chat_inReplyLine;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i17));
        int i18 = Theme.key_chat_outReplyLine;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i18));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i16));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_outUrlPaint, null, null, i18));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, i17));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLocationBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[0]}, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[1]}, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[0]}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[1]}, null, Theme.key_chat_outViews));
        if (this.themeDelegate.isThemeChangeAvailable(false)) {
            i = 2;
        } else {
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, Theme.key_chats_unreadCounter));
            TextPaint[] textPaintArr = Theme.dialogs_namePaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr[0], textPaintArr[1], Theme.dialogs_searchNamePaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_name));
            TextPaint[] textPaintArr2 = Theme.dialogs_nameEncryptedPaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr2[0], textPaintArr2[1], Theme.dialogs_searchNameEncryptedPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_secretName));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, Theme.key_chats_secretIcon));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable, Theme.dialogs_fakeDrawable}, null, Theme.key_chats_draft));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint[1], null, null, Theme.key_chats_message_threeLines));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messageNamePaint, null, null, Theme.key_chats_nameMessage_threeLines));
            i = 2;
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_nameMessage));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_attachMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, Theme.dialogs_messagePrintingPaint, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_actionMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_timePaint, null, null, Theme.key_chats_date));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkDrawable}, null, Theme.key_chats_sentCheck));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkReadDrawable, Theme.dialogs_halfCheckDrawable}, null, Theme.key_chats_sentReadCheck));
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        Paint themedPaint2 = getThemedPaint("paintChatComposeBackground");
        int i19 = Theme.key_chat_messagePanelBackground;
        arrayList.add(new ThemeDescription(mentionsContainerView, 0, null, themedPaint2, null, null, i19));
        MentionsContainerView mentionsContainerView2 = this.mentionContainer;
        Drawable[] drawableArr5 = {Theme.chat_composeShadowDrawable};
        int i20 = Theme.key_chat_messagePanelShadow;
        arrayList.add(new ThemeDescription(mentionsContainerView2, 0, null, null, drawableArr5, null, i20));
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowRoundDrawable}, null, i19));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i19));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i20));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i19));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i20));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i19));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i20));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i19));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelText));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_CURSORCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCursor));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelHint));
        int i21 = Theme.key_chat_messagePanelSend;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, 24, null, i21));
        int i22 = Theme.key_chat_messagePanelIcons;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        int i23 = Theme.key_listSelector;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        int i24 = Theme.key_chat_recordedVoiceDot;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i24));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoTimelineView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        int i25 = Theme.key_chat_messagePanelVoicePressed;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_messagePanelVoiceLock));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceLockShadow));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordTime));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        int i26 = Theme.key_chat_recordVoiceCancel;
        arrayList.add(new ThemeDescription(chatActivityEnterView, 0, null, null, null, null, i26));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceDuration));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, i26));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressInner1));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressOuter1));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCancelInlineBot));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i23));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i24));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgress));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgressInner));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_emojiPanelNewTrending));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_recordedVoicePlayPause));
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView2 != null ? chatActivityEnterView2.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackground));
        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView3 != null ? chatActivityEnterView3.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelShadowLine));
        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView4 != null ? chatActivityEnterView4.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelEmptyText));
        ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView5 != null ? chatActivityEnterView5.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIcon));
        ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView6 != null ? chatActivityEnterView6.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIconSelected));
        ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView7 != null ? chatActivityEnterView7.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelector));
        ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView8 != null ? chatActivityEnterView8.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackspace));
        ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView9 != null ? chatActivityEnterView9.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingTitle));
        ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView10 != null ? chatActivityEnterView10.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingDescription));
        ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView11 != null ? chatActivityEnterView11.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiBottomPanelIcon));
        ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView12 != null ? chatActivityEnterView12.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiSearchIcon));
        ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView13 != null ? chatActivityEnterView13.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerSetNameHighlight));
        ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView14 != null ? chatActivityEnterView14.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelectorLine));
        ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
        if (chatActivityEnterView15 != null) {
            TrendingStickersAlert trendingStickersAlert = chatActivityEnterView15.getTrendingStickersAlert();
            if (trendingStickersAlert != null) {
                arrayList.addAll(trendingStickersAlert.getThemeDescriptions());
            }
            arrayList.add(new ThemeDescription((View) null, 0, (Class[]) null, (String[]) null, (Paint[]) null, new Drawable[]{this.chatActivityEnterView.getStickersArrowDrawable()}, (ThemeDescription.ThemeDescriptionDelegate) null, i22));
        }
        int i27 = 0;
        while (i27 < i) {
            UndoView undoView = i27 == 0 ? this.undoView : this.topUndoView;
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_undo_background));
            int i28 = Theme.key_undo_cancelColor;
            UndoView undoView2 = undoView;
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i28));
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i28));
            int i29 = Theme.key_undo_infoColor;
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i29));
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i29));
            arrayList.add(new ThemeDescription(undoView2, ThemeDescription.FLAG_LINKCOLOR, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i28));
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i29));
            arrayList.add(new ThemeDescription(undoView2, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i29));
            arrayList.add(new ThemeDescription(undoView2, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i29));
            i27++;
        }
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPlayPause));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerTitle));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPerformer));
        int i30 = Theme.key_inappPlayerClose;
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"subtitleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i30));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i30));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallText));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_topPanelLine));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_windowBackgroundWhite));
        arrayList.add(new ThemeDescription(this.pinnedCounterTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        for (int i31 = 0; i31 < i; i31++) {
            arrayList.add(new ThemeDescription(this.pinnedNameTextView[i31], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
            arrayList.add(new ThemeDescription(this.pinnedMessageTextView[i31], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        }
        arrayList.add(new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        arrayList.add(new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        ImageView imageView = this.closePinned;
        int i32 = ThemeDescription.FLAG_IMAGECOLOR;
        int i33 = Theme.key_chat_topPanelClose;
        arrayList.add(new ThemeDescription(imageView, i32, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.pinnedListButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i33));
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        int i34 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i35 = Theme.key_chat_topPanelBackground;
        arrayList.add(new ThemeDescription(blurredFrameLayout, i34, null, null, null, null, i35));
        arrayList.add(new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i35));
        arrayList.add(new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i35));
        TextView textView = this.addToContactsButton;
        int i36 = ThemeDescription.FLAG_TEXTCOLOR;
        int i37 = Theme.key_chat_addContact;
        arrayList.add(new ThemeDescription(textView, i36, null, null, null, null, i37));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_text_RedBold));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, i37));
        arrayList.add(new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine));
        SimpleTextView simpleTextView = this.replyNameTextView;
        int i38 = ThemeDescription.FLAG_TEXTCOLOR;
        int i39 = Theme.key_chat_replyPanelName;
        arrayList.add(new ThemeDescription(simpleTextView, i38, null, null, null, null, i39));
        SimpleTextView simpleTextView2 = this.replyObjectTextView;
        int i40 = ThemeDescription.FLAG_TEXTCOLOR;
        int i41 = Theme.key_windowBackgroundWhiteGrayText;
        arrayList.add(new ThemeDescription(simpleTextView2, i40, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.replyObjectHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons));
        arrayList.add(new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i39));
        ImageView imageView2 = this.searchUpButton;
        int i42 = ThemeDescription.FLAG_IMAGECOLOR;
        int i43 = Theme.key_chat_searchPanelIcons;
        arrayList.add(new ThemeDescription(imageView2, i42, null, null, null, null, i43));
        ImageView imageView3 = this.searchUpButton;
        int i44 = ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE;
        int i45 = Theme.key_actionBarActionModeDefaultSelector;
        arrayList.add(new ThemeDescription(imageView3, i44, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_searchPanelText));
        arrayList.add(new ThemeDescription(this.searchAsListTogglerView, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        TextView textView2 = this.replyButton;
        int i46 = ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR;
        int i47 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(textView2, i46, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText));
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        int i48 = Theme.key_chat_fieldOverlayText;
        arrayList.add(new ThemeDescription(unreadCounterTextView, 0, null, null, null, null, i48));
        UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
        int i49 = Theme.key_chat_goDownButtonCounterBackground;
        arrayList.add(new ThemeDescription(unreadCounterTextView2, 0, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_messagePanelBackground));
        arrayList.add(new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, i48));
        arrayList.add(new ThemeDescription(this.bottomOverlayImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i48));
        ChatBigEmptyView chatBigEmptyView = this.bigEmptyView;
        int i50 = ThemeDescription.FLAG_TEXTCOLOR;
        int i51 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(chatBigEmptyView, i50, null, null, null, null, i51));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i51));
        arrayList.add(new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, i51));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartBackground));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartArrowIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartText));
        View view = this.progressView2;
        int i52 = ThemeDescription.FLAG_SERVICEBACKGROUND;
        int i53 = Theme.key_chat_serviceBackground;
        arrayList.add(new ThemeDescription(view, i52, null, null, null, null, i53));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i53));
        arrayList.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i53));
        if (this.mentionContainer != null) {
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_botSwitchToInlineText));
            int i54 = Theme.key_windowBackgroundWhiteBlackText;
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteGrayText3));
            Drawable[] drawableArr6 = new Drawable[3];
            drawableArr6[0] = Theme.chat_inlineResultFile;
            drawableArr6[1] = Theme.chat_inlineResultAudio;
            drawableArr6[i] = Theme.chat_inlineResultLocation;
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, drawableArr6, null, Theme.key_chat_inlineResultIcon));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, i54));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider));
        }
        HintView hintView = this.gifHintTextView;
        int i55 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i56 = Theme.key_chat_gifSaveHintBackground;
        arrayList.add(new ThemeDescription(hintView, i55, null, null, null, null, i56));
        HintView hintView2 = this.gifHintTextView;
        int i57 = ThemeDescription.FLAG_TEXTCOLOR;
        int i58 = Theme.key_chat_gifSaveHintText;
        arrayList.add(new ThemeDescription(hintView2, i57, null, null, null, null, i58));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i58));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i58));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i56));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i58));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i56));
        arrayList.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i49));
        CounterView counterView = this.pagedownButtonCounter;
        int i59 = ThemeDescription.FLAG_TEXTCOLOR;
        int i60 = Theme.key_chat_goDownButtonCounter;
        arrayList.add(new ThemeDescription(counterView, i59, null, null, null, null, i60));
        ImageView imageView4 = this.pagedownButtonImage;
        int i61 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i62 = Theme.key_chat_goDownButton;
        arrayList.add(new ThemeDescription(imageView4, i61, null, null, null, null, i62));
        ImageView imageView5 = this.pagedownButtonImage;
        int i63 = ThemeDescription.FLAG_IMAGECOLOR;
        int i64 = Theme.key_chat_goDownButtonIcon;
        arrayList.add(new ThemeDescription(imageView5, i63, null, null, null, null, i64));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i60));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i62));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i64));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i51));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i53));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i51));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i53));
        int i65 = Theme.key_chat_attachIcon;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i65));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollText));
        arrayList.add(new ThemeDescription(null, 0, null, null, new Drawable[]{Theme.chat_attachEmptyDrawable}, null, Theme.key_chat_attachEmptyImage));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPhotoBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogTextGray2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogScrollGlow));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogGrayLine));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogCameraIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogButtonSelector));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteLinkSelection));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_TextSelectionCursor));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient3));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonText));
        int i66 = Theme.key_chat_inReactionButtonTextSelected;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i66));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i66));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_BlurAlpha));
        ChatActivityEnterView chatActivityEnterView16 = this.chatActivityEnterView;
        if (chatActivityEnterView16 != null && chatActivityEnterView16.botCommandsMenuContainer != null) {
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"description"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteBlackText));
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"command"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i41));
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        if (chatActivityMemberRequestsDelegate != null) {
            chatActivityMemberRequestsDelegate.fillThemeDescriptions(arrayList);
        }
        Iterator<ThemeDescription> it = arrayList.iterator();
        while (it.hasNext()) {
            it.next().resourcesProvider = this.themeDelegate;
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getThemeDescriptions$350() {
        PinnedPlayerView pinnedPlayerView = this.pinnedPlayerView;
        if (pinnedPlayerView != null) {
            pinnedPlayerView.updateColors();
        }
        BlurredLinearLayout blurredLinearLayout = this.multiPanelView;
        int i = 0;
        if (blurredLinearLayout != null) {
            int childCount = blurredLinearLayout.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                FrameLayout frameLayout = (FrameLayout) this.multiPanelView.getChildAt(i2);
                ((ImageView) frameLayout.getChildAt(0)).setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.SRC_IN));
                frameLayout.setBackground(Theme.getSelectorDrawable(false));
            }
        }
        FormattingMessagesWeb formattingMessagesWeb = this.formattingMessagesWeb;
        if (formattingMessagesWeb != null) {
            formattingMessagesWeb.updateColors();
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateColors();
        }
        Theme.refreshAttachButtonsColors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.checkColors();
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount2 = recyclerListView.getChildCount();
            for (int i3 = 0; i3 < childCount2; i3++) {
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    ((ChatMessageCell) childAt).createSelectorDrawable(0);
                } else if (childAt instanceof ChatActionCell) {
                    ((ChatActionCell) childAt).setInvalidateColors(true);
                }
            }
        }
        RecyclerListView recyclerListView2 = this.messagesSearchListView;
        if (recyclerListView2 != null) {
            int childCount3 = recyclerListView2.getChildCount();
            for (int i4 = 0; i4 < childCount3; i4++) {
                View childAt2 = this.messagesSearchListView.getChildAt(i4);
                if (childAt2 instanceof DialogCell) {
                    ((DialogCell) childAt2).update(0);
                }
            }
        }
        if (this.scrimPopupWindowItems != null) {
            while (true) {
                ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
                if (i >= actionBarMenuSubItemArr.length) {
                    break;
                }
                if (actionBarMenuSubItemArr[i] != null) {
                    actionBarMenuSubItemArr[i].setColors(getThemedColor(Theme.key_actionBarDefaultSubmenuItem), getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon));
                    this.scrimPopupWindowItems[i].setSelectorColor(getThemedColor(Theme.key_dialogButtonSelector));
                }
                i++;
            }
        }
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            View contentView = actionBarPopupWindow.getContentView();
            contentView.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
            contentView.invalidate();
        }
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView != null) {
            instantCameraView.invalidateBlur();
        }
        PinnedLineView pinnedLineView = this.pinnedLineView;
        if (pinnedLineView != null) {
            pinnedLineView.updateColors();
        }
        ChatActivityEnterTopView chatActivityEnterTopView = this.chatActivityEnterTopView;
        if (chatActivityEnterTopView != null && chatActivityEnterTopView.getEditView() != null) {
            this.chatActivityEnterTopView.getEditView().updateColors();
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem != null) {
            actionBarMenuItem.updateColor();
        }
        setNavigationBarColor(getThemedColor(Theme.key_windowBackgroundGray));
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.updateColors();
        }
        BlurredLinearLayout blurredLinearLayout2 = this.multiPanelView;
        if (blurredLinearLayout2 != null) {
            blurredLinearLayout2.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidateBlurredViews();
            this.contentView.invalidateBackground();
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        if (chatAvatarContainer2 != null && chatAvatarContainer2.getTimeItem() != null) {
            this.avatarContainer.getTimeItem().invalidate();
        }
        TranslateButton translateButton = this.translateButton;
        if (translateButton != null) {
            translateButton.updateColors();
        }
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public ChatAvatarContainer getAvatarContainer() {
        return this.avatarContainer;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public AnimatorSet onCustomTransitionAnimation(boolean z, Runnable runnable) {
        ValueAnimator ofFloat;
        float f = BitmapDescriptorFactory.HUE_RED;
        if (z && this.fromPullingDownTransition && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if (baseFragment instanceof ChatActivity) {
                this.wasManualScroll = true;
                final ChatActivity chatActivity = (ChatActivity) baseFragment;
                chatActivity.setTransitionToChatActivity(this);
                this.fragmentView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.chatListView.setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.contentView.setSkipBackgroundDrawing(true);
                this.avatarContainer.setTranslationY(AndroidUtilities.m107dp(8));
                this.avatarContainer.getAvatarImageView().setAlpha(BitmapDescriptorFactory.HUE_RED);
                this.avatarContainer.getAvatarImageView().setTranslationY(-AndroidUtilities.m107dp(8));
                this.toPullingDownTransition = true;
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f);
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                FrameLayout frameLayout = this.bottomOverlay;
                if (frameLayout != null) {
                    frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                int measuredHeight = chatActivityEnterView2 == null ? 0 : chatActivityEnterView2.getMeasuredHeight();
                FrameLayout frameLayout2 = this.bottomOverlay;
                int max = Math.max(measuredHeight, frameLayout2 == null ? 0 : frameLayout2.getMeasuredHeight());
                ChatActivityEnterView chatActivityEnterView3 = chatActivity.chatActivityEnterView;
                int measuredHeight2 = chatActivityEnterView3 == null ? 0 : chatActivityEnterView3.getMeasuredHeight();
                FrameLayout frameLayout3 = this.bottomOverlay;
                this.pullingBottomOffset = -(Math.max(measuredHeight2, frameLayout3 == null ? 0 : frameLayout3.getMeasuredHeight()) - max);
                final boolean z2 = chatActivity.fragmentContextView.getMeasuredHeight() != this.fragmentContextView.getMeasuredHeight();
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda20
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.this.lambda$onCustomTransitionAnimation$351(chatActivity, z2, valueAnimator);
                    }
                });
                updateChatListViewTopPadding();
                AnimatorSet animatorSet = new AnimatorSet();
                this.fragmentTransition = animatorSet;
                animatorSet.addListener(new AnonymousClass142(chatActivity, runnable));
                this.fragmentTransition.setDuration(300L);
                this.fragmentTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
                this.fragmentTransition.playTogether(ofFloat2);
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
                return this.fragmentTransition;
            }
        }
        if (!this.switchFromTopics || getParentLayout() == null || getParentLayout().getFragmentStack().size() <= 1 || !(getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2) instanceof TopicsFragment)) {
            return null;
        }
        float[] fArr = {1.0f, BitmapDescriptorFactory.HUE_RED};
        if (z) {
            // fill-array-data instruction
            fArr[0] = 0.0f;
            fArr[1] = 1.0f;
            ofFloat = ValueAnimator.ofFloat(fArr);
        } else {
            ofFloat = ValueAnimator.ofFloat(fArr);
        }
        if (!z) {
            f = 1.0f;
        }
        this.switchingFromTopicsProgress = f;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity.143
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.this.switchingFromTopicsProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                ChatActivity.this.contentView.invalidate();
            }
        });
        this.switchingFromTopics = true;
        this.actionBar.invalidate();
        this.contentView.invalidate();
        AnimatorSet animatorSet2 = new AnimatorSet();
        this.fragmentTransition = animatorSet2;
        animatorSet2.addListener(new AnonymousClass144(z, runnable));
        this.fragmentTransition.setDuration(150L);
        this.fragmentTransition.playTogether(ofFloat);
        if (z) {
            AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
        } else {
            this.fragmentTransition.start();
        }
        return this.fragmentTransition;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onCustomTransitionAnimation$351(ChatActivity chatActivity, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        chatActivity.setTransitionToChatProgress(floatValue);
        float f = 1.0f - floatValue;
        float m107dp = AndroidUtilities.m107dp(8) * f;
        this.avatarContainer.setTranslationY(m107dp);
        this.avatarContainer.getAvatarImageView().setTranslationY(-m107dp);
        float f2 = (-AndroidUtilities.m107dp(8)) * floatValue;
        chatActivity.avatarContainer.setTranslationY(f2);
        chatActivity.avatarContainer.getAvatarImageView().setTranslationY(-f2);
        float f3 = (floatValue * 0.2f) + 0.8f;
        this.avatarContainer.getAvatarImageView().setScaleX(f3);
        this.avatarContainer.getAvatarImageView().setScaleY(f3);
        this.avatarContainer.getAvatarImageView().setAlpha(floatValue);
        float f4 = (0.2f * f) + 0.8f;
        chatActivity.avatarContainer.getAvatarImageView().setScaleX(f4);
        chatActivity.avatarContainer.getAvatarImageView().setScaleY(f4);
        chatActivity.avatarContainer.getAvatarImageView().setAlpha(f);
        ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        FrameLayout frameLayout = chatActivity.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        if (z) {
            chatActivity.fragmentContextView.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout = chatActivity.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout2 = chatActivity.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.setAlpha(f);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$142  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass142 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ ChatActivity val$previousChat;

        AnonymousClass142(ChatActivity chatActivity, Runnable runnable) {
            this.val$previousChat = chatActivity;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$142$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass142.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            super.onAnimationEnd(animator);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.contentView.setSkipBackgroundDrawing(false);
            ChatActivity.this.toPullingDownTransition = false;
            this.val$previousChat.setTransitionToChatProgress(BitmapDescriptorFactory.HUE_RED);
            this.val$previousChat.setTransitionToChatActivity(null);
            ChatActivity.this.fragmentView.setAlpha(1.0f);
            ChatActivity.this.chatListView.setAlpha(1.0f);
            this.val$previousChat.chatListView.setPadding(0, ChatActivity.this.chatListView.getPaddingTop(), 0, AndroidUtilities.m107dp(3) + ChatActivity.this.blurredViewBottomOffset);
            this.val$callback.run();
            ChatActivity.this.avatarContainer.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            this.val$previousChat.avatarContainer.setTranslationY(BitmapDescriptorFactory.HUE_RED);
            this.val$previousChat.avatarContainer.getAvatarImageView().setTranslationY(BitmapDescriptorFactory.HUE_RED);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            if (this.val$previousChat.pinnedMessageView != null) {
                this.val$previousChat.pinnedMessageView.setAlpha(1.0f);
            }
            if (this.val$previousChat.topChatPanelView != null) {
                this.val$previousChat.topChatPanelView.setAlpha(1.0f);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$144  reason: invalid class name */
    /* loaded from: classes5.dex */
    public class AnonymousClass144 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ boolean val$isOpen;

        AnonymousClass144(boolean z, Runnable runnable) {
            this.val$isOpen = z;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            if (this.val$isOpen) {
                ChatActivity.this.switchingFromTopics = false;
            }
            ((BaseFragment) ChatActivity.this).actionBar.invalidate();
            ChatActivity.this.contentView.invalidate();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$144$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass144.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            this.val$callback.run();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatActivity(ChatActivity chatActivity) {
        this.pullingDownAnimateToActivity = chatActivity;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatProgress(float f) {
        this.pullingDownAnimateProgress = f;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChatThemeBottomSheet() {
        if (!SharedConfig.isChatThemesEnabled) {
            AlertsCreator.showConfirmationDialog(this, getParentActivity(), null, LocaleController.getInternalString(C3632R.string.configure_chat_themes_option_alert), LocaleController.getString("Enable", C3632R.string.Enable), false, this.themeDelegate, new Callbacks$Callback1() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda144
                @Override // com.iMe.fork.utils.Callbacks$Callback1
                public final void invoke(Object obj) {
                    ChatActivity.this.lambda$showChatThemeBottomSheet$352((Boolean) obj);
                }
            });
        } else if (this.currentChat != null) {
            presentFragment(new ChannelColorActivity(getDialogId()).setOnApplied(this));
        } else {
            this.chatThemeBottomSheet = new ChatThemeBottomSheet(this, this.themeDelegate);
            this.chatListView.setOnInterceptTouchListener(new RecyclerListView.OnInterceptTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda353
                @Override // org.telegram.p043ui.Components.RecyclerListView.OnInterceptTouchListener
                public final boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                    boolean lambda$showChatThemeBottomSheet$353;
                    lambda$showChatThemeBottomSheet$353 = ChatActivity.lambda$showChatThemeBottomSheet$353(motionEvent);
                    return lambda$showChatThemeBottomSheet$353;
                }
            });
            setChildrenEnabled(this.contentView, false);
            showDialog(this.chatThemeBottomSheet, new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda61
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$showChatThemeBottomSheet$354(dialogInterface);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showChatThemeBottomSheet$352(Boolean bool) {
        if (!SharedConfig.hasPreferenceKey(TelegramPreferenceKeys.Global.isChatThemesEnabled())) {
            Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getInternalString(C3632R.string.configure_chat_themes_option_toast), 0).show();
        }
        if (bool.booleanValue()) {
            SharedConfig.setChatThemesEnabled(true);
            checkThemeEmoticonOrWallpaper();
            showChatThemeBottomSheet();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showChatThemeBottomSheet$354(DialogInterface dialogInterface) {
        this.chatThemeBottomSheet = null;
        this.chatListView.setOnInterceptTouchListener(null);
        setChildrenEnabled(this.contentView, true);
        ChatThemeController.getInstance(this.currentAccount).clearWallpaperThumbImages();
    }

    private void setChildrenEnabled(View view, boolean z) {
        if (view instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) view;
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                setChildrenEnabled(viewGroup.getChildAt(i), z);
            }
        }
        if (view == this.chatListView || view == this.contentView) {
            return;
        }
        view.setEnabled(z);
    }

    private void checkThemeEmoticonOrWallpaper() {
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda210
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkThemeEmoticonOrWallpaper$355();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkThemeEmoticonOrWallpaper$355() {
        TLRPC$UserFull tLRPC$UserFull = this.userInfo;
        setChatThemeEmoticon(tLRPC$UserFull != null ? tLRPC$UserFull.theme_emoticon : null);
    }

    private void setChatThemeEmoticon(String str) {
        if (this.themeDelegate == null) {
            return;
        }
        ChatThemeController chatThemeController = ChatThemeController.getInstance(this.currentAccount);
        chatThemeController.setDialogTheme(this.dialog_id, str, false);
        if (!TextUtils.isEmpty(str)) {
            chatThemeController.requestChatTheme(str, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda337
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.this.lambda$setChatThemeEmoticon$356((EmojiThemes) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC$TL_error tLRPC$TL_error) {
                    ResultCallback.CC.$default$onError(this, tLRPC$TL_error);
                }
            });
        }
        TLRPC$WallPaper dialogWallpaper = chatThemeController.getDialogWallpaper(this.dialog_id);
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(themeDelegate.chatTheme, dialogWallpaper, this.openAnimationStartTime != 0, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChatThemeEmoticon$356(EmojiThemes emojiThemes) {
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(emojiThemes, themeDelegate.wallpaper, this.openAnimationStartTime != 0, null);
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public Drawable getThemedDrawable(String str) {
        Drawable drawable = this.themeDelegate.getDrawable(str);
        return drawable != null ? drawable : super.getThemedDrawable(str);
    }

    public Paint getThemedPaint(String str) {
        Paint paint = this.themeDelegate.getPaint(str);
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public float getChatListViewPadding() {
        return this.chatListViewPaddingTop;
    }

    public FragmentContextView getFragmentContextView() {
        return this.fragmentContextView;
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public Theme.ResourcesProvider getResourceProvider() {
        return this.themeDelegate;
    }

    /* renamed from: org.telegram.ui.ChatActivity$ThemeDelegate */
    /* loaded from: classes5.dex */
    public class ThemeDelegate implements Theme.ResourcesProvider, MessagePreviewView.ResourcesDelegate {
        private SparseIntArray animatingColors;
        Theme.MessageDrawable animatingMessageDrawable;
        Theme.MessageDrawable animatingMessageMediaDrawable;
        private Drawable backgroundDrawable;
        private List<EmojiThemes> cachedThemes;
        private EmojiThemes chatTheme;
        int currentServiceColor;
        boolean drawSelectedGradient;
        boolean drawServiceGradient;
        private AnimatorSet patternAlphaAnimator;
        private ValueAnimator patternIntensityAnimator;
        private Bitmap serviceBitmap;
        private Bitmap serviceBitmapSource;
        private Canvas serviceCanvas;
        private BitmapShader serviceShader;
        private BitmapShader serviceShaderSource;
        Bitmap startServiceBitmap;
        int startServiceButtonColor;
        int startServiceColor;
        int startServiceIconColor;
        int startServiceLinkColor;
        int startServiceTextColor;
        private boolean useSourceShader;
        private TLRPC$WallPaper wallpaper;
        private final HashMap<String, Drawable> currentDrawables = new HashMap<>();
        private final HashMap<String, Paint> currentPaints = new HashMap<>();
        private final Matrix actionMatrix = new Matrix();
        private SparseIntArray currentColors = new SparseIntArray();
        private Paint paint = new Paint();
        final Rect src = new Rect();
        final Rect dst = new Rect();
        private boolean isDark = Theme.getActiveTheme().isDark();

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
            return Theme.ResourcesProvider.CC.$default$getAnimatedEmojiColorFilter(this);
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ int getColorOrDefault(int i) {
            return getColor(i);
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ boolean isDark() {
            boolean isCurrentThemeDark;
            isCurrentThemeDark = Theme.isCurrentThemeDark();
            return isCurrentThemeDark;
        }

        static /* synthetic */ TLRPC$WallPaper access$43800(ThemeDelegate themeDelegate) {
            return themeDelegate.wallpaper;
        }

        static /* synthetic */ EmojiThemes access$44800(ThemeDelegate themeDelegate) {
            return themeDelegate.chatTheme;
        }

        ThemeDelegate() {
            boolean z = false;
            if (isThemeChangeAvailable(false) && SharedConfig.isChatThemesEnabled) {
                this.chatTheme = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogTheme(ChatActivity.this.dialog_id);
                TLRPC$WallPaper dialogWallpaper = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogWallpaper(ChatActivity.this.dialog_id);
                this.wallpaper = dialogWallpaper;
                EmojiThemes emojiThemes = this.chatTheme;
                if (emojiThemes != null || dialogWallpaper != null) {
                    setupChatTheme(emojiThemes, dialogWallpaper, false, true);
                    z = true;
                }
            }
            if (!z && ThemeEditorView.getInstance() == null) {
                Theme.refreshThemeColors(true, true);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda6
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.lambda$new$0();
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0() {
            NotificationCenter globalInstance = NotificationCenter.getGlobalInstance();
            int i = NotificationCenter.didSetNewTheme;
            Boolean bool = Boolean.TRUE;
            globalInstance.lambda$postNotificationNameOnUIThread$1(i, Boolean.FALSE, bool, bool);
        }

        public List<EmojiThemes> getCachedThemes() {
            return this.cachedThemes;
        }

        public void setCachedThemes(List<EmojiThemes> list) {
            this.cachedThemes = list;
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public int getColor(int i) {
            int indexOfKey;
            int indexOfKey2;
            SparseIntArray sparseIntArray = this.animatingColors;
            if (sparseIntArray != null && (indexOfKey2 = sparseIntArray.indexOfKey(i)) >= 0) {
                return this.animatingColors.valueAt(indexOfKey2);
            }
            if (this.chatTheme == null) {
                return Theme.getColor(i);
            }
            int indexOfKey3 = this.currentColors.indexOfKey(i);
            if (indexOfKey3 >= 0) {
                return this.currentColors.valueAt(indexOfKey3);
            }
            int fallbackKey = Theme.getFallbackKey(i);
            if (fallbackKey >= 0 && (indexOfKey = this.currentColors.indexOfKey(fallbackKey)) >= 0) {
                return this.currentColors.valueAt(indexOfKey);
            }
            return Theme.getColor(i);
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public int getCurrentColor(int i) {
            return getCurrentColor(i, false);
        }

        public int getCurrentColor(int i, boolean z) {
            int indexOfKey;
            SparseIntArray sparseIntArray;
            int indexOfKey2;
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return Theme.getColor(i);
            }
            if (!z && (sparseIntArray = this.animatingColors) != null && (indexOfKey2 = sparseIntArray.indexOfKey(i)) >= 0) {
                return this.animatingColors.valueAt(indexOfKey2);
            }
            SparseIntArray sparseIntArray2 = this.currentColors;
            if (sparseIntArray2 != null && (indexOfKey = sparseIntArray2.indexOfKey(i)) >= 0) {
                return this.currentColors.valueAt(indexOfKey);
            }
            return Theme.getColor(i);
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public void setAnimatedColor(int i, int i2) {
            SparseIntArray sparseIntArray = this.animatingColors;
            if (sparseIntArray != null) {
                sparseIntArray.put(i, i2);
            }
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            if (this.backgroundDrawable == null || (bitmap = this.serviceBitmap) == null || (bitmapShader = this.serviceShader) == null) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            } else if (this.useSourceShader) {
                Theme.applyServiceShaderMatrix(this.serviceBitmapSource, this.serviceShaderSource, this.actionMatrix, i, i2, f, f2);
            } else {
                Theme.applyServiceShaderMatrix(bitmap, bitmapShader, this.actionMatrix, i, i2, f, f2);
            }
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public boolean hasGradientService() {
            return this.backgroundDrawable != null ? this.serviceShader != null : Theme.hasGradientService();
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public Drawable getDrawable(String str) {
            if (this.currentDrawables.isEmpty()) {
                return null;
            }
            return this.currentDrawables.get(str);
        }

        @Override // org.telegram.p043ui.ActionBar.Theme.ResourcesProvider
        public Paint getPaint(String str) {
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return null;
            }
            return this.currentPaints.get(str);
        }

        public boolean isThemeChangeAvailable(boolean z) {
            TLRPC$User tLRPC$User;
            ChatActivity chatActivity = ChatActivity.this;
            return chatActivity.currentEncryptedChat == null && !(z && (chatActivity.currentChat != null || (tLRPC$User = chatActivity.currentUser) == null || tLRPC$User.bot));
        }

        public EmojiThemes getCurrentTheme() {
            return this.chatTheme;
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView.ResourcesDelegate
        public Drawable getWallpaperDrawable() {
            Drawable drawable = this.backgroundDrawable;
            return drawable != null ? drawable : Theme.getCachedWallpaperNonBlocking();
        }

        @Override // org.telegram.p043ui.Components.MessagePreviewView.ResourcesDelegate
        public boolean isWallpaperMotion() {
            if (this.chatTheme != null) {
                return false;
            }
            return Theme.isWallpaperMotion();
        }

        public void setCurrentTheme(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z, Boolean bool) {
            setCurrentTheme(emojiThemes, tLRPC$WallPaper, z, bool, false);
        }

        public void setCurrentTheme(final EmojiThemes emojiThemes, final TLRPC$WallPaper tLRPC$WallPaper, final boolean z, Boolean bool, boolean z2) {
            if (((BaseFragment) ChatActivity.this).parentLayout != null && SharedConfig.isChatThemesEnabled) {
                boolean booleanValue = bool != null ? bool.booleanValue() : this.isDark;
                String emoticon = emojiThemes != null ? emojiThemes.getEmoticon() : null;
                EmojiThemes emojiThemes2 = this.chatTheme;
                String emoticon2 = emojiThemes2 != null ? emojiThemes2.getEmoticon() : null;
                TLRPC$WallPaper tLRPC$WallPaper2 = this.wallpaper;
                if (!z2) {
                    if (!isThemeChangeAvailable(false)) {
                        return;
                    }
                    if (TextUtils.equals(emoticon2, emoticon) && this.isDark == booleanValue && ChatThemeController.equals(tLRPC$WallPaper, tLRPC$WallPaper2)) {
                        return;
                    }
                }
                this.isDark = booleanValue;
                Theme.ThemeInfo currentNightTheme = booleanValue ? Theme.getCurrentNightTheme() : Theme.getCurrentTheme();
                INavigationLayout.ThemeAnimationSettings themeAnimationSettings = new INavigationLayout.ThemeAnimationSettings(currentNightTheme, currentNightTheme.currentAccentId, currentNightTheme.isDark(), !z);
                if (this.chatTheme == null && this.wallpaper == null) {
                    Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                    this.drawServiceGradient = cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable;
                    initServiceMessageColors(cachedWallpaperNonBlocking);
                    this.startServiceTextColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceText);
                    this.startServiceLinkColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                    this.startServiceButtonColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                    this.startServiceIconColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceIcon);
                } else {
                    if (this.drawServiceGradient) {
                        Drawable drawable = this.backgroundDrawable;
                        if (drawable instanceof MotionBackgroundDrawable) {
                            this.startServiceBitmap = ((MotionBackgroundDrawable) drawable).getBitmap();
                        }
                    }
                    Drawable drawable2 = this.backgroundDrawable;
                    if (drawable2 != null) {
                        initServiceMessageColors(drawable2);
                    }
                }
                this.startServiceColor = this.currentServiceColor;
                this.startServiceTextColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
                this.startServiceLinkColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
                this.startServiceButtonColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
                this.startServiceIconColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
                if (emojiThemes != null || tLRPC$WallPaper != null) {
                    int i = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                    initDrawables();
                    initPaints();
                }
                themeAnimationSettings.applyTheme = false;
                if (ChatActivity.this.dialog_id < 0) {
                    themeAnimationSettings.applyTrulyTheme = false;
                }
                themeAnimationSettings.afterStartDescriptionsAddedRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$1(emojiThemes, tLRPC$WallPaper, z);
                    }
                };
                if (z) {
                    themeAnimationSettings.animationProgress = new INavigationLayout.ThemeAnimationSettings.onAnimationProgress() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.1
                        @Override // org.telegram.p043ui.ActionBar.INavigationLayout.ThemeAnimationSettings.onAnimationProgress
                        public void setProgress(float f) {
                            ChatActivity.this.chatListView.invalidate();
                            ThemeDelegate themeDelegate = ThemeDelegate.this;
                            themeDelegate.animatingMessageDrawable.crossfadeProgress = f;
                            themeDelegate.animatingMessageMediaDrawable.crossfadeProgress = f;
                            themeDelegate.updateServiceMessageColor(f);
                        }
                    };
                    themeAnimationSettings.beforeAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda4
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$2();
                        }
                    };
                    themeAnimationSettings.afterAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda3
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$3();
                        }
                    };
                } else {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.contentView != null) {
                        chatActivity.updateBackground();
                    }
                    themeAnimationSettings.afterStartDescriptionsAddedRunnable.run();
                }
                themeAnimationSettings.onlyTopFragment = true;
                themeAnimationSettings.resourcesProvider = this;
                themeAnimationSettings.duration = 250L;
                ((BaseFragment) ChatActivity.this).parentLayout.animateThemedValues(themeAnimationSettings, null);
                Runnable runnable = ChatActivity.this.onThemeChange;
                if (runnable != null) {
                    runnable.run();
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$1(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z) {
            setupChatTheme(emojiThemes, tLRPC$WallPaper, z, true);
            initServiceMessageColors(this.backgroundDrawable);
            ChatActivity.this.contentView.invalidateBackground();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$2() {
            this.animatingColors = new SparseIntArray();
            Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOut");
            this.animatingMessageDrawable = messageDrawable;
            messageDrawable.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutStart();
            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOutMedia");
            this.animatingMessageMediaDrawable = messageDrawable2;
            messageDrawable2.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutMediaStart();
            this.animatingMessageDrawable.crossfadeProgress = BitmapDescriptorFactory.HUE_RED;
            this.animatingMessageMediaDrawable.crossfadeProgress = BitmapDescriptorFactory.HUE_RED;
            ChatActivity.this.updateMessagesVisiblePart(false);
            updateServiceMessageColor(BitmapDescriptorFactory.HUE_RED);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$3() {
            this.animatingMessageDrawable.crossfadeFromDrawable = null;
            this.animatingMessageMediaDrawable.crossfadeFromDrawable = null;
            this.animatingColors = null;
            updateServiceMessageColor(1.0f);
        }

        private void setupChatTheme(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z, boolean z2) {
            Theme.ThemeInfo theme;
            Theme.ThemeInfo theme2;
            this.chatTheme = emojiThemes;
            this.wallpaper = tLRPC$WallPaper;
            View view = ChatActivity.this.fragmentView;
            Drawable backgroundImage = view != null ? ((SizeNotifierFrameLayout) view).getBackgroundImage() : null;
            final MotionBackgroundDrawable motionBackgroundDrawable = backgroundImage instanceof MotionBackgroundDrawable ? (MotionBackgroundDrawable) backgroundImage : null;
            int phase = motionBackgroundDrawable != null ? motionBackgroundDrawable.getPhase() : 0;
            if ((emojiThemes == null || emojiThemes.showAsDefaultStub) && tLRPC$WallPaper == null) {
                Theme.getServiceMessageColor();
            }
            String str = "Dark Blue";
            String str2 = "Blue";
            if (emojiThemes == null && tLRPC$WallPaper == null) {
                this.currentColors = new SparseIntArray();
                this.currentPaints.clear();
                this.currentDrawables.clear();
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                if (cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable) {
                    ((MotionBackgroundDrawable) cachedWallpaperNonBlocking).setPhase(phase);
                }
                this.backgroundDrawable = null;
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme2 = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string = sharedPreferences.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string) != null && !Theme.getTheme(string).isDark()) {
                        str2 = string;
                    }
                    String string2 = sharedPreferences.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string2) != null && Theme.getTheme(string2).isDark()) {
                        str = string2;
                    }
                    theme2 = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme2, false, this.isDark);
                initServiceMessageColors(this.backgroundDrawable);
                return;
            }
            if (ApplicationLoader.applicationContext != null) {
                Theme.createChatResources(ApplicationLoader.applicationContext, false);
            }
            if (emojiThemes != null) {
                this.currentColors = emojiThemes.createColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0);
            } else {
                this.currentColors = new SparseIntArray();
            }
            if (!TextUtils.isEmpty(ChatThemeController.getWallpaperEmoticon(this.wallpaper))) {
                this.backgroundDrawable = PreviewView.getBackgroundDrawable(this.backgroundDrawable, ((BaseFragment) ChatActivity.this).currentAccount, this.wallpaper, this.isDark);
            } else if (tLRPC$WallPaper != null) {
                this.backgroundDrawable = ChatBackgroundDrawable.getOrCreate(this.backgroundDrawable, tLRPC$WallPaper, this.isDark);
            } else {
                this.backgroundDrawable = getBackgroundDrawableFromTheme(emojiThemes, phase);
            }
            AnimatorSet animatorSet = this.patternAlphaAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            if (z) {
                this.patternAlphaAnimator = new AnimatorSet();
                if (motionBackgroundDrawable != null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, BitmapDescriptorFactory.HUE_RED);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$4(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat.setDuration(200L);
                    this.patternAlphaAnimator.playTogether(ofFloat);
                }
                Drawable drawable = this.backgroundDrawable;
                if (drawable instanceof MotionBackgroundDrawable) {
                    final MotionBackgroundDrawable motionBackgroundDrawable2 = (MotionBackgroundDrawable) drawable;
                    motionBackgroundDrawable2.setPatternAlpha(BitmapDescriptorFactory.HUE_RED);
                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f);
                    ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda1
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$5(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat2.addListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.3
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable2.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat2.setDuration(250L);
                    this.patternAlphaAnimator.playTogether(ofFloat2);
                }
                this.patternAlphaAnimator.start();
            }
            if (emojiThemes == null && ChatActivity.this.dialog_id >= 0) {
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences2 = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string3 = sharedPreferences2.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string3) != null && !Theme.getTheme(string3).isDark()) {
                        str2 = string3;
                    }
                    String string4 = sharedPreferences2.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string4) != null && Theme.getTheme(string4).isDark()) {
                        str = string4;
                    }
                    theme = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme, false, this.isDark);
            }
            if (z2) {
                int i = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
                initServiceMessageColors(this.backgroundDrawable);
                updateServiceMessageColor(1.0f);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$4(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$5(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        private void initDrawables() {
            Drawable messageDrawable;
            int themeDrawableColorKey;
            for (Map.Entry<String, Drawable> entry : Theme.getThemeDrawablesMap().entrySet()) {
                String key = entry.getKey();
                key.hashCode();
                char c = 65535;
                switch (key.hashCode()) {
                    case -2061232504:
                        if (key.equals("drawableMsgIn")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -2005320132:
                        if (key.equals("drawableMsgInMedia")) {
                            c = 1;
                            break;
                        }
                        break;
                    case -1656383241:
                        if (key.equals("drawableMsgInMediaSelected")) {
                            c = 2;
                            break;
                        }
                        break;
                    case -1451465639:
                        if (key.equals("drawableMsgOutMedia")) {
                            c = 3;
                            break;
                        }
                        break;
                    case -1084641786:
                        if (key.equals("drawableMsgOutSelected")) {
                            c = 4;
                            break;
                        }
                        break;
                    case -8170988:
                        if (key.equals("drawableMsgOutMediaSelected")) {
                            c = 5;
                            break;
                        }
                        break;
                    case 300508483:
                        if (key.equals("drawableMsgInSelected")) {
                            c = 6;
                            break;
                        }
                        break;
                    case 526307915:
                        if (key.equals("drawableMsgOut")) {
                            c = 7;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        messageDrawable = new Theme.MessageDrawable(0, false, false, this);
                        break;
                    case 1:
                        messageDrawable = new Theme.MessageDrawable(1, false, false, this);
                        break;
                    case 2:
                        messageDrawable = new Theme.MessageDrawable(1, false, true, this);
                        break;
                    case 3:
                        messageDrawable = new Theme.MessageDrawable(1, true, false, this);
                        break;
                    case 4:
                        messageDrawable = new Theme.MessageDrawable(0, true, true, this);
                        break;
                    case 5:
                        messageDrawable = new Theme.MessageDrawable(1, true, true, this);
                        break;
                    case 6:
                        messageDrawable = new Theme.MessageDrawable(0, false, true, this);
                        break;
                    case 7:
                        messageDrawable = new Theme.MessageDrawable(0, true, false, this);
                        break;
                    default:
                        Drawable.ConstantState constantState = entry.getValue().getConstantState();
                        messageDrawable = constantState != null ? constantState.newDrawable().mutate() : null;
                        if (messageDrawable != null && (themeDrawableColorKey = Theme.getThemeDrawableColorKey(entry.getKey())) >= 0) {
                            Theme.setDrawableColor(messageDrawable, getColor(themeDrawableColorKey));
                            break;
                        }
                        break;
                }
                if (messageDrawable != null) {
                    this.currentDrawables.put(entry.getKey(), messageDrawable);
                }
            }
        }

        private void initPaints() {
            Paint paint;
            for (Map.Entry<String, Paint> entry : Theme.getThemePaintsMap().entrySet()) {
                Paint value = entry.getValue();
                if (value instanceof TextPaint) {
                    paint = new TextPaint();
                    paint.setTextSize(value.getTextSize());
                    paint.setTypeface(value.getTypeface());
                } else {
                    paint = new Paint();
                }
                if ((value.getFlags() & 1) != 0) {
                    paint.setFlags(1);
                }
                int themePaintColorKey = Theme.getThemePaintColorKey(entry.getKey());
                if (themePaintColorKey >= 0 && !"paintChatActionBackgroundDarken".equals(entry.getKey())) {
                    paint.setColor(getColor(themePaintColorKey));
                }
                this.currentPaints.put(entry.getKey(), paint);
            }
        }

        private void initServiceMessageColors(Drawable drawable) {
            float f;
            int i;
            Drawable drawable2 = drawable;
            int i2 = AndroidUtilities.calcDrawableColor(drawable)[0];
            int currentColor = getCurrentColor(Theme.key_chat_serviceBackground);
            int i3 = Theme.key_chat_selectedBackground;
            int currentColor2 = getCurrentColor(i3);
            if (currentColor != 0 && this.wallpaper == null) {
                i2 = currentColor;
            }
            this.currentServiceColor = i2;
            if (drawable2 instanceof ChatBackgroundDrawable) {
                ChatBackgroundDrawable chatBackgroundDrawable = (ChatBackgroundDrawable) drawable2;
                f = chatBackgroundDrawable.getDimAmount();
                drawable2 = chatBackgroundDrawable.getDrawable(false);
            } else {
                f = BitmapDescriptorFactory.HUE_RED;
            }
            boolean z = drawable2 instanceof MotionBackgroundDrawable;
            boolean z2 = (z || (drawable2 instanceof BitmapDrawable)) && SharedConfig.getDevicePerformanceClass() != 0;
            this.drawServiceGradient = z2;
            this.drawSelectedGradient = z2;
            if (z2) {
                if (drawable2 instanceof BitmapDrawable) {
                    Bitmap bitmap = ((BitmapDrawable) drawable2).getBitmap();
                    int i4 = 40;
                    if (bitmap.getWidth() > bitmap.getHeight()) {
                        i = (int) ((40 / bitmap.getWidth()) * bitmap.getHeight());
                    } else {
                        i4 = (int) ((40 / bitmap.getHeight()) * bitmap.getWidth());
                        i = 40;
                    }
                    this.serviceBitmap = Bitmap.createBitmap(i4, i, Bitmap.Config.ARGB_8888);
                    this.serviceCanvas = new Canvas(this.serviceBitmap);
                    this.src.set(0, 0, bitmap.getWidth(), bitmap.getHeight());
                    this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                    this.serviceCanvas.drawBitmap(bitmap, this.src, this.dst, (Paint) null);
                    Bitmap bitmap2 = this.serviceBitmap;
                    Utilities.blurBitmap(bitmap2, 3, 1, bitmap2.getWidth(), this.serviceBitmap.getHeight(), this.serviceBitmap.getRowBytes());
                    this.serviceCanvas.drawColor(ColorUtils.setAlphaComponent(-16777216, (int) (f * 255.0f)));
                    Bitmap bitmap3 = this.serviceBitmap;
                    Shader.TileMode tileMode = Shader.TileMode.CLAMP;
                    this.serviceShader = new BitmapShader(bitmap3, tileMode, tileMode);
                    this.serviceBitmapSource = Bitmap.createBitmap(this.serviceBitmap);
                    Bitmap bitmap4 = this.serviceBitmapSource;
                    Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
                    this.serviceShaderSource = new BitmapShader(bitmap4, tileMode2, tileMode2);
                    if (Build.VERSION.SDK_INT >= 33) {
                        this.serviceShader.setFilterMode(2);
                        this.serviceShaderSource.setFilterMode(2);
                    }
                    this.useSourceShader = true;
                } else {
                    this.serviceBitmap = Bitmap.createBitmap(60, 80, Bitmap.Config.ARGB_8888);
                    this.serviceBitmapSource = ((MotionBackgroundDrawable) drawable2).getBitmap();
                    this.serviceCanvas = new Canvas(this.serviceBitmap);
                    this.src.set(0, 0, this.serviceBitmapSource.getWidth(), this.serviceBitmapSource.getHeight());
                    this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                    this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, (Paint) null);
                    this.serviceCanvas.drawColor(ColorUtils.setAlphaComponent(-16777216, (int) (f * 255.0f)));
                    Bitmap bitmap5 = this.serviceBitmap;
                    Shader.TileMode tileMode3 = Shader.TileMode.CLAMP;
                    this.serviceShader = new BitmapShader(bitmap5, tileMode3, tileMode3);
                    Bitmap bitmap6 = this.serviceBitmapSource;
                    Shader.TileMode tileMode4 = Shader.TileMode.CLAMP;
                    this.serviceShaderSource = new BitmapShader(bitmap6, tileMode4, tileMode4);
                    if (Build.VERSION.SDK_INT >= 33) {
                        this.serviceShader.setFilterMode(2);
                        this.serviceShaderSource.setFilterMode(2);
                    }
                    this.useSourceShader = true;
                }
            } else {
                this.serviceBitmap = null;
                this.serviceShader = null;
                this.serviceBitmapSource = null;
                this.serviceCanvas = null;
                this.useSourceShader = false;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            if (paint != null) {
                Paint paint4 = this.currentPaints.get("paintChatActionBackgroundDarken");
                if (paint4 == null) {
                    HashMap<String, Paint> hashMap = this.currentPaints;
                    Paint paint5 = new Paint(1);
                    hashMap.put("paintChatActionBackgroundDarken", paint5);
                    paint5.setColor(0);
                    paint4 = paint5;
                }
                if (this.drawServiceGradient) {
                    ColorMatrix colorMatrix = new ColorMatrix();
                    if (z) {
                        if (((MotionBackgroundDrawable) drawable2).getIntensity() >= BitmapDescriptorFactory.HUE_RED) {
                            colorMatrix.setSaturation(1.6f);
                            AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.97f : 0.92f);
                            AndroidUtilities.adjustBrightnessColorMatrix(colorMatrix, this.isDark ? 0.12f : -0.06f);
                        } else {
                            colorMatrix.setSaturation(1.1f);
                            AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.4f : 0.8f);
                            AndroidUtilities.adjustBrightnessColorMatrix(colorMatrix, this.isDark ? 0.08f : -0.06f);
                        }
                    } else {
                        colorMatrix.setSaturation(1.6f);
                        AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, this.isDark ? 0.9f : 0.84f);
                        AndroidUtilities.adjustBrightnessColorMatrix(colorMatrix, this.isDark ? 0.04f : 0.06f);
                    }
                    paint.setAlpha(255);
                    paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint.setShader(this.serviceShaderSource);
                    paint.setFilterBitmap(true);
                    paint2.setAlpha(255);
                    ColorMatrix colorMatrix2 = new ColorMatrix(colorMatrix);
                    AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2, 0.26f);
                    AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2, 0.92f);
                    paint2.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
                    paint2.setShader(this.serviceShaderSource);
                    paint2.setFilterBitmap(true);
                    paint4.setAlpha(0);
                } else {
                    paint.setColorFilter(null);
                    paint.setShader(null);
                    paint2.setColorFilter(null);
                    paint2.setShader(null);
                    paint4.setAlpha(21);
                }
            }
            if (paint3 == null) {
                paint3 = new Paint(1);
                this.currentPaints.put("paintChatMessageBackgroundSelected", paint3);
            }
            if (this.drawSelectedGradient) {
                ColorMatrix colorMatrix3 = new ColorMatrix();
                AndroidUtilities.adjustSaturationColorMatrix(colorMatrix3, 2.5f);
                AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix3, 0.75f);
                paint3.setAlpha(64);
                paint3.setColorFilter(new ColorMatrixColorFilter(colorMatrix3));
                paint3.setShader(this.serviceShaderSource);
                paint3.setFilterBitmap(true);
                return;
            }
            if (currentColor2 == 0) {
                currentColor2 = getColor(i3);
            }
            paint3.setColor(currentColor2);
            paint3.setColorFilter(null);
            paint3.setShader(null);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void updateServiceMessageColor(float f) {
            Bitmap bitmap;
            Bitmap bitmap2;
            if (this.currentPaints.isEmpty()) {
                return;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            int i = this.currentServiceColor;
            int currentColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
            int currentColor2 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor3 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor4 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
            int i2 = (f > 1.0f ? 1 : (f == 1.0f ? 0 : -1));
            if (i2 != 0) {
                i = ColorUtils.blendARGB(this.startServiceColor, i, f);
                currentColor = ColorUtils.blendARGB(this.startServiceTextColor, currentColor, f);
                currentColor2 = ColorUtils.blendARGB(this.startServiceLinkColor, currentColor2, f);
                currentColor3 = ColorUtils.blendARGB(this.startServiceButtonColor, currentColor3, f);
                currentColor4 = ColorUtils.blendARGB(this.startServiceIconColor, currentColor4, f);
            }
            if (paint != null && !this.drawServiceGradient) {
                paint.setColor(i);
                paint2.setColor(i);
            }
            Paint paint4 = getPaint("paintChatActionText");
            if (paint4 != null) {
                ((TextPaint) paint4).linkColor = currentColor2;
                getPaint("paintChatActionText").setColor(currentColor);
                getPaint("paintChatBotButton").setColor(currentColor3);
            }
            Theme.setDrawableColor(getDrawable("drawableMsgStickerCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerClock"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerHalfCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerPinned"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerReplies"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerViews"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableBotInline"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableBotLink"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawable_botInvite"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableCommentSticker"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableGoIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableReplyIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableShareIcon"), currentColor4);
            if (this.serviceCanvas == null || (bitmap = this.serviceBitmapSource) == null) {
                return;
            }
            if (i2 != 0 && (bitmap2 = this.startServiceBitmap) != null) {
                this.useSourceShader = false;
                this.src.set(0, 0, bitmap2.getWidth(), this.startServiceBitmap.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.startServiceBitmap, this.src, this.dst, (Paint) null);
                this.paint.setAlpha((int) (f * 255.0f));
                this.src.set(0, 0, this.serviceBitmapSource.getWidth(), this.serviceBitmapSource.getHeight());
                this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, this.paint);
                if (paint != null) {
                    paint.setShader(this.serviceShader);
                    paint2.setShader(this.serviceShader);
                }
                if (paint3 != null) {
                    paint3.setShader(this.serviceShader);
                    return;
                }
                return;
            }
            this.useSourceShader = true;
            this.src.set(0, 0, bitmap.getWidth(), this.serviceBitmapSource.getHeight());
            this.dst.set(0, 0, this.serviceBitmap.getWidth(), this.serviceBitmap.getHeight());
            this.serviceCanvas.drawBitmap(this.serviceBitmapSource, this.src, this.dst, (Paint) null);
            if (paint != null) {
                paint.setShader(this.serviceShaderSource);
                paint2.setShader(this.serviceShaderSource);
            }
            if (paint3 != null) {
                paint3.setShader(this.serviceShaderSource);
            }
        }

        private Drawable getBackgroundDrawableFromTheme(final EmojiThemes emojiThemes, int i) {
            if (emojiThemes.showAsDefaultStub) {
                Drawable drawable = Theme.createBackgroundDrawable(EmojiThemes.getDefaultThemeInfo(this.isDark), emojiThemes.getPreviewColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0), emojiThemes.getWallpaperLink(this.isDark ? 1 : 0), i, false).wallpaper;
                return new ColorDrawable(-16777216);
            }
            int color = getColor(Theme.key_chat_wallpaper);
            int color2 = getColor(Theme.key_chat_wallpaper_gradient_to1);
            int color3 = getColor(Theme.key_chat_wallpaper_gradient_to2);
            int color4 = getColor(Theme.key_chat_wallpaper_gradient_to3);
            final MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable();
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(this.isDark ? 1 : 0).settings.intensity);
            motionBackgroundDrawable.setColors(color, color2, color3, color4, 0, true);
            motionBackgroundDrawable.setPhase(i);
            final int patternColor = motionBackgroundDrawable.getPatternColor();
            final boolean z = this.isDark;
            emojiThemes.loadWallpaper(z ? 1 : 0, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda7
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.ThemeDelegate.this.lambda$getBackgroundDrawableFromTheme$7(emojiThemes, z, motionBackgroundDrawable, patternColor, (Pair) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC$TL_error tLRPC$TL_error) {
                    ResultCallback.CC.$default$onError(this, tLRPC$TL_error);
                }
            });
            return motionBackgroundDrawable;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$getBackgroundDrawableFromTheme$7(EmojiThemes emojiThemes, boolean z, final MotionBackgroundDrawable motionBackgroundDrawable, int i, Pair pair) {
            if (pair == null) {
                return;
            }
            long longValue = ((Long) pair.first).longValue();
            Bitmap bitmap = (Bitmap) pair.second;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 == null || longValue != emojiThemes2.getTlTheme(this.isDark ? 1 : 0).f1739id || bitmap == null) {
                return;
            }
            ValueAnimator valueAnimator = this.patternIntensityAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(z ? 1 : 0).settings.intensity, bitmap);
            motionBackgroundDrawable.setPatternColorFilter(i);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(BitmapDescriptorFactory.HUE_RED, 1.0f);
            this.patternIntensityAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda2
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.ThemeDelegate.lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable.this, valueAnimator2);
                }
            });
            this.patternIntensityAnimator.setDuration(250L);
            this.patternIntensityAnimator.start();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        public TLRPC$WallPaper getCurrentWallpaper() {
            return this.wallpaper;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBackground() {
        if (this.contentView == null) {
            return;
        }
        if ((this.themeDelegate.backgroundDrawable == null || this.contentView.getBackgroundImage() == null) && this.contentView.getBackgroundImage() == null) {
            this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBotHelpCellClick(final BotHelpCell botHelpCell) {
        MessagesController.getInstance(this.currentAccount).getTranslateController().isContextTranslateEnabled();
        final CharSequence text = botHelpCell.getText();
        if (TextUtils.isEmpty(text)) {
            botHelpCell.setClickable(false);
        } else {
            LanguageDetector.detectLanguage(text == null ? "" : text.toString(), new LanguageDetector.StringCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda306
                @Override // org.telegram.messenger.LanguageDetector.StringCallback
                public final void run(String str) {
                    ChatActivity.this.lambda$updateBotHelpCellClick$361(botHelpCell, text, str);
                }
            }, new LanguageDetector.ExceptionCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda305
                @Override // org.telegram.messenger.LanguageDetector.ExceptionCallback
                public final void run(Exception exc) {
                    BotHelpCell.this.setClickable(false);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$361(final BotHelpCell botHelpCell, final CharSequence charSequence, final String str) {
        final String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
        botHelpCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda108
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$updateBotHelpCellClick$360(charSequence, str, language, botHelpCell, view);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$360(final CharSequence charSequence, final String str, final String str2, BotHelpCell botHelpCell, View view) {
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
        Drawable mutate = ContextCompat.getDrawable(getContext(), C3632R.C3634drawable.popup_fixed_alert).mutate();
        mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
        actionBarPopupWindowLayout.setBackground(mutate);
        final Runnable[] runnableArr = new Runnable[1];
        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(getContext(), true, !SharedConfig.isBotHelpTranslateEnabled);
        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("Copy", C3632R.string.Copy), C3632R.C3634drawable.msg_copy);
        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$updateBotHelpCellClick$357(charSequence, runnableArr, view2);
            }
        });
        actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
        ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem(getContext(), true, true);
        actionBarMenuSubItem2.updateSelectorBackground(false, true);
        actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString("TranslateMessage", C3632R.string.TranslateMessage), C3632R.C3634drawable.msg_translate);
        actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda109
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$updateBotHelpCellClick$358(charSequence, str, str2, runnableArr, view2);
            }
        });
        if (SharedConfig.isBotHelpTranslateEnabled) {
            actionBarPopupWindowLayout.addView(actionBarMenuSubItem2);
        }
        final ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(actionBarPopupWindowLayout, -2, -2);
        runnableArr[0] = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda170
            @Override // java.lang.Runnable
            public final void run() {
                ActionBarPopupWindow.this.dismiss();
            }
        };
        actionBarPopupWindow.setPauseNotifications(true);
        actionBarPopupWindow.setDismissAnimationDuration(220);
        actionBarPopupWindow.setOutsideTouchable(true);
        actionBarPopupWindow.setClippingEnabled(true);
        actionBarPopupWindow.setAnimationStyle(C3632R.style.PopupContextAnimation);
        actionBarPopupWindow.setFocusable(true);
        actionBarPopupWindowLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.m107dp(1000), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.m107dp(1000), Integer.MIN_VALUE));
        actionBarPopupWindow.showAsDropDown(botHelpCell, (botHelpCell.getWidth() / 2) - (actionBarPopupWindowLayout.getMeasuredWidth() / 2), AndroidUtilities.m107dp(-16), 83);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$357(CharSequence charSequence, Runnable[] runnableArr, View view) {
        AndroidUtilities.addToClipboard(charSequence);
        checkTopUndoView();
        UndoView undoView = this.topUndoView;
        if (undoView != null) {
            undoView.showWithAction(0L, 18, LocaleController.getString("TextCopied", C3632R.string.TextCopied));
        }
        if (runnableArr[0] != null) {
            runnableArr[0].run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$358(CharSequence charSequence, String str, String str2, Runnable[] runnableArr, View view) {
        showDialog(createTranslateIncomingDialog(charSequence.toString(), null, null));
        if (runnableArr[0] != null) {
            runnableArr[0].run();
        }
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    protected boolean allowPresentFragment() {
        return !this.inPreviewMode;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean hideKeyboardOnShow() {
        MessageObject messageObject = this.threadMessageObject;
        if (messageObject != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
            return false;
        }
        return super.hideKeyboardOnShow();
    }

    @Override // org.telegram.p043ui.ActionBar.BaseFragment
    public boolean isLightStatusBar() {
        int color;
        if (this.reportType < 0) {
            return AndroidUtilities.computePerceivedBrightness(this.actionBar.getBackgroundColor()) > 0.721f;
        }
        Theme.ResourcesProvider resourceProvider = getResourceProvider();
        if (resourceProvider != null) {
            color = resourceProvider.getColorOrDefault(Theme.key_actionBarActionModeDefault);
        } else {
            color = Theme.getColor(Theme.key_actionBarActionModeDefault, null, true);
        }
        return ColorUtils.calculateLuminance(color) > 0.699999988079071d;
    }

    public MessageObject.GroupedMessages getGroup(long j) {
        return this.groupedMessagesMap.get(j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public MessageSkeleton getNewSkeleton(boolean z) {
        MessageSkeleton messageSkeleton = new MessageSkeleton(null);
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)) {
            messageSkeleton.height = AndroidUtilities.m107dp(128) + Utilities.fastRandom.nextInt(AndroidUtilities.m107dp(64));
        } else {
            messageSkeleton.height = AndroidUtilities.m107dp(64) + Utilities.fastRandom.nextInt(AndroidUtilities.m107dp(64));
        }
        messageSkeleton.width = (int) Math.min((this.chatListView.getWidth() * 0.8f) - (z ? 0 : AndroidUtilities.m107dp(42)), AndroidUtilities.m107dp(42) + (((Utilities.fastRandom.nextFloat() * 0.35f) + 0.4f) * this.chatListView.getWidth()));
        return messageSkeleton;
    }

    @Override // org.telegram.p043ui.Components.ChatActivityInterface
    public SizeNotifierFrameLayout getContentView() {
        return this.contentView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: org.telegram.ui.ChatActivity$MessageSkeleton */
    /* loaded from: classes5.dex */
    public static final class MessageSkeleton {
        int height;
        int lastBottom;
        int width;

        private MessageSkeleton() {
        }

        /* synthetic */ MessageSkeleton(C41961 c41961) {
            this();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$RecyclerListViewInternal */
    /* loaded from: classes5.dex */
    private class RecyclerListViewInternal extends RecyclerListView implements StoriesListPlaceProvider.ClippedView {
        public RecyclerListViewInternal(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
        }

        @Override // org.telegram.p043ui.Stories.StoriesListPlaceProvider.ClippedView
        public void updateClip(int[] iArr) {
            iArr[0] = ((int) ChatActivity.this.chatListViewPaddingTop) - AndroidUtilities.m107dp(4);
            iArr[1] = ChatActivity.this.chatListView.getMeasuredHeight() - (ChatActivity.this.chatListView.getPaddingBottom() - AndroidUtilities.m107dp(3));
        }
    }

    private void updateVisibleWallpaperActions() {
        MessageObject messageObject;
        if (this.chatListView == null || this.chatAdapter == null) {
            return;
        }
        for (int i = 0; i < this.chatListView.getChildCount(); i++) {
            View childAt = this.chatListView.getChildAt(i);
            int childAdapterPosition = this.chatListView.getChildAdapterPosition(childAt) - this.chatAdapter.messagesStartRow;
            if ((childAt instanceof ChatActionCell) && childAdapterPosition >= 0 && childAdapterPosition < this.messages.size() && (messageObject = this.messages.get(childAdapterPosition)) != null && messageObject.isWallpaperForBoth()) {
                ((ChatActionCell) childAt).setMessageObject(messageObject, true);
            }
        }
    }

    private void checkLeaveChannelButton() {
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem == null || this.chatMode == 3 || actionBarMenuItem.hasSubItem(16) || this.isTopic) {
            return;
        }
        if (ChatObject.isChannel(this.currentChat)) {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (!tLRPC$Chat.creator) {
                if (ChatObject.isNotInChat(tLRPC$Chat)) {
                    return;
                }
                if (this.currentChat.megagroup) {
                    this.headerItem.lazilyAddSubItem(16, C3632R.C3634drawable.msg_leave, LocaleController.getString("LeaveMegaMenu", C3632R.string.LeaveMegaMenu));
                    return;
                } else {
                    this.headerItem.lazilyAddSubItem(16, C3632R.C3634drawable.msg_leave, LocaleController.getString("LeaveChannelMenu", C3632R.string.LeaveChannelMenu));
                    return;
                }
            }
        }
        if (ChatObject.isChannel(this.currentChat)) {
            return;
        }
        if (this.currentChat != null) {
            this.headerItem.lazilyAddSubItem(16, C3632R.C3634drawable.msg_leave, LocaleController.getString("DeleteAndExit", C3632R.string.DeleteAndExit));
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.bot) {
            ActionBarMenuItem.Item lazilyAddSubItem = this.headerItem.lazilyAddSubItem(16, C3632R.C3634drawable.msg_block2, LocaleController.getString(C3632R.string.DeleteAndBlock));
            int i = Theme.key_text_RedRegular;
            lazilyAddSubItem.setColors(getThemedColor(i), getThemedColor(i));
            return;
        }
        this.headerItem.lazilyAddSubItem(16, C3632R.C3634drawable.msg_delete, LocaleController.getString("DeleteChatUser", C3632R.string.DeleteChatUser));
    }

    public boolean supportsThanosEffect() {
        ThanosEffect thanosEffect = this.chatListThanosEffect;
        return (thanosEffect == null || !thanosEffect.destroyed) && ThanosEffect.supports() && LiteMode.isEnabled(65536);
    }

    public ThanosEffect getChatThanosEffect() {
        if (LiteMode.isEnabled(65536) && ThanosEffect.supports()) {
            if (this.chatListThanosEffect == null) {
                if (getContext() == null || !ThanosEffect.supports() || this.chatListView == null || this.contentView == null) {
                    return null;
                }
                ThanosEffect thanosEffect = new ThanosEffect(getContext(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda216
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$getChatThanosEffect$363();
                    }
                });
                this.chatListThanosEffect = thanosEffect;
                ChatActivityFragmentView chatActivityFragmentView = this.contentView;
                chatActivityFragmentView.addView(thanosEffect, chatActivityFragmentView.indexOfChild(this.chatListView) + 1, LayoutHelper.createFrame(-1, -1));
            }
            return this.chatListThanosEffect;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatThanosEffect$363() {
        ThanosEffect thanosEffect;
        if (this.removingFromParent || (thanosEffect = this.chatListThanosEffect) == null) {
            return;
        }
        this.chatListThanosEffect = null;
        this.contentView.removeView(thanosEffect);
    }

    private void checkGroupMessagesOrder() {
        int i;
        if (this.reversed) {
            int i2 = -1;
            long j = 0;
            for (int i3 = 0; i3 < this.messages.size(); i3++) {
                long groupIdForUse = this.messages.get(i3).getGroupIdForUse();
                if (j != groupIdForUse) {
                    if (i2 >= 0 && j != 0 && (i = i3 - i2) > 1) {
                        ArrayList arrayList = new ArrayList();
                        for (int i4 = 0; i4 < i; i4++) {
                            arrayList.add(this.messages.remove(i2));
                        }
                        Collections.sort(arrayList, new java.util.Comparator() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda301
                            @Override // java.util.Comparator
                            public final int compare(Object obj, Object obj2) {
                                int lambda$checkGroupMessagesOrder$364;
                                lambda$checkGroupMessagesOrder$364 = ChatActivity.lambda$checkGroupMessagesOrder$364((MessageObject) obj, (MessageObject) obj2);
                                return lambda$checkGroupMessagesOrder$364;
                            }
                        });
                        this.messages.addAll(i2, arrayList);
                    }
                    i2 = i3;
                    j = groupIdForUse;
                }
            }
            if (i2 < 0 || j == 0 || this.messages.size() - i2 <= 1) {
                return;
            }
            int size = this.messages.size() - i2;
            ArrayList arrayList2 = new ArrayList();
            for (int i5 = 0; i5 < size; i5++) {
                arrayList2.add(this.messages.remove(i2));
            }
            this.messages.addAll(i2, arrayList2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkGroupMessagesOrder$364(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject2.getId() - messageObject.getId();
    }

    private void invalidatePremiumBlocked() {
        TLRPC$User tLRPC$User;
        if (getUserConfig().isPremium() || (tLRPC$User = this.currentUser) == null || !tLRPC$User.contact_require_premium || this.messages.isEmpty() == getMessagesController().isUserPremiumBlocked(getDialogId())) {
            return;
        }
        getMessagesController().invalidateUserPremiumBlocked(getDialogId(), this.classGuid);
    }
}
