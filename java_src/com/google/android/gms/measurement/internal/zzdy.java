package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.google.android.exoplayer2.C0475C;
import com.google.android.exoplayer2.audio.AacUtil;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
/* compiled from: com.google.android.gms:play-services-measurement-impl@@19.0.2 */
@VisibleForTesting
/* loaded from: classes3.dex */
public final class zzdy {
    public static final zzdx<Long> zzA;
    public static final zzdx<Integer> zzB;
    public static final zzdx<Long> zzC;
    public static final zzdx<Integer> zzD;
    public static final zzdx<Integer> zzE;
    public static final zzdx<Integer> zzF;
    public static final zzdx<Integer> zzG;
    public static final zzdx<Integer> zzH;
    public static final zzdx<Long> zzI;
    public static final zzdx<Boolean> zzJ;
    public static final zzdx<String> zzK;
    public static final zzdx<Long> zzL;
    public static final zzdx<Integer> zzM;
    public static final zzdx<Double> zzN;
    public static final zzdx<Integer> zzO;
    public static final zzdx<Integer> zzP;
    public static final zzdx<Long> zzQ;
    public static final zzdx<Boolean> zzR;
    public static final zzdx<Boolean> zzS;
    public static final zzdx<Boolean> zzT;
    public static final zzdx<Boolean> zzU;
    public static final zzdx<Boolean> zzV;
    public static final zzdx<Boolean> zzW;
    public static final zzdx<Boolean> zzX;
    public static final zzdx<Boolean> zzY;
    public static final zzdx<Boolean> zzZ;
    public static final zzdx<Boolean> zzaA;
    public static final zzdx<Boolean> zzaB;
    public static final zzdx<Boolean> zzaC;
    public static final zzdx<Boolean> zzaa;
    public static final zzdx<Boolean> zzab;
    public static final zzdx<Boolean> zzac;
    public static final zzdx<Boolean> zzad;
    public static final zzdx<Boolean> zzae;
    public static final zzdx<Boolean> zzaf;
    public static final zzdx<Boolean> zzag;
    public static final zzdx<Boolean> zzah;
    public static final zzdx<Boolean> zzai;
    public static final zzdx<Boolean> zzaj;
    public static final zzdx<Boolean> zzak;
    public static final zzdx<Boolean> zzal;
    public static final zzdx<Boolean> zzam;
    public static final zzdx<Boolean> zzan;
    public static final zzdx<Integer> zzao;
    public static final zzdx<Boolean> zzap;
    public static final zzdx<Boolean> zzaq;
    public static final zzdx<Boolean> zzar;
    public static final zzdx<Boolean> zzas;
    public static final zzdx<Boolean> zzat;
    public static final zzdx<Boolean> zzau;
    public static final zzdx<Boolean> zzav;
    public static final zzdx<Boolean> zzaw;
    public static final zzdx<Boolean> zzax;
    public static final zzdx<Boolean> zzay;
    public static final zzdx<Boolean> zzaz;
    public static final zzdx<Integer> zzj;
    public static final zzdx<Integer> zzk;
    public static final zzdx<Integer> zzl;
    public static final zzdx<Integer> zzm;
    public static final zzdx<Integer> zzn;
    public static final zzdx<Integer> zzo;
    public static final zzdx<String> zzp;
    public static final zzdx<Long> zzq;
    public static final zzdx<Long> zzr;
    public static final zzdx<Long> zzs;
    public static final zzdx<Long> zzt;
    public static final zzdx<Long> zzu;
    public static final zzdx<Long> zzv;
    public static final zzdx<Long> zzw;
    public static final zzdx<Long> zzx;
    public static final zzdx<Long> zzy;
    public static final zzdx<Long> zzz;
    private static final List<zzdx<?>> zzaD = Collections.synchronizedList(new ArrayList());
    private static final Set<zzdx<?>> zzaE = Collections.synchronizedSet(new HashSet());
    public static final zzdx<Long> zza = zza("measurement.ad_id_cache_time", 10000L, 10000L, zzav.zza);
    public static final zzdx<Long> zzb = zza("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, zzbg.zza);
    public static final zzdx<Long> zzc = zza("measurement.config.cache_time", 86400000L, 3600000L, zzay.zza);
    public static final zzdx<String> zzd = zza("measurement.config.url_scheme", "https", "https", zzbk.zza);
    public static final zzdx<String> zze = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzbw.zza);
    public static final zzdx<Integer> zzf = zza("measurement.upload.max_bundles", 100, 100, zzci.zza);
    public static final zzdx<Integer> zzg = zza("measurement.upload.max_batch_size", 65536, 65536, zzcu.zza);
    public static final zzdx<Integer> zzh = zza("measurement.upload.max_bundle_size", 65536, 65536, zzdg.zza);
    public static final zzdx<Integer> zzi = zza("measurement.upload.max_events_per_bundle", 1000, 1000, zzdp.zza);

    static {
        Integer valueOf = Integer.valueOf((int) AacUtil.AAC_LC_MAX_RATE_BYTES_PER_SECOND);
        zzj = zza("measurement.upload.max_events_per_day", valueOf, valueOf, zzdq.zza);
        zzk = zza("measurement.upload.max_error_events_per_day", 1000, 1000, zzbr.zza);
        zzl = zza("measurement.upload.max_public_events_per_day", 50000, 50000, zzcc.zza);
        zzm = zza("measurement.upload.max_conversions_per_day", 10000, 10000, zzcn.zza);
        zzn = zza("measurement.upload.max_realtime_events_per_day", 10, 10, zzcy.zza);
        zzo = zza("measurement.store.max_stored_events_per_app", valueOf, valueOf, zzdj.zza);
        zzp = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzdr.zza);
        zzq = zza("measurement.upload.backoff_period", 43200000L, 43200000L, zzds.zza);
        zzr = zza("measurement.upload.window_interval", 3600000L, 3600000L, zzdt.zza);
        zzs = zza("measurement.upload.interval", 3600000L, 3600000L, zzaw.zza);
        zzt = zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, zzax.zza);
        zzu = zza("measurement.upload.debug_upload_interval", 1000L, 1000L, zzaz.zza);
        zzv = zza("measurement.upload.minimum_delay", 500L, 500L, zzba.zza);
        zzw = zza("measurement.alarm_manager.minimum_interval", 60000L, 60000L, zzbb.zza);
        zzx = zza("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, zzbc.zza);
        zzy = zza("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, zzbd.zza);
        Long valueOf2 = Long.valueOf((long) C0475C.DEFAULT_SEEK_FORWARD_INCREMENT_MS);
        zzz = zza("measurement.upload.initial_upload_delay_time", valueOf2, valueOf2, zzbe.zza);
        zzA = zza("measurement.upload.retry_time", 1800000L, 1800000L, zzbf.zza);
        zzB = zza("measurement.upload.retry_count", 6, 6, zzbh.zza);
        zzC = zza("measurement.upload.max_queue_time", 2419200000L, 2419200000L, zzbi.zza);
        zzD = zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, zzbj.zza);
        zzE = zza("measurement.audience.filter_result_max_count", 200, 200, zzbl.zza);
        zzF = zza("measurement.upload.max_public_user_properties", 25, 25, null);
        zzG = zza("measurement.upload.max_event_name_cardinality", 500, 500, null);
        zzH = zza("measurement.upload.max_public_event_params", 25, 25, null);
        zzI = zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, zzbm.zza);
        Boolean bool = Boolean.FALSE;
        zzJ = zza("measurement.test.boolean_flag", bool, bool, zzbn.zza);
        zzK = zza("measurement.test.string_flag", "---", "---", zzbo.zza);
        zzL = zza("measurement.test.long_flag", -1L, -1L, zzbp.zza);
        zzM = zza("measurement.test.int_flag", -2, -2, zzbq.zza);
        Double valueOf3 = Double.valueOf(-3.0d);
        zzN = zza("measurement.test.double_flag", valueOf3, valueOf3, zzbs.zza);
        zzO = zza("measurement.experiment.max_ids", 50, 50, zzbt.zza);
        zzP = zza("measurement.max_bundles_per_iteration", 100, 100, zzbu.zza);
        zzQ = zza("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzbv.zza);
        zzR = zza("measurement.validation.internal_limits_internal_event_params", bool, bool, zzbx.zza);
        Boolean bool2 = Boolean.TRUE;
        zzS = zza("measurement.collection.firebase_global_collection_flag_enabled", bool2, bool2, zzby.zza);
        zzT = zza("measurement.collection.redundant_engagement_removal_enabled", bool, bool, zzbz.zza);
        zzU = zza("measurement.collection.log_event_and_bundle_v2", bool2, bool2, zzca.zza);
        zzV = zza("measurement.quality.checksum", bool, bool, null);
        zzW = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool, bool, zzcb.zza);
        zzX = zza("measurement.audience.refresh_event_count_filters_timestamp", bool, bool, zzcd.zza);
        zzY = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool, bool, zzce.zza);
        zzZ = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", bool2, bool2, zzcf.zza);
        zzaa = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool, bool, zzcg.zza);
        zzab = zza("measurement.sdk.collection.enable_extend_user_property_size", bool2, bool2, zzch.zza);
        zzac = zza("measurement.upload.file_lock_state_check", bool2, bool2, zzcj.zza);
        zzad = zza("measurement.ga.ga_app_id", bool, bool, zzck.zza);
        zzae = zza("measurement.lifecycle.app_in_background_parameter", bool, bool, zzcl.zza);
        zzaf = zza("measurement.integration.disable_firebase_instance_id", bool, bool, zzcm.zza);
        zzag = zza("measurement.lifecycle.app_backgrounded_engagement", bool, bool, zzco.zza);
        zzah = zza("measurement.collection.service.update_with_analytics_fix", bool, bool, zzcp.zza);
        zzai = zza("measurement.client.firebase_feature_rollout.v1.enable", bool2, bool2, zzcq.zza);
        zzaj = zza("measurement.client.sessions.check_on_reset_and_enable2", bool2, bool2, zzcr.zza);
        zzak = zza("measurement.scheduler.task_thread.cleanup_on_exit", bool, bool, zzcs.zza);
        zzal = zza("measurement.upload.file_truncate_fix", bool, bool, zzct.zza);
        zzam = zza("measurement.collection.synthetic_data_mitigation", bool, bool, zzcv.zza);
        zzan = zza("measurement.androidId.delete_feature", bool2, bool2, zzcw.zza);
        zzao = zza("measurement.service.storage_consent_support_version", 203600, 203600, zzcx.zza);
        zzap = zza("measurement.client.properties.non_null_origin", bool2, bool2, zzcz.zza);
        zzaq = zza("measurement.client.click_identifier_control.dev", bool, bool, zzda.zza);
        zzar = zza("measurement.service.click_identifier_control", bool, bool, zzdb.zza);
        zzas = zza("measurement.config.persist_last_modified", bool2, bool2, zzdc.zza);
        zzat = zza("measurement.client.consent.suppress_1p_in_ga4f_install", bool2, bool2, zzdd.zza);
        zzau = zza("measurement.client.consent.gmpappid_worker_thread_fix", bool2, bool2, zzde.zza);
        zzav = zza("measurement.module.pixie.ees", bool2, bool2, zzdf.zza);
        zzaw = zza("measurement.euid.client.dev", bool, bool, zzdh.zza);
        zzax = zza("measurement.euid.service", bool, bool, zzdi.zza);
        zzay = zza("measurement.adid_zero.service", bool, bool, zzdk.zza);
        zzaz = zza("measurement.adid_zero.remove_lair_if_adidzero_false", bool2, bool2, zzdl.zza);
        zzaA = zza("measurement.adid_zero.adid_uid", bool, bool, zzdm.zza);
        zzaB = zza("measurement.service.refactor.package_side_screen", bool2, bool2, zzdn.zza);
        zzaC = zza("measurement.config.fix_feature_flags_from_config", bool2, bool2, zzdo.zza);
    }

    @VisibleForTesting
    static <V> zzdx<V> zza(String str, V v, V v2, zzdu<V> zzduVar) {
        zzdx<V> zzdxVar = new zzdx<>(str, v, v2, zzduVar, null);
        zzaD.add(zzdxVar);
        return zzdxVar;
    }

    public static Map<String, String> zzc(Context context) {
        com.google.android.gms.internal.measurement.zzha zza2 = com.google.android.gms.internal.measurement.zzha.zza(context.getContentResolver(), com.google.android.gms.internal.measurement.zzhk.zza("com.google.android.gms.measurement"));
        return zza2 == null ? Collections.emptyMap() : zza2.zzc();
    }
}
